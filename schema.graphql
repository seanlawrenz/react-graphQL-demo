"""Holds Simplicity Field metadata."""
type _SimplicityField {
  name: String
  type: String
  label: String
  isRequired: Boolean
  isScalar: Boolean
  isKey: Boolean
  isList: Boolean
  isVisible: Boolean
  relatedTypeName: String
  relatedFields: [_SimplicityRelatedField]
}

"""Holds Simplicity Related Field metadata."""
type _SimplicityRelatedField {
  fieldName: String
  relatedFieldName: String
}

"""Holds Simplicity Type metadata."""
type _SimplicityType {
  schemaName: String
  schemaUriComponent: String
  schemaLabel: String
  objectName: String
  objectListUriComponent: String
  objectDetailUriComponent: String
  type: String
  graphqlQueryName: String
  objectSingularLabel: String
  objectPluralLabel: String
  characteristicField: _SimplicityField
  fields: [_SimplicityField]
}

type AccountsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID
  AccountId: Int!
  AccountName: String
  AccountDateCreated: DateTime
  AccountDateModified: DateTime
  AccountCode: String
  AccountAddress1: String
  AccountAddress2: String
  AccountAddress3: String
  AccountAddress4: String
  AccountCity: String
  AccountStateId: Int
  AccountState: String
  AccountPostalCode: String
  AccountCountry: String
  AccountMainPhone: String
  AccountUrl: String
  ManagerUid: ID!
  ManagerFullName: String
  IndustryId: Int
  IndustryName: String
}

"""A connection to a list of items."""
type AccountsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AccountsReportViewEdge {
  """The item at the end of the edge"""
  node: AccountsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input AccountsReportViewExpression {
  operator: Operator!
  operands: [AccountsReportViewOperand]!
}

enum AccountsReportViewField {
  id
  Beid
  AccountId
  AccountName
  AccountDateCreated
  AccountDateModified
  AccountCode
  AccountAddress1
  AccountAddress2
  AccountAddress3
  AccountAddress4
  AccountCity
  AccountStateId
  AccountState
  AccountPostalCode
  AccountCountry
  AccountMainPhone
  AccountUrl
  ManagerUid
  ManagerFullName
  IndustryId
  IndustryName
}

input AccountsReportViewOperand {
  field: AccountsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AccountsReportViewExpression
}

input AccountsReportViewOrderBy {
  field: AccountsReportViewField
  direction: OrderByDirection = Ascending
}

type ActualHoursByWeek implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TmUid: ID!
  ActualHours: Float
  TimeYear: Int
  TimeMonth: Int
  TimeWeek: Int
  Billable: Boolean!
}

"""A connection to a list of items."""
type ActualHoursByWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActualHoursByWeekEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ActualHoursByWeekEdge {
  """The item at the end of the edge"""
  node: ActualHoursByWeek

  """A cursor for use in pagination"""
  cursor: String!
}

input ActualHoursByWeekExpression {
  operator: Operator!
  operands: [ActualHoursByWeekOperand]!
}

enum ActualHoursByWeekField {
  id
  TmUid
  ActualHours
  TimeYear
  TimeMonth
  TimeWeek
  Billable
}

input ActualHoursByWeekOperand {
  field: ActualHoursByWeekField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ActualHoursByWeekExpression
}

input ActualHoursByWeekOrderBy {
  field: ActualHoursByWeekField
  direction: OrderByDirection = Ascending
}

type ActualHoursReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserRefId: Int!
  UserFullName: String
  ReportsToUsername: String
  ReportsToPrimaryEmail: String
  UserAlternateId: String
  Username: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserAuthProviderUsername: String
  UserShouldReportTime: Boolean!
  UserCreatedDate: DateTime
  PrimaryFunctionalRole: String
  UserDefaultPriorityName: String
  UserDefaultPriorityOrder: Float
  UserGender: String!
  UserLastLogon: DateTime
  UserModifiedDate: DateTime
  UserModifiedByUid: ID
  UserModifiedByFullName: String
  UserOrganizationalId: String
  UserPrimaryEmail: String!
  UserPrimaryPhone: String
  UserSecurityRoleId: ID
  UserSecurityRoleName: String
  UserWorkAddress: String
  UserWorkCity: String
  UserWorkState: String
  UserWorkZip: String
  UserWorkCountry: String
  UserWorkPhone: String
  UserWorkableHours: Float
  UserDefaultPriorityId: Int!
  PrimaryFunctionalRoleId: Int
  ReportsToUid: ID
  ReportsToUserFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  ProjectId: Int
  ProjectName: String
  ProjectClassification: String
  ProjectClassifictionId: Int
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
  TicketId: Int
  TicketTitle: String
  TicketTimeBudget: Decimal
  TicketTimeBudgetUsed: Decimal
  TicketTimeBudgetRemaining: Decimal
  TicketClassificationId: Int
  TicketClassificationName: String
  ItemId: Int!
  ItemTitle: String
  ItemType: String
  TimeAccountId: Int
  TimeAccountName: String!
  GlAccount: String
  Description: String
  StatusId: Int!
  StatusDate: DateTime
  StatusName: String!
  SubmittedDate: DateTime
  CreatedDate: DateTime!
  TimeDate: DateTime!
  IsBillable: Boolean!
  IsTimeOff: Boolean
  Hours: Decimal
  Year: Int
  Month: DateTime
  AccountId: Int
  AccountName: String
  AccountCode: String
  PlanId: Int
  PlanName: String
  ServiceId: Int
  ServiceName: String
  ServiceCategoryId: Int
  TypeId: Int
  TypeName: String
  TypeCategoryId: Int
  TypeCategoryName: String
  AppId: Int!
  AppName: String
  BillRate: Decimal!
  CostRate: Decimal
  HistFuncRoleId: Int
  HistFuncRoleName: String
  HistResourcePoolId: Int
  HistResourcePoolName: String
  HistPrimGroupId: Int
  HistPrimGroupName: String
}

"""A connection to a list of items."""
type ActualHoursReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActualHoursReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ActualHoursReportViewEdge {
  """The item at the end of the edge"""
  node: ActualHoursReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ActualHoursReportViewExpression {
  operator: Operator!
  operands: [ActualHoursReportViewOperand]!
}

enum ActualHoursReportViewField {
  id
  Beid
  UserUid
  UserRefId
  UserFullName
  ReportsToUsername
  ReportsToPrimaryEmail
  UserAlternateId
  Username
  IsActive
  Company
  IsEmployee
  UserAuthProviderUsername
  UserShouldReportTime
  UserCreatedDate
  PrimaryFunctionalRole
  UserDefaultPriorityName
  UserDefaultPriorityOrder
  UserGender
  UserLastLogon
  UserModifiedDate
  UserModifiedByUid
  UserModifiedByFullName
  UserOrganizationalId
  UserPrimaryEmail
  UserPrimaryPhone
  UserSecurityRoleId
  UserSecurityRoleName
  UserWorkAddress
  UserWorkCity
  UserWorkState
  UserWorkZip
  UserWorkCountry
  UserWorkPhone
  UserWorkableHours
  UserDefaultPriorityId
  PrimaryFunctionalRoleId
  ReportsToUid
  ReportsToUserFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportStartDate
  TimeReportEndDate
  ProjectId
  ProjectName
  ProjectClassification
  ProjectClassifictionId
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
  TicketId
  TicketTitle
  TicketTimeBudget
  TicketTimeBudgetUsed
  TicketTimeBudgetRemaining
  TicketClassificationId
  TicketClassificationName
  ItemId
  ItemTitle
  ItemType
  TimeAccountId
  TimeAccountName
  GlAccount
  Description
  StatusId
  StatusDate
  StatusName
  SubmittedDate
  CreatedDate
  TimeDate
  IsBillable
  IsTimeOff
  Hours
  Year
  Month
  AccountId
  AccountName
  AccountCode
  PlanId
  PlanName
  ServiceId
  ServiceName
  ServiceCategoryId
  TypeId
  TypeName
  TypeCategoryId
  TypeCategoryName
  AppId
  AppName
  BillRate
  CostRate
  HistFuncRoleId
  HistFuncRoleName
  HistResourcePoolId
  HistResourcePoolName
  HistPrimGroupId
  HistPrimGroupName
}

input ActualHoursReportViewOperand {
  field: ActualHoursReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ActualHoursReportViewExpression
}

input ActualHoursReportViewOrderBy {
  field: ActualHoursReportViewField
  direction: OrderByDirection = Ascending
}

type ActualHoursView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Year: Int
  Month: Int
  Week: Int
  YearMonth: Int
  YearWeek: Int
  ActualHours: Decimal
  UserUid: ID!
  ProjectId: Int!
  Beid: ID!
}

"""A connection to a list of items."""
type ActualHoursViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActualHoursViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ActualHoursViewEdge {
  """The item at the end of the edge"""
  node: ActualHoursView

  """A cursor for use in pagination"""
  cursor: String!
}

input ActualHoursViewExpression {
  operator: Operator!
  operands: [ActualHoursViewOperand]!
}

enum ActualHoursViewField {
  id
  Year
  Month
  Week
  YearMonth
  YearWeek
  ActualHours
  UserUid
  ProjectId
  Beid
}

input ActualHoursViewOperand {
  field: ActualHoursViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ActualHoursViewExpression
}

input ActualHoursViewOrderBy {
  field: ActualHoursViewField
  direction: OrderByDirection = Ascending
}

type Adjustment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  InvhInvoiceHeader: InvoiceHeader!
  Invhid: Int!
  Amount: Decimal!
  DateCreated: DateTime!
  Desc: String
}

"""A connection to a list of items."""
type AdjustmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdjustmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AdjustmentEdge {
  """The item at the end of the edge"""
  node: Adjustment

  """A cursor for use in pagination"""
  cursor: String!
}

input AdjustmentExpression {
  operator: Operator!
  operands: [AdjustmentOperand]!
}

enum AdjustmentField {
  id
  Id
  Invhid
  Amount
  DateCreated
  Desc
}

input AdjustmentOperand {
  field: AdjustmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AdjustmentExpression
}

input AdjustmentOrderBy {
  field: AdjustmentField
  direction: OrderByDirection = Ascending
}

type AdminLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  DateCreated: DateTime!
  Text: String!
}

"""A connection to a list of items."""
type AdminLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AdminLogEdge {
  """The item at the end of the edge"""
  node: AdminLog

  """A cursor for use in pagination"""
  cursor: String!
}

input AdminLogExpression {
  operator: Operator!
  operands: [AdminLogOperand]!
}

enum AdminLogField {
  id
  Id
  Beid
  DateCreated
  Text
}

input AdminLogOperand {
  field: AdminLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AdminLogExpression
}

input AdminLogOrderBy {
  field: AdminLogField
  direction: OrderByDirection = Ascending
}

type Alert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TableName: String!
  Desc: String!
  DateCreated: DateTime!
  ConditionSql: String
  AlertOnEventUserAlerts(after: String, first: Int, before: String, last: Int, sort: [EventUserAlertOrderBy], filter: EventUserAlertExpression): EventUserAlertConnection!
  AlertOnIssueUserAlerts(after: String, first: Int, before: String, last: Int, sort: [IssueUserAlertOrderBy], filter: IssueUserAlertExpression): IssueUserAlertConnection!
  AlertOnTaskUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TaskUserAlertOrderBy], filter: TaskUserAlertExpression): TaskUserAlertConnection!
}

"""A connection to a list of items."""
type AlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AlertEdge {
  """The item at the end of the edge"""
  node: Alert

  """A cursor for use in pagination"""
  cursor: String!
}

input AlertExpression {
  operator: Operator!
  operands: [AlertOperand]!
}

enum AlertField {
  id
  Id
  TableName
  Desc
  DateCreated
  ConditionSql
}

input AlertOperand {
  field: AlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AlertExpression
}

input AlertOrderBy {
  field: AlertField
  direction: OrderByDirection = Ascending
}

type AllocationEditMode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type AllocationEditModeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AllocationEditModeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AllocationEditModeEdge {
  """The item at the end of the edge"""
  node: AllocationEditMode

  """A cursor for use in pagination"""
  cursor: String!
}

input AllocationEditModeExpression {
  operator: Operator!
  operands: [AllocationEditModeOperand]!
}

enum AllocationEditModeField {
  id
  Id
  Name
}

input AllocationEditModeOperand {
  field: AllocationEditModeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AllocationEditModeExpression
}

input AllocationEditModeOrderBy {
  field: AllocationEditModeField
  direction: OrderByDirection = Ascending
}

type Announcement implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  Subject: String
  Body: String
  DateCreated: DateTime
  DateModified: DateTime
  DateExpires: DateTime
  AnnAnnouncementOnAnnouncementHistories(after: String, first: Int, before: String, last: Int, sort: [AnnouncementHistoryOrderBy], filter: AnnouncementHistoryExpression): AnnouncementHistoryConnection!
  AnAnnouncementOnAnnouncementsTus(after: String, first: Int, before: String, last: Int, sort: [AnnouncementsTuOrderBy], filter: AnnouncementsTuExpression): AnnouncementsTuConnection!
}

"""A connection to a list of items."""
type AnnouncementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnouncementEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AnnouncementEdge {
  """The item at the end of the edge"""
  node: Announcement

  """A cursor for use in pagination"""
  cursor: String!
}

input AnnouncementExpression {
  operator: Operator!
  operands: [AnnouncementOperand]!
}

enum AnnouncementField {
  id
  Id
  Uid
  Subject
  Body
  DateCreated
  DateModified
  DateExpires
}

type AnnouncementHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AnnAnnouncement: Announcement!
  AnnId: Int!
  DateCreated: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  Comments: String!
}

"""A connection to a list of items."""
type AnnouncementHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnouncementHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AnnouncementHistoryEdge {
  """The item at the end of the edge"""
  node: AnnouncementHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input AnnouncementHistoryExpression {
  operator: Operator!
  operands: [AnnouncementHistoryOperand]!
}

enum AnnouncementHistoryField {
  id
  Id
  AnnId
  DateCreated
  CreatedByUid
  Comments
}

input AnnouncementHistoryOperand {
  field: AnnouncementHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AnnouncementHistoryExpression
}

input AnnouncementHistoryOrderBy {
  field: AnnouncementHistoryField
  direction: OrderByDirection = Ascending
}

input AnnouncementOperand {
  field: AnnouncementField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AnnouncementExpression
}

input AnnouncementOrderBy {
  field: AnnouncementField
  direction: OrderByDirection = Ascending
}

type AnnouncementsTu implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  AnAnnouncement: Announcement!
  AnId: Int!
  Tid: Int!
  Uid: ID!
}

"""A connection to a list of items."""
type AnnouncementsTuConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnouncementsTuEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AnnouncementsTuEdge {
  """The item at the end of the edge"""
  node: AnnouncementsTu

  """A cursor for use in pagination"""
  cursor: String!
}

input AnnouncementsTuExpression {
  operator: Operator!
  operands: [AnnouncementsTuOperand]!
}

enum AnnouncementsTuField {
  id
  AnId
  Tid
  Uid
}

input AnnouncementsTuOperand {
  field: AnnouncementsTuField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AnnouncementsTuExpression
}

input AnnouncementsTuOrderBy {
  field: AnnouncementsTuField
  direction: OrderByDirection = Ascending
}

type AppComponent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  Component: Component!
  ComponentId: Int!
  Name: String!
  Order: Float!
  IsDefault: Boolean!
  IsActive: Boolean!
  IsCreatable: Boolean!
  NameLowercase: String!
  NamePlural: String!
  NameLowercasePlural: String!
  Article: String!
  CanHaveMaintActivities: Boolean!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
  CreatedUUser: User!
  CreatedUid: Int!
  ModifiedUUser: User!
  ModifiedUid: Int!
}

"""A connection to a list of items."""
type AppComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AppComponentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AppComponentEdge {
  """The item at the end of the edge"""
  node: AppComponent

  """A cursor for use in pagination"""
  cursor: String!
}

input AppComponentExpression {
  operator: Operator!
  operands: [AppComponentOperand]!
}

enum AppComponentField {
  id
  Id
  BeidInt
  AppId
  ComponentId
  Name
  Order
  IsDefault
  IsActive
  IsCreatable
  NameLowercase
  NamePlural
  NameLowercasePlural
  Article
  CanHaveMaintActivities
  CreatedDateUtc
  ModifiedDateUtc
  CreatedUid
  ModifiedUid
}

input AppComponentOperand {
  field: AppComponentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AppComponentExpression
}

input AppComponentOrderBy {
  field: AppComponentField
  direction: OrderByDirection = Ascending
}

type Application implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Name: String!
  Desc: String
  IsActive: Boolean!
  IsClass: Boolean!
  SystemName: String
  SystemClass: String!
  Requires: String
  IsDefault: Boolean!
  IconCharCode: Int!
  AllowCustomPages: Boolean!
  AllowDesktop: Boolean!
  AllowDesktopClient: Boolean!
  TdNextUrl: String
  TdNextTab: String
  ClientUrl: String
  AllowDesktopModules: Boolean!
  AllowDesktopModulesClient: Boolean!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  TdMobileUrl: String
  IsExternal: Boolean!
  PurposeApplicationPurpose: ApplicationPurpose!
  PurposeId: Int!
  AppApplicationOnAppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection!
  AppApplicationOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  AppApplicationOnAttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection!
  AppApplicationOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection!
  AppApplicationOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection
  AppApplicationOnDownloadApplications(after: String, first: Int, before: String, last: Int, sort: [DownloadApplicationOrderBy], filter: DownloadApplicationExpression): DownloadApplicationConnection!
  ApplicationOnEmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
  AppApplicationOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  AppApplicationOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
  AppApplicationOnIntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection!
  DestinationAppApplicationOnItemConversionHistories(after: String, first: Int, before: String, last: Int, sort: [ItemConversionHistoryOrderBy], filter: ItemConversionHistoryExpression): ItemConversionHistoryConnection!
  SourceAppApplicationOnItemConversionHistories(after: String, first: Int, before: String, last: Int, sort: [ItemConversionHistoryOrderBy], filter: ItemConversionHistoryExpression): ItemConversionHistoryConnection!
  AppApplicationOnNotificationFooters(after: String, first: Int, before: String, last: Int, sort: [NotificationFooterOrderBy], filter: NotificationFooterExpression): NotificationFooterConnection!
  AppApplicationOnNotificationTemplates(after: String, first: Int, before: String, last: Int, sort: [NotificationTemplateOrderBy], filter: NotificationTemplateExpression): NotificationTemplateConnection!
  AppApplicationOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection
  AppApplicationOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
  AppApplicationOnResponseTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateCategoryOrderBy], filter: ResponseTemplateCategoryExpression): ResponseTemplateCategoryConnection!
  AppApplicationOnResponseTemplates(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateOrderBy], filter: ResponseTemplateExpression): ResponseTemplateConnection!
  AppApplicationOnServiceLevelAgreements(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementOrderBy], filter: ServiceLevelAgreementExpression): ServiceLevelAgreementConnection!
  AppApplicationOnStatuses(after: String, first: Int, before: String, last: Int, sort: [StatusOrderBy], filter: StatusExpression): StatusConnection!
  AppApplicationOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection!
  AppApplicationOnSurveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection!
  AppApplicationOnTicketApplicationSettings(after: String, first: Int, before: String, last: Int, sort: [TicketApplicationSettingOrderBy], filter: TicketApplicationSettingExpression): TicketApplicationSettingConnection!
  AppApplicationOnTicketArchiveProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketArchiveProfileOrderBy], filter: TicketArchiveProfileExpression): TicketArchiveProfileConnection!
  AppApplicationOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  TicketAppApplicationOnTicketTaskConversions(after: String, first: Int, before: String, last: Int, sort: [TicketTaskConversionOrderBy], filter: TicketTaskConversionExpression): TicketTaskConversionConnection!
  AppApplicationOnTicketTaskTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTemplateOrderBy], filter: TicketTaskTemplateExpression): TicketTaskTemplateConnection!
  AppApplicationOnTicketTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTemplateOrderBy], filter: TicketTemplateExpression): TicketTemplateConnection!
  ApplicationOnWebhooks(after: String, first: Int, before: String, last: Int, sort: [WebhookOrderBy], filter: WebhookExpression): WebhookConnection!
  AppApplicationOnWebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection!
  AppApplicationOnWebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection!
  AppApplicationOnWebServices(after: String, first: Int, before: String, last: Int, sort: [WebServiceOrderBy], filter: WebServiceExpression): WebServiceConnection!
  AppApplicationOnWorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection
  AppApplicationOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection
}

"""A connection to a list of items."""
type ApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApplicationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ApplicationEdge {
  """The item at the end of the edge"""
  node: Application

  """A cursor for use in pagination"""
  cursor: String!
}

input ApplicationExpression {
  operator: Operator!
  operands: [ApplicationOperand]!
}

enum ApplicationField {
  id
  Id
  BeidInt
  Name
  Desc
  IsActive
  IsClass
  SystemName
  SystemClass
  Requires
  IsDefault
  IconCharCode
  AllowCustomPages
  AllowDesktop
  AllowDesktopClient
  TdNextUrl
  TdNextTab
  ClientUrl
  AllowDesktopModules
  AllowDesktopModulesClient
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  TdMobileUrl
  IsExternal
  PurposeId
}

input ApplicationOperand {
  field: ApplicationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ApplicationExpression
}

input ApplicationOrderBy {
  field: ApplicationField
  direction: OrderByDirection = Ascending
}

type ApplicationPurpose implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Order: Float!
  PurposeApplicationPurposeOnApplications(after: String, first: Int, before: String, last: Int, sort: [ApplicationOrderBy], filter: ApplicationExpression): ApplicationConnection!
}

"""A connection to a list of items."""
type ApplicationPurposeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApplicationPurposeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ApplicationPurposeEdge {
  """The item at the end of the edge"""
  node: ApplicationPurpose

  """A cursor for use in pagination"""
  cursor: String!
}

input ApplicationPurposeExpression {
  operator: Operator!
  operands: [ApplicationPurposeOperand]!
}

enum ApplicationPurposeField {
  id
  Id
  Name
  Order
}

input ApplicationPurposeOperand {
  field: ApplicationPurposeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ApplicationPurposeExpression
}

input ApplicationPurposeOrderBy {
  field: ApplicationPurposeField
  direction: OrderByDirection = Ascending
}

type Asset implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ProductModel: ProductModel!
  ProductModelId: Int!
  SupplierVendor: Vendor!
  SupplierId: Int!
  StatusAssetStatus: AssetStatus!
  StatusId: Int!
  Location: Location
  LocationId: Int!
  LocationRoom: LocationRoom
  LocationRoomId: Int!
  Tag: String
  SerialNumber: String!
  PurchaseCost: Decimal!
  AcquisitionDate: DateTime
  ExpectedReplacementDate: DateTime
  ReqCustomerUser: User!
  ReqCustomerId: ID!
  ReqDeptClientAcctCode: ClientAcctCode!
  ReqDeptId: Int!
  OwningCustomerUser: User
  OwningCustomerId: ID!
  OwningDeptClientAcctCode: ClientAcctCode
  OwningDeptId: Int!
  ParentAsset: Asset
  ParentId: Int
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  Name: String!
  AppApplication: Application
  AppId: Int!
  Form: Form!
  FormId: Int!

  """
  The base component id. Useful for relating Ticket data to AttributeValues.
  """
  ItemComponentId: Int
  ParentAssetOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  AssetOnAssetsContracts(after: String, first: Int, before: String, last: Int, sort: [AssetsContractOrderBy], filter: AssetsContractExpression): AssetsContractConnection!
  AssetOnAssetsDepartments(after: String, first: Int, before: String, last: Int, sort: [AssetsDepartmentOrderBy], filter: AssetsDepartmentExpression): AssetsDepartmentConnection!
  AssetOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  AssetOnAssetsUsers(after: String, first: Int, before: String, last: Int, sort: [AssetsUserOrderBy], filter: AssetsUserExpression): AssetsUserConnection!
  ItemAssetOnAttributeValues(after: String, first: Int, before: String, last: Int, sort: [AttributeValueOrderBy], filter: AttributeValueExpression): AttributeValueConnection
  ItemAssetOnItemTags(after: String, first: Int, before: String, last: Int, sort: [ItemTagOrderBy], filter: ItemTagExpression): ItemTagConnection
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge"""
  node: Asset

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetExpression {
  operator: Operator!
  operands: [AssetOperand]!
}

enum AssetField {
  id
  Id
  Beid
  ProductModelId
  SupplierId
  StatusId
  LocationId
  LocationRoomId
  Tag
  SerialNumber
  PurchaseCost
  AcquisitionDate
  ExpectedReplacementDate
  ReqCustomerId
  ReqDeptId
  OwningCustomerId
  OwningDeptId
  ParentId
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  Name
  AppId
  FormId
  ItemComponentId
}

type AssetFormSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ModifiedUid: ID!
  ModifiedDate: DateTime!
  DuplicateModeId: Int!
  DuplicateFormFields: Int!
  AppId: Int!
}

"""A connection to a list of items."""
type AssetFormSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetFormSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetFormSettingEdge {
  """The item at the end of the edge"""
  node: AssetFormSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetFormSettingExpression {
  operator: Operator!
  operands: [AssetFormSettingOperand]!
}

enum AssetFormSettingField {
  id
  Id
  BeidInt
  ModifiedUid
  ModifiedDate
  DuplicateModeId
  DuplicateFormFields
  AppId
}

input AssetFormSettingOperand {
  field: AssetFormSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetFormSettingExpression
}

input AssetFormSettingOrderBy {
  field: AssetFormSettingField
  direction: OrderByDirection = Ascending
}

input AssetOperand {
  field: AssetField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetExpression
}

input AssetOrderBy {
  field: AssetField
  direction: OrderByDirection = Ascending
}

type AssetsContract implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Asset: Asset!
  AssetId: Int!
  Contract: Contract!
  ContractId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  StartDate: DateTime!
  EndDate: DateTime!
}

"""A connection to a list of items."""
type AssetsContractConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetsContractEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetsContractEdge {
  """The item at the end of the edge"""
  node: AssetsContract

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetsContractExpression {
  operator: Operator!
  operands: [AssetsContractOperand]!
}

enum AssetsContractField {
  id
  AssetId
  ContractId
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  StartDate
  EndDate
}

input AssetsContractOperand {
  field: AssetsContractField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetsContractExpression
}

input AssetsContractOrderBy {
  field: AssetsContractField
  direction: OrderByDirection = Ascending
}

type AssetsDepartment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Asset: Asset!
  AssetId: Int!
  DeptClientAcctCode: ClientAcctCode!
  DeptId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type AssetsDepartmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetsDepartmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetsDepartmentEdge {
  """The item at the end of the edge"""
  node: AssetsDepartment

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetsDepartmentExpression {
  operator: Operator!
  operands: [AssetsDepartmentOperand]!
}

enum AssetsDepartmentField {
  id
  AssetId
  DeptId
  CreatedDate
  CreatedUid
}

input AssetsDepartmentOperand {
  field: AssetsDepartmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetsDepartmentExpression
}

input AssetsDepartmentOrderBy {
  field: AssetsDepartmentField
  direction: OrderByDirection = Ascending
}

type AssetsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  AssetId: Int!
  Beid: ID!
  AppId: Int!
  AppName: String!
  FormId: Int!
  FormName: String!
  ProductModelId: Int!
  ProductModelName: String!
  ManufacturerId: Int!
  ManufacturerName: String!
  ProductTypeId: Int!
  ProductTypeName: String!
  SupplierId: Int!
  SupplierName: String!
  StatusId: Int!
  StatusName: String!
  LocationId: Int!
  LocationName: String!
  LocationRoomId: Int!
  LocationRoomName: String!
  LocationLatitude: Decimal
  LocationLongitude: Decimal
  Tag: String
  SerialNumber: String!
  Name: String!
  ExternalId: String
  PurchaseCost: Decimal!
  AcquisitionDate: DateTime
  ExpectedReplacementDate: DateTime
  RequestingCustomerId: ID!
  RequestingCustomerName: String
  RequestingDepartmentId: Int!
  RequestingDepartmentName: String
  OwningCustomerId: ID!
  OwningCustomerName: String
  OwningCustomerEmail: String!
  OwningDepartmentId: Int!
  OwningDepartmentName: String
  HasOwner: Boolean
  ParentId: Int
  ParentSerial: String
  ParentName: String
  ParentTag: String
  ConfigurationItemId: Int!
  MaintenanceScheduleId: Int!
  MaintenanceScheduleName: String!
  CreatedDate: DateTime!
  CreatedUid: ID!
  CreatedFullName: String
  ModifiedDate: DateTime!
  ModifiedUid: ID!
  ModifiedFullName: String
}

"""A connection to a list of items."""
type AssetsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetsReportViewEdge {
  """The item at the end of the edge"""
  node: AssetsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetsReportViewExpression {
  operator: Operator!
  operands: [AssetsReportViewOperand]!
}

enum AssetsReportViewField {
  id
  AssetId
  Beid
  AppId
  AppName
  FormId
  FormName
  ProductModelId
  ProductModelName
  ManufacturerId
  ManufacturerName
  ProductTypeId
  ProductTypeName
  SupplierId
  SupplierName
  StatusId
  StatusName
  LocationId
  LocationName
  LocationRoomId
  LocationRoomName
  LocationLatitude
  LocationLongitude
  Tag
  SerialNumber
  Name
  ExternalId
  PurchaseCost
  AcquisitionDate
  ExpectedReplacementDate
  RequestingCustomerId
  RequestingCustomerName
  RequestingDepartmentId
  RequestingDepartmentName
  OwningCustomerId
  OwningCustomerName
  OwningCustomerEmail
  OwningDepartmentId
  OwningDepartmentName
  HasOwner
  ParentId
  ParentSerial
  ParentName
  ParentTag
  ConfigurationItemId
  MaintenanceScheduleId
  MaintenanceScheduleName
  CreatedDate
  CreatedUid
  CreatedFullName
  ModifiedDate
  ModifiedUid
  ModifiedFullName
}

input AssetsReportViewOperand {
  field: AssetsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetsReportViewExpression
}

input AssetsReportViewOrderBy {
  field: AssetsReportViewField
  direction: OrderByDirection = Ascending
}

type AssetStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  Order: Decimal!
  IsFinalStage: Boolean!
  IsActive: Boolean!
  AppId: Int!
  StatusAssetStatusOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  NewStatusAssetStatusOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  OldStatusAssetStatusOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
}

"""A connection to a list of items."""
type AssetStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetStatusEdge {
  """The item at the end of the edge"""
  node: AssetStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetStatusExpression {
  operator: Operator!
  operands: [AssetStatusOperand]!
}

enum AssetStatusField {
  id
  Id
  Beid
  Name
  Description
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  Order
  IsFinalStage
  IsActive
  AppId
}

type AssetStatusHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Asset: Asset!
  AssetId: Int!
  OldStatusAssetStatus: AssetStatus!
  OldStatusId: Int!
  NewStatusAssetStatus: AssetStatus!
  NewStatusId: Int!
  OldOwningCustomerUser: User!
  OldOwningCustomerId: ID!
  NewOwningCustomerUser: User!
  NewOwningCustomerId: ID!
  OldOwningDeptClientAcctCode: ClientAcctCode!
  OldOwningDeptId: Int!
  NewOwningDeptClientAcctCode: ClientAcctCode!
  NewOwningDeptId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type AssetStatusHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetStatusHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetStatusHistoryEdge {
  """The item at the end of the edge"""
  node: AssetStatusHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetStatusHistoryExpression {
  operator: Operator!
  operands: [AssetStatusHistoryOperand]!
}

enum AssetStatusHistoryField {
  id
  Id
  AssetId
  OldStatusId
  NewStatusId
  OldOwningCustomerId
  NewOwningCustomerId
  OldOwningDeptId
  NewOwningDeptId
  CreatedDate
  CreatedUid
}

input AssetStatusHistoryOperand {
  field: AssetStatusHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetStatusHistoryExpression
}

input AssetStatusHistoryOrderBy {
  field: AssetStatusHistoryField
  direction: OrderByDirection = Ascending
}

input AssetStatusOperand {
  field: AssetStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetStatusExpression
}

input AssetStatusOrderBy {
  field: AssetStatusField
  direction: OrderByDirection = Ascending
}

type AssetsUser implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Asset: Asset!
  AssetId: Int!
  CustomerUser: User!
  CustomerId: ID!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type AssetsUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetsUserEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssetsUserEdge {
  """The item at the end of the edge"""
  node: AssetsUser

  """A cursor for use in pagination"""
  cursor: String!
}

input AssetsUserExpression {
  operator: Operator!
  operands: [AssetsUserOperand]!
}

enum AssetsUserField {
  id
  AssetId
  CustomerId
  CreatedDate
  CreatedUid
}

input AssetsUserOperand {
  field: AssetsUserField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssetsUserExpression
}

input AssetsUserOrderBy {
  field: AssetsUserField
  direction: OrderByDirection = Ascending
}

type AssignedHoursView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Year: Int!
  Month: Int!
  Week: Int!
  YearMonth: Int!
  YearWeek: Int!
  AssignedHours: Float
  UserUid: ID!
  Beid: ID!
  ProjectId: Int!
}

"""A connection to a list of items."""
type AssignedHoursViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssignedHoursViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssignedHoursViewEdge {
  """The item at the end of the edge"""
  node: AssignedHoursView

  """A cursor for use in pagination"""
  cursor: String!
}

input AssignedHoursViewExpression {
  operator: Operator!
  operands: [AssignedHoursViewOperand]!
}

enum AssignedHoursViewField {
  id
  Year
  Month
  Week
  YearMonth
  YearWeek
  AssignedHours
  UserUid
  Beid
  ProjectId
}

input AssignedHoursViewOperand {
  field: AssignedHoursViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssignedHoursViewExpression
}

input AssignedHoursViewOrderBy {
  field: AssignedHoursViewField
  direction: OrderByDirection = Ascending
}

type AssignmentsView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ItemId: Int!
  ComponentId: Int!
  Uid: ID
  FunctionalRoleId: Int
  FunctionalRoleIdRequested: Int
  Rate: Decimal
  IsActive: Int
}

"""A connection to a list of items."""
type AssignmentsViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssignmentsViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AssignmentsViewEdge {
  """The item at the end of the edge"""
  node: AssignmentsView

  """A cursor for use in pagination"""
  cursor: String!
}

input AssignmentsViewExpression {
  operator: Operator!
  operands: [AssignmentsViewOperand]!
}

enum AssignmentsViewField {
  id
  ItemId
  ComponentId
  Uid
  FunctionalRoleId
  FunctionalRoleIdRequested
  Rate
  IsActive
}

input AssignmentsViewOperand {
  field: AssignmentsViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AssignmentsViewExpression
}

input AssignmentsViewOrderBy {
  field: AssignmentsViewField
  direction: OrderByDirection = Ascending
}

type Attachment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  Beid: ID!
  ItemId: Int!
  ComponentId: Int!
  Name: String!
  Size: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User
  CreatedUid: ID
  ProjectTeam: Team
  ProjectId: Int
  SourceFileSource: FileSource!
  SourceId: Int!
  ExternalUrl: String
}

"""A connection to a list of items."""
type AttachmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttachmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttachmentEdge {
  """The item at the end of the edge"""
  node: Attachment

  """A cursor for use in pagination"""
  cursor: String!
}

input AttachmentExpression {
  operator: Operator!
  operands: [AttachmentOperand]!
}

enum AttachmentField {
  id
  Id
  Beid
  ItemId
  ComponentId
  Name
  Size
  CreatedDate
  CreatedUid
  ProjectId
  SourceId
  ExternalUrl
}

input AttachmentOperand {
  field: AttachmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttachmentExpression
}

input AttachmentOrderBy {
  field: AttachmentField
  direction: OrderByDirection = Ascending
}

type Attribute implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity
  Beid: ID
  Name: String!
  Description: String
  DateCreated: DateTime!
  DateModified: DateTime!
  IsRequired: Boolean!
  FieldType: String
  Order: Int!
  ClientVisible: Boolean!
  Component: Component
  ComponentId: Int
  IsUpdatable: Boolean!
  IsActive: Boolean!
  SortExpression: String
  Alignment: String
  DataFormatString: String
  DataField: String
  HeaderText: String
  ColumnType: String
  DataNavigateUrlField: String
  DataNavigateUrlFormatString: String
  DataType: String
  IsDefaultColumn: Boolean!
  FooterFormatString: String
  FooterExpression: String
  ItemStyleWrap: Boolean!
  MinVersion: Float
  MaxVersion: Float
  EncryptQueryString: Boolean
  SectionAttributeSection: AttributeSection
  SectionId: Int
  IsList: Boolean!
  IsSelectable: Boolean
  IsFilterable: Boolean
  FilterExpression: String
  FilterFieldType: String
  FilterDataField: String
  Url: String
  SelectExpression: String
  IsFormField: Boolean!
  ReportSource: ReportSource
  ReportSourceId: Int
  ValidationType: ValidationType!
  ValidationTypeId: Int!
  ValidationArgument: String!
  ReportSourceFilterType: ReportSourceFilterType
  ReportSourceFilterTypeId: Int
  DefaultValue: String
  HtmlEscapeMode: Int!
  AppId: Int
  FilterNoValueTypeId: Int!
  FilterNoValueExpression: String
  ParentAttributeAttribute: Attribute
  ParentAttributeId: Int
  IsProtected: Boolean!
  AttAttributeOnAttributeChoices(after: String, first: Int, before: String, last: Int, sort: [AttributeChoiceOrderBy], filter: AttributeChoiceExpression): AttributeChoiceConnection!
  ChildAttributeAttributeOnAttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection!
  ParentAttributeAttributeOnAttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection!
  AttributeOnAttributeProtectionConfigurations(after: String, first: Int, before: String, last: Int, sort: [AttributeProtectionConfigurationOrderBy], filter: AttributeProtectionConfigurationExpression): AttributeProtectionConfigurationConnection!
  ParentAttributeAttributeOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
  AttAttributeOnAttributesItems(after: String, first: Int, before: String, last: Int, sort: [AttributesItemOrderBy], filter: AttributesItemExpression): AttributesItemConnection!
  AttAttributeOnAttributeValues(after: String, first: Int, before: String, last: Int, sort: [AttributeValueOrderBy], filter: AttributeValueExpression): AttributeValueConnection
  AttributeOnSurveyQuestions(after: String, first: Int, before: String, last: Int, sort: [SurveyQuestionOrderBy], filter: SurveyQuestionExpression): SurveyQuestionConnection!
  AttributeOnUserPinEntryFailures(after: String, first: Int, before: String, last: Int, sort: [UserPinEntryFailureOrderBy], filter: UserPinEntryFailureExpression): UserPinEntryFailureConnection!
}

type AttributeChoice implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AttAttribute: Attribute!
  Attid: Int!
  Name: String!
  DateCreated: DateTime!
  DateModified: DateTime!
  Order: Int!
  IsActive: Boolean!
  ValueAttributeChoiceOnAttributeValues(after: String, first: Int, before: String, last: Int, sort: [AttributeValueOrderBy], filter: AttributeValueExpression): AttributeValueConnection
}

"""A connection to a list of items."""
type AttributeChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeChoiceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeChoiceEdge {
  """The item at the end of the edge"""
  node: AttributeChoice

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeChoiceExpression {
  operator: Operator!
  operands: [AttributeChoiceOperand]!
}

enum AttributeChoiceField {
  id
  Id
  Attid
  Name
  DateCreated
  DateModified
  Order
  IsActive
}

input AttributeChoiceOperand {
  field: AttributeChoiceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeChoiceExpression
}

input AttributeChoiceOrderBy {
  field: AttributeChoiceField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type AttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type AttributeDependency implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  Component: Component!
  ComponentId: Int!
  ParentAttributeAttribute: Attribute!
  ParentAttributeId: Int!
  ParentChoiceId: Int
  ChildAttributeAttribute: Attribute!
  ChildAttributeId: Int!
  ChildChoiceId: Int
}

"""A connection to a list of items."""
type AttributeDependencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeDependencyEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeDependencyEdge {
  """The item at the end of the edge"""
  node: AttributeDependency

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeDependencyExpression {
  operator: Operator!
  operands: [AttributeDependencyOperand]!
}

enum AttributeDependencyField {
  id
  Id
  BeidInt
  AppId
  ComponentId
  ParentAttributeId
  ParentChoiceId
  ChildAttributeId
  ChildChoiceId
}

input AttributeDependencyOperand {
  field: AttributeDependencyField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeDependencyExpression
}

input AttributeDependencyOrderBy {
  field: AttributeDependencyField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type AttributeEdge {
  """The item at the end of the edge"""
  node: Attribute

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeExpression {
  operator: Operator!
  operands: [AttributeOperand]!
}

enum AttributeField {
  id
  Id
  Beid
  Name
  Description
  DateCreated
  DateModified
  IsRequired
  FieldType
  Order
  ClientVisible
  ComponentId
  IsUpdatable
  IsActive
  SortExpression
  Alignment
  DataFormatString
  DataField
  HeaderText
  ColumnType
  DataNavigateUrlField
  DataNavigateUrlFormatString
  DataType
  IsDefaultColumn
  FooterFormatString
  FooterExpression
  ItemStyleWrap
  MinVersion
  MaxVersion
  EncryptQueryString
  SectionId
  IsList
  IsSelectable
  IsFilterable
  FilterExpression
  FilterFieldType
  FilterDataField
  Url
  SelectExpression
  IsFormField
  ReportSourceId
  ValidationTypeId
  ValidationArgument
  ReportSourceFilterTypeId
  DefaultValue
  HtmlEscapeMode
  AppId
  FilterNoValueTypeId
  FilterNoValueExpression
  ParentAttributeId
  IsProtected
}

input AttributeOperand {
  field: AttributeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeExpression
}

input AttributeOrderBy {
  field: AttributeField
  direction: OrderByDirection = Ascending
}

type AttributeProtectionAccessLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  ComponentId: Int!
  ItemId: Int!
  AttributeId: Int!
  TypeId: Int!
  OldValue: String
  NewValue: String
  UserId: Int!
  CreatedDateUtc: DateTime!
  ClientIpAddress: Buffer!
  ItemTitle: String!
}

"""A connection to a list of items."""
type AttributeProtectionAccessLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeProtectionAccessLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeProtectionAccessLogEdge {
  """The item at the end of the edge"""
  node: AttributeProtectionAccessLog

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeProtectionAccessLogExpression {
  operator: Operator!
  operands: [AttributeProtectionAccessLogOperand]!
}

enum AttributeProtectionAccessLogField {
  id
  Id
  BeidInt
  ComponentId
  ItemId
  AttributeId
  TypeId
  OldValue
  NewValue
  UserId
  CreatedDateUtc
  ClientIpAddress
  ItemTitle
}

input AttributeProtectionAccessLogOperand {
  field: AttributeProtectionAccessLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeProtectionAccessLogExpression
}

input AttributeProtectionAccessLogOrderBy {
  field: AttributeProtectionAccessLogField
  direction: OrderByDirection = Ascending
}

type AttributeProtectionConfiguration implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Attribute: Attribute!
  AttributeId: Int!
  UnmaskedCharacterCount: Int!
  VisibilityDurationSeconds: Int!
  IsRequestorVisible: Boolean!
  IsPinAuthRequiredForTechnician: Boolean!
}

"""A connection to a list of items."""
type AttributeProtectionConfigurationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeProtectionConfigurationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeProtectionConfigurationEdge {
  """The item at the end of the edge"""
  node: AttributeProtectionConfiguration

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeProtectionConfigurationExpression {
  operator: Operator!
  operands: [AttributeProtectionConfigurationOperand]!
}

enum AttributeProtectionConfigurationField {
  id
  Id
  BeidInt
  AttributeId
  UnmaskedCharacterCount
  VisibilityDurationSeconds
  IsRequestorVisible
  IsPinAuthRequiredForTechnician
}

type AttributeProtectionConfigurationLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  AttributeId: Int!
  ChangeText: String!
  AddedGroupIDs: String
  RemovedGroupIDs: String
  UserId: Int!
  CreatedDateUtc: DateTime!
  ClientIpAddress: Buffer!
}

"""A connection to a list of items."""
type AttributeProtectionConfigurationLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeProtectionConfigurationLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeProtectionConfigurationLogEdge {
  """The item at the end of the edge"""
  node: AttributeProtectionConfigurationLog

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeProtectionConfigurationLogExpression {
  operator: Operator!
  operands: [AttributeProtectionConfigurationLogOperand]!
}

enum AttributeProtectionConfigurationLogField {
  id
  Id
  BeidInt
  AttributeId
  ChangeText
  AddedGroupIDs
  RemovedGroupIDs
  UserId
  CreatedDateUtc
  ClientIpAddress
}

input AttributeProtectionConfigurationLogOperand {
  field: AttributeProtectionConfigurationLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeProtectionConfigurationLogExpression
}

input AttributeProtectionConfigurationLogOrderBy {
  field: AttributeProtectionConfigurationLogField
  direction: OrderByDirection = Ascending
}

input AttributeProtectionConfigurationOperand {
  field: AttributeProtectionConfigurationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeProtectionConfigurationExpression
}

input AttributeProtectionConfigurationOrderBy {
  field: AttributeProtectionConfigurationField
  direction: OrderByDirection = Ascending
}

type AttributeSection implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  DateCreated: DateTime!
  DateModified: DateTime!
  ComponentId: Int!
  SectionAttributeSectionOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
}

"""A connection to a list of items."""
type AttributeSectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeSectionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeSectionEdge {
  """The item at the end of the edge"""
  node: AttributeSection

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeSectionExpression {
  operator: Operator!
  operands: [AttributeSectionOperand]!
}

enum AttributeSectionField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  ComponentId
}

input AttributeSectionOperand {
  field: AttributeSectionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeSectionExpression
}

input AttributeSectionOrderBy {
  field: AttributeSectionField
  direction: OrderByDirection = Ascending
}

type AttributesItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AttAttribute: Attribute!
  AttId: Int!
  ItemId: Int!
}

"""A connection to a list of items."""
type AttributesItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributesItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributesItemEdge {
  """The item at the end of the edge"""
  node: AttributesItem

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributesItemExpression {
  operator: Operator!
  operands: [AttributesItemOperand]!
}

enum AttributesItemField {
  id
  Id
  AttId
  ItemId
}

input AttributesItemOperand {
  field: AttributesItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributesItemExpression
}

input AttributesItemOrderBy {
  field: AttributesItemField
  direction: OrderByDirection = Ascending
}

type AttributeType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Value: String!
  IsCustomAttribute: Boolean!
}

"""A connection to a list of items."""
type AttributeTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeTypeEdge {
  """The item at the end of the edge"""
  node: AttributeType

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeTypeExpression {
  operator: Operator!
  operands: [AttributeTypeOperand]!
}

enum AttributeTypeField {
  id
  Id
  Name
  Value
  IsCustomAttribute
}

input AttributeTypeOperand {
  field: AttributeTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeTypeExpression
}

input AttributeTypeOrderBy {
  field: AttributeTypeField
  direction: OrderByDirection = Ascending
}

type AttributeValue implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemAsset: Asset
  ItemTicket: Ticket
  ItemId: Int
  ItemComponentId: Int
  AttAttribute: Attribute
  Attid: Int
  ValueAttributeChoice: AttributeChoice
  Value: Int
  ValueText: String
  ValueInt: Int
  ValueDecimal: Decimal
  ValueDateTime: DateTime
}

"""A connection to a list of items."""
type AttributeValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeValueEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AttributeValueEdge {
  """The item at the end of the edge"""
  node: AttributeValue

  """A cursor for use in pagination"""
  cursor: String!
}

input AttributeValueExpression {
  operator: Operator!
  operands: [AttributeValueOperand]!
}

enum AttributeValueField {
  id
  Id
  ItemId
  ItemComponentId
  Attid
  Value
  ValueText
  ValueInt
  ValueDecimal
  ValueDateTime
}

input AttributeValueOperand {
  field: AttributeValueField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AttributeValueExpression
}

input AttributeValueOrderBy {
  field: AttributeValueField
  direction: OrderByDirection = Ascending
}

type AuthenticationType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  AuthTypeAuthenticationTypeOnAuthProviders(after: String, first: Int, before: String, last: Int, sort: [AuthProviderOrderBy], filter: AuthProviderExpression): AuthProviderConnection!
}

"""A connection to a list of items."""
type AuthenticationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthenticationTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AuthenticationTypeEdge {
  """The item at the end of the edge"""
  node: AuthenticationType

  """A cursor for use in pagination"""
  cursor: String!
}

input AuthenticationTypeExpression {
  operator: Operator!
  operands: [AuthenticationTypeOperand]!
}

enum AuthenticationTypeField {
  id
  Id
  Name
}

input AuthenticationTypeOperand {
  field: AuthenticationTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AuthenticationTypeExpression
}

input AuthenticationTypeOrderBy {
  field: AuthenticationTypeField
  direction: OrderByDirection = Ascending
}

type AuthProvider implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AuthTypeAuthenticationType: AuthenticationType!
  AuthTypeId: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String
  IsActive: Boolean!
  Server: String
  Port: Int
  IsSsl: Boolean!
  IsFastBind: Boolean!
  ProxyUsername: String
  ProxyPassword: String
  UserFormat: String
  SearchFormat: String
  SearchBase: String
  TimeOutSeconds: Int
  ProtocolVersion: Int
  AuthType: Int
  CreatedByUid: ID!
  CreatedDate: DateTime!
  ModifiedByUid: ID!
  ModifiedDate: DateTime!
  Reference: String
  IsDefault: Boolean!
  ShouldVerifyCertificate: Boolean!
  CertificateFileName: String
  UseProxyUser: Boolean!
  UseDn: Boolean!
  AuthProviderOnSelfRegistrationMappings(after: String, first: Int, before: String, last: Int, sort: [SelfRegistrationMappingOrderBy], filter: SelfRegistrationMappingExpression): SelfRegistrationMappingConnection
  AuthProviderOnUserRegistrationProfiles(after: String, first: Int, before: String, last: Int, sort: [UserRegistrationProfileOrderBy], filter: UserRegistrationProfileExpression): UserRegistrationProfileConnection
  AuthProviderOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection
}

"""A connection to a list of items."""
type AuthProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthProviderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AuthProviderEdge {
  """The item at the end of the edge"""
  node: AuthProvider

  """A cursor for use in pagination"""
  cursor: String!
}

input AuthProviderExpression {
  operator: Operator!
  operands: [AuthProviderOperand]!
}

enum AuthProviderField {
  id
  Id
  AuthTypeId
  Beid
  Name
  IsActive
  Server
  Port
  IsSsl
  IsFastBind
  ProxyUsername
  ProxyPassword
  UserFormat
  SearchFormat
  SearchBase
  TimeOutSeconds
  ProtocolVersion
  AuthType
  CreatedByUid
  CreatedDate
  ModifiedByUid
  ModifiedDate
  Reference
  IsDefault
  ShouldVerifyCertificate
  CertificateFileName
  UseProxyUser
  UseDn
}

input AuthProviderOperand {
  field: AuthProviderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AuthProviderExpression
}

input AuthProviderOrderBy {
  field: AuthProviderField
  direction: OrderByDirection = Ascending
}

type AutomationRule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  Component: Component!
  ComponentId: Int!
  Name: String!
  Description: String
  Order: Float!
  IsActive: Boolean!
  ShouldStopOnMatch: Boolean!
  ConditionXml: Xml
  NewRespUidUser: User
  NewRespUid: ID
  NewRespGroupGroup: Group
  NewRespGroupId: Int
  NewImpactPriorityFactor: PriorityFactor
  NewImpactId: Int
  NewUrgencyPriorityFactor: PriorityFactor
  NewUrgencyId: Int
  NewPriorityPriorityFactor: PriorityFactor
  NewPriorityId: Int
  NewWorkflowWorkflowsNew: WorkflowsNew
  NewWorkflowId: Int
  NewSlaServiceLevelAgreement: ServiceLevelAgreement
  NewSlaid: Int
  NotifyPersonJson: String
  NotifyGroupJson: String
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  NewRequestWorkflowId: Int
  NewTaskTemplateTicketTaskTemplate: TicketTaskTemplate
  NewTaskTemplateId: Int
}

"""A connection to a list of items."""
type AutomationRuleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AutomationRuleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type AutomationRuleEdge {
  """The item at the end of the edge"""
  node: AutomationRule

  """A cursor for use in pagination"""
  cursor: String!
}

input AutomationRuleExpression {
  operator: Operator!
  operands: [AutomationRuleOperand]!
}

enum AutomationRuleField {
  id
  Id
  BeidInt
  AppId
  ComponentId
  Name
  Description
  Order
  IsActive
  ShouldStopOnMatch
  ConditionXml
  NewRespUid
  NewRespGroupId
  NewImpactId
  NewUrgencyId
  NewPriorityId
  NewWorkflowId
  NewSlaid
  NotifyPersonJson
  NotifyGroupJson
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  NewRequestWorkflowId
  NewTaskTemplateId
}

input AutomationRuleOperand {
  field: AutomationRuleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: AutomationRuleExpression
}

input AutomationRuleOrderBy {
  field: AutomationRuleField
  direction: OrderByDirection = Ascending
}

type BeAdmin implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  UidUser: User!
  Uid: ID!
  DateCreated: DateTime
  CanDeactivateUsers: Boolean!
  CanBackUp: Boolean!
  CanAddAdmins: Boolean!
  CanDelAdmins: Boolean!
  CanEditAdmins: Boolean!
  CanDeleteTeams: Boolean!
  CanImportSettings: Boolean!
  CanModifyAuthSettings: Boolean!
  CanDeleteTickets: Boolean!
  CanCreateRawModules: Boolean!
  CanModifyAttributePermissions: Boolean!
}

"""A connection to a list of items."""
type BeAdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeAdminEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BeAdminEdge {
  """The item at the end of the edge"""
  node: BeAdmin

  """A cursor for use in pagination"""
  cursor: String!
}

input BeAdminExpression {
  operator: Operator!
  operands: [BeAdminOperand]!
}

enum BeAdminField {
  id
  Id
  Beid
  Uid
  DateCreated
  CanDeactivateUsers
  CanBackUp
  CanAddAdmins
  CanDelAdmins
  CanEditAdmins
  CanDeleteTeams
  CanImportSettings
  CanModifyAuthSettings
  CanDeleteTickets
  CanCreateRawModules
  CanModifyAttributePermissions
}

input BeAdminOperand {
  field: BeAdminField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BeAdminExpression
}

input BeAdminOrderBy {
  field: BeAdminField
  direction: OrderByDirection = Ascending
}

type BeCustomStyle implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  CssPropertyValue: String!
  StyleName: String!
}

"""A connection to a list of items."""
type BeCustomStyleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeCustomStyleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BeCustomStyleEdge {
  """The item at the end of the edge"""
  node: BeCustomStyle

  """A cursor for use in pagination"""
  cursor: String!
}

input BeCustomStyleExpression {
  operator: Operator!
  operands: [BeCustomStyleOperand]!
}

enum BeCustomStyleField {
  id
  Id
  Beid
  CssPropertyValue
  StyleName
}

input BeCustomStyleOperand {
  field: BeCustomStyleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BeCustomStyleExpression
}

input BeCustomStyleOrderBy {
  field: BeCustomStyleField
  direction: OrderByDirection = Ascending
}

type BeDaysOff implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  Beid: ID!
  Date: DateTime!
  YearMonth: Int!
  YearMonthWeek: Int!
}

"""A connection to a list of items."""
type BeDaysOffConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BeDaysOffEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BeDaysOffEdge {
  """The item at the end of the edge"""
  node: BeDaysOff

  """A cursor for use in pagination"""
  cursor: String!
}

input BeDaysOffExpression {
  operator: Operator!
  operands: [BeDaysOffOperand]!
}

enum BeDaysOffField {
  id
  Id
  Name
  Beid
  Date
  YearMonth
  YearMonthWeek
}

input BeDaysOffOperand {
  field: BeDaysOffField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BeDaysOffExpression
}

input BeDaysOffOrderBy {
  field: BeDaysOffField
  direction: OrderByDirection = Ascending
}

type Benefit implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String
  DateCreated: DateTime!
  DateModified: DateTime!
  CreatedByUidUser: User
  CreatedByUid: ID
  ModifiedByUidUser: User
  ModifiedByUid: ID
  BenBenefitOnProjectBenefits(after: String, first: Int, before: String, last: Int, sort: [ProjectBenefitOrderBy], filter: ProjectBenefitExpression): ProjectBenefitConnection!
}

"""A connection to a list of items."""
type BenefitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BenefitEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BenefitEdge {
  """The item at the end of the edge"""
  node: Benefit

  """A cursor for use in pagination"""
  cursor: String!
}

input BenefitExpression {
  operator: Operator!
  operands: [BenefitOperand]!
}

enum BenefitField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  CreatedByUid
  ModifiedByUid
}

input BenefitOperand {
  field: BenefitField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BenefitExpression
}

input BenefitOrderBy {
  field: BenefitField
  direction: OrderByDirection = Ascending
}

type BillableEntity implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  IdInt: Int!
  Name: String!
  Addr1: String
  Addr2: String
  City: String
  State: String
  Zip: String
  DateCreated: DateTime!
  LogoPath: String!
  Url: String
  IsActive: Boolean!
  RisksScoreWeight: Float!
  GoalsScoreWeight: Float!
  EnableEmailTokens: Boolean!
  EmailTokenReplyToAddress: String
  EnableWebServices: Boolean!
  WebServicesKey: ID
  TimeZone: TimeZone!
  TimeZoneId: Int!
  IsSsoEnabled: Boolean!
  SsoSettings: Xml
  Domain: String
  CustomPersonLookupUrl: String
  EnableCustomPersonLookup: Boolean
  ClientLoginPrompt: String!
  IsCustomStylesheetEnabled: Boolean!
  CustomStylesModifiedDateUtc: DateTime
  CustomStylesModifiedUidUser: User
  CustomStylesModifiedUid: ID
  ProjReqConvertActive: Boolean!
  PreferScheduleByPercent: Boolean!
  GoogleAnalyticsTrackingId: String
  IsGoogleDriveEnabled: Boolean!
  ActivationDate: DateTime
  DeactivationDate: DateTime
  IncludeInUsageStats: Boolean!
  IsOneDriveEnabled: Boolean!
  IsDropboxEnabled: Boolean!
  EnableSiteSearch: Boolean!
  ServicesIsPublic: Boolean!
  KnowledgeBaseIsPublic: Boolean!
  ForumsIsPublic: Boolean!
  FaviconPath: String
  ProjectsIsPublic: Boolean!
  ServicesPublicSetting: Boolean
  KnowledgeBasePublicSetting: Boolean
  ForumsPublicSetting: Boolean
  ProjectsPublicSetting: Boolean
  IsBoxEnabled: Boolean!
  ModifyCustomFieldsDuringTaskUpdate: Boolean!
  IsOneDriveBusinessEnabled: Boolean!
  EnforceAuthenticatedFeedback: Boolean!
  ClientFooterHtml: String
  BoxClientId: String
  DropboxClientId: String
  GoogleDriveApiKey: String
  GoogleDriveClientId: String
  OneDriveClientId: String
  OneDriveBusinessClientId: String
  NextLoginPrompt: String
  ClientHeaderHtml: String
  IsSmtpConfigured: Boolean!
  IsSsoOnly: Boolean!
  EntityName: String!
  RecaptchaPublicKey: String
  RecaptchaPrivateKey: String
  BeBillableEntityOnAppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection!
  BeBillableEntityOnApplications(after: String, first: Int, before: String, last: Int, sort: [ApplicationOrderBy], filter: ApplicationExpression): ApplicationConnection!
  BeBillableEntityOnAssetFormSettings(after: String, first: Int, before: String, last: Int, sort: [AssetFormSettingOrderBy], filter: AssetFormSettingExpression): AssetFormSettingConnection!
  BeBillableEntityOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  BeBillableEntityOnAssetStatuses(after: String, first: Int, before: String, last: Int, sort: [AssetStatusOrderBy], filter: AssetStatusExpression): AssetStatusConnection!
  BeBillableEntityOnAttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection!
  BeBillableEntityOnAttributeProtectionConfigurations(after: String, first: Int, before: String, last: Int, sort: [AttributeProtectionConfigurationOrderBy], filter: AttributeProtectionConfigurationExpression): AttributeProtectionConfigurationConnection!
  BeBillableEntityOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
  BeBillableEntityOnAuthProviders(after: String, first: Int, before: String, last: Int, sort: [AuthProviderOrderBy], filter: AuthProviderExpression): AuthProviderConnection!
  BeBillableEntityOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection!
  BeBillableEntityOnBeAdmins(after: String, first: Int, before: String, last: Int, sort: [BeAdminOrderBy], filter: BeAdminExpression): BeAdminConnection!
  BeBillableEntityOnBeCustomStyles(after: String, first: Int, before: String, last: Int, sort: [BeCustomStyleOrderBy], filter: BeCustomStyleExpression): BeCustomStyleConnection!
  BeBillableEntityOnBenefits(after: String, first: Int, before: String, last: Int, sort: [BenefitOrderBy], filter: BenefitExpression): BenefitConnection!
  BeBillableEntityOnClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ClientAcctCodeOrderBy], filter: ClientAcctCodeExpression): ClientAcctCodeConnection
  BeBillableEntityOnConfigurationItemExternalSrcs(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemExternalSrcOrderBy], filter: ConfigurationItemExternalSrcExpression): ConfigurationItemExternalSrcConnection!
  BeBillableEntityOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  BeBillableEntityOnConfigurationItemTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTypeOrderBy], filter: ConfigurationItemTypeExpression): ConfigurationItemTypeConnection!
  BeBillableEntityOnConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection!
  BeBillableEntityOnConfigurationRelationshipTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipTypeOrderBy], filter: ConfigurationRelationshipTypeExpression): ConfigurationRelationshipTypeConnection!
  BeBillableEntityOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
  BeBillableEntityOnDeletedConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [DeletedConfigurationItemOrderBy], filter: DeletedConfigurationItemExpression): DeletedConfigurationItemConnection!
  BeBillableEntityOnDesktops(after: String, first: Int, before: String, last: Int, sort: [DesktopOrderBy], filter: DesktopExpression): DesktopConnection!
  BeBillableEntityOnDownloads(after: String, first: Int, before: String, last: Int, sort: [DownloadOrderBy], filter: DownloadExpression): DownloadConnection!
  BeBillableEntityOnEmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
  BeBillableEntityOnExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ExpenseAcctCodeOrderBy], filter: ExpenseAcctCodeExpression): ExpenseAcctCodeConnection
  BeBillableEntityOnExpenses(after: String, first: Int, before: String, last: Int, sort: [ExpenseOrderBy], filter: ExpenseExpression): ExpenseConnection!
  BeBillableEntityOnFeedbacks(after: String, first: Int, before: String, last: Int, sort: [FeedbackOrderBy], filter: FeedbackExpression): FeedbackConnection!
  BeBillableEntityOnForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection!
  ForumBeBillableEntityOnForForums(after: String, first: Int, before: String, last: Int, sort: [ForForumOrderBy], filter: ForForumExpression): ForForumConnection
  BeBillableEntityOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  BeBillableEntityOnFunctionalRoles(after: String, first: Int, before: String, last: Int, sort: [FunctionalRoleOrderBy], filter: FunctionalRoleExpression): FunctionalRoleConnection!
  BeBillableEntityOnGoals(after: String, first: Int, before: String, last: Int, sort: [GoalOrderBy], filter: GoalExpression): GoalConnection
  BeBillableEntityOnGroups(after: String, first: Int, before: String, last: Int, sort: [GroupOrderBy], filter: GroupExpression): GroupConnection!
  BeBillableEntityOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
  BeBillableEntityOnIntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection!
  BeBillableEntityOnItemTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateCategoryOrderBy], filter: ItemTemplateCategoryExpression): ItemTemplateCategoryConnection!
  BeBillableEntityOnItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection!
  BeBillableEntityOnItemTimeAccounts(after: String, first: Int, before: String, last: Int, sort: [ItemTimeAccountOrderBy], filter: ItemTimeAccountExpression): ItemTimeAccountConnection!
  BeBillableEntityOnItemViewTrackingCodes(after: String, first: Int, before: String, last: Int, sort: [ItemViewTrackingCodeOrderBy], filter: ItemViewTrackingCodeExpression): ItemViewTrackingCodeConnection!
  BeBillableEntityOnLocations(after: String, first: Int, before: String, last: Int, sort: [LocationOrderBy], filter: LocationExpression): LocationConnection!
  BeBillableEntityOnMailServers(after: String, first: Int, before: String, last: Int, sort: [MailServerOrderBy], filter: MailServerExpression): MailServerConnection!
  BeBillableEntityOnMessages(after: String, first: Int, before: String, last: Int, sort: [MessageOrderBy], filter: MessageExpression): MessageConnection!
  BeBillableEntityOnMobileNotificationPlayers(after: String, first: Int, before: String, last: Int, sort: [MobileNotificationPlayerOrderBy], filter: MobileNotificationPlayerExpression): MobileNotificationPlayerConnection!
  BeBillableEntityOnNotificationHistories(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryOrderBy], filter: NotificationHistoryExpression): NotificationHistoryConnection!
  BeBillableEntityOnNotificationHistoryArchives(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryArchiveOrderBy], filter: NotificationHistoryArchiveExpression): NotificationHistoryArchiveConnection!
  BeBillableEntityOnNotificationTemplates(after: String, first: Int, before: String, last: Int, sort: [NotificationTemplateOrderBy], filter: NotificationTemplateExpression): NotificationTemplateConnection!
  BeBillableEntityOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection!
  BeBillableEntityOnPaymentTypes(after: String, first: Int, before: String, last: Int, sort: [PaymentTypeOrderBy], filter: PaymentTypeExpression): PaymentTypeConnection!
  BeBillableEntityOnPinSettings(after: String, first: Int, before: String, last: Int, sort: [PinSettingOrderBy], filter: PinSettingExpression): PinSettingConnection!
  BeBillableEntityOnPlanDrafts(after: String, first: Int, before: String, last: Int, sort: [PlanDraftOrderBy], filter: PlanDraftExpression): PlanDraftConnection!
  BeBillableEntityOnPlanLimits(after: String, first: Int, before: String, last: Int, sort: [PlanLimitOrderBy], filter: PlanLimitExpression): PlanLimitConnection!
  BeBillableEntityOnPortfolios(after: String, first: Int, before: String, last: Int, sort: [PortfolioOrderBy], filter: PortfolioExpression): PortfolioConnection!
  BeBillableEntityOnPriorityFactors(after: String, first: Int, before: String, last: Int, sort: [PriorityFactorOrderBy], filter: PriorityFactorExpression): PriorityFactorConnection!
  BeBillableEntityOnPriorityMatrices(after: String, first: Int, before: String, last: Int, sort: [PriorityMatrixOrderBy], filter: PriorityMatrixExpression): PriorityMatrixConnection!
  BeBillableEntityOnProcesses(after: String, first: Int, before: String, last: Int, sort: [ProcessOrderBy], filter: ProcessExpression): ProcessConnection
  BeBillableEntityOnProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection!
  BeBillableEntityOnProductTypes(after: String, first: Int, before: String, last: Int, sort: [ProductTypeOrderBy], filter: ProductTypeExpression): ProductTypeConnection!
  BeBillableEntityOnProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection!
  BeBillableEntityOnPublishedItems(after: String, first: Int, before: String, last: Int, sort: [PublishedItemOrderBy], filter: PublishedItemExpression): PublishedItemConnection!
  BeBillableEntityOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
  BeBillableEntityOnReportFolders(after: String, first: Int, before: String, last: Int, sort: [ReportFolderOrderBy], filter: ReportFolderExpression): ReportFolderConnection!
  BeBillableEntityOnResourcePools(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolOrderBy], filter: ResourcePoolExpression): ResourcePoolConnection!
  BeBillableEntityOnResponseStrategies(after: String, first: Int, before: String, last: Int, sort: [ResponseStrategyOrderBy], filter: ResponseStrategyExpression): ResponseStrategyConnection!
  BeBillableEntityOnRisks(after: String, first: Int, before: String, last: Int, sort: [RiskOrderBy], filter: RiskExpression): RiskConnection!
  BeBillableEntityOnRoles(after: String, first: Int, before: String, last: Int, sort: [RoleOrderBy], filter: RoleExpression): RoleConnection!
  BeBillableEntityOnScheduledEvents(after: String, first: Int, before: String, last: Int, sort: [ScheduledEventOrderBy], filter: ScheduledEventExpression): ScheduledEventConnection!
  BeBillableEntityOnScoreCardCriteria(after: String, first: Int, before: String, last: Int, sort: [ScoreCardCriterionOrderBy], filter: ScoreCardCriterionExpression): ScoreCardCriterionConnection!
  BeBillableEntityOnScoreCards(after: String, first: Int, before: String, last: Int, sort: [ScoreCardOrderBy], filter: ScoreCardExpression): ScoreCardConnection!
  BeBillableEntityOnSearchData(after: String, first: Int, before: String, last: Int, sort: [SearchDatumOrderBy], filter: SearchDatumExpression): SearchDatumConnection!
  BeBillableEntityOnSearchHistories(after: String, first: Int, before: String, last: Int, sort: [SearchHistoryOrderBy], filter: SearchHistoryExpression): SearchHistoryConnection!
  BeBillableEntityOnSecretKeys(after: String, first: Int, before: String, last: Int, sort: [SecretKeyOrderBy], filter: SecretKeyExpression): SecretKeyConnection!
  BeBillableEntityOnSelfRegistrationMappings(after: String, first: Int, before: String, last: Int, sort: [SelfRegistrationMappingOrderBy], filter: SelfRegistrationMappingExpression): SelfRegistrationMappingConnection!
  BeBillableEntityOnServiceCategories(after: String, first: Int, before: String, last: Int, sort: [ServiceCategoryOrderBy], filter: ServiceCategoryExpression): ServiceCategoryConnection!
  BeBillableEntityOnServiceFormSettings(after: String, first: Int, before: String, last: Int, sort: [ServiceFormSettingOrderBy], filter: ServiceFormSettingExpression): ServiceFormSettingConnection!
  BeBillableEntityOnServiceLevelAgreements(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementOrderBy], filter: ServiceLevelAgreementExpression): ServiceLevelAgreementConnection!
  BeBillableEntityOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection!
  BeBillableEntityOnShortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection!
  BeBillableEntityOnSolutionCategories(after: String, first: Int, before: String, last: Int, sort: [SolutionCategoryOrderBy], filter: SolutionCategoryExpression): SolutionCategoryConnection!
  BeBillableEntityOnSolutionRevisions(after: String, first: Int, before: String, last: Int, sort: [SolutionRevisionOrderBy], filter: SolutionRevisionExpression): SolutionRevisionConnection!
  BeBillableEntityOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
  BeBillableEntityOnSourceControlEvents(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventOrderBy], filter: SourceControlEventExpression): SourceControlEventConnection!
  BeBillableEntityOnSourceControlUsernames(after: String, first: Int, before: String, last: Int, sort: [SourceControlUsernameOrderBy], filter: SourceControlUsernameExpression): SourceControlUsernameConnection!
  BeBillableEntityOnSourceControlWorkItems(after: String, first: Int, before: String, last: Int, sort: [SourceControlWorkItemOrderBy], filter: SourceControlWorkItemExpression): SourceControlWorkItemConnection!
  BeBillableEntityOnSources(after: String, first: Int, before: String, last: Int, sort: [SourceOrderBy], filter: SourceExpression): SourceConnection!
  BeBillableEntityOnSsrsCategories(after: String, first: Int, before: String, last: Int, sort: [SsrsCategoryOrderBy], filter: SsrsCategoryExpression): SsrsCategoryConnection!
  BeBillableEntityOnSsrsReportLinks(after: String, first: Int, before: String, last: Int, sort: [SsrsReportLinkOrderBy], filter: SsrsReportLinkExpression): SsrsReportLinkConnection!
  BeBillableEntityOnStatuses(after: String, first: Int, before: String, last: Int, sort: [StatusOrderBy], filter: StatusExpression): StatusConnection!
  BeBillableEntityOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection!
  BeBillableEntityOnSurveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection!
  BeBillableEntityOnSystems(after: String, first: Int, before: String, last: Int, sort: [SystemOrderBy], filter: SystemExpression): SystemConnection!
  BeBillableEntityOnTags(after: String, first: Int, before: String, last: Int, sort: [TagOrderBy], filter: TagExpression): TagConnection!
  BeBillableEntityOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection!
  BeBillableEntityOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection!
  BeBillableEntityOnTeamUpdateSchedules(after: String, first: Int, before: String, last: Int, sort: [TeamUpdateScheduleOrderBy], filter: TeamUpdateScheduleExpression): TeamUpdateScheduleConnection!
  BeBillableEntityOnTicketArchiveProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketArchiveProfileOrderBy], filter: TicketArchiveProfileExpression): TicketArchiveProfileConnection!
  BeBillableEntityOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  BeBillableEntityOnTicketMetrics(after: String, first: Int, before: String, last: Int, sort: [TicketMetricOrderBy], filter: TicketMetricExpression): TicketMetricConnection!
  BeBillableEntityOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  BeBillableEntityOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection!
  BeBillableEntityOnTimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TimeAcctCodeOrderBy], filter: TimeAcctCodeExpression): TimeAcctCodeConnection!
  BeBillableEntityOnTimeLockPeriods(after: String, first: Int, before: String, last: Int, sort: [TimeLockPeriodOrderBy], filter: TimeLockPeriodExpression): TimeLockPeriodConnection!
  BeBillableEntityOnTimeSheetAlertsBes(after: String, first: Int, before: String, last: Int, sort: [TimeSheetAlertsBeOrderBy], filter: TimeSheetAlertsBeExpression): TimeSheetAlertsBeConnection!
  BeBillableEntityOnTypeCategories(after: String, first: Int, before: String, last: Int, sort: [TypeCategoryOrderBy], filter: TypeCategoryExpression): TypeCategoryConnection!
  BeBillableEntityOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection!
  BeBillableEntityOnUnprocessedNotifications(after: String, first: Int, before: String, last: Int, sort: [UnprocessedNotificationOrderBy], filter: UnprocessedNotificationExpression): UnprocessedNotificationConnection!
  BeBillableEntityOnUserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection!
  BeBillableEntityOnUserDownloads(after: String, first: Int, before: String, last: Int, sort: [UserDownloadOrderBy], filter: UserDownloadExpression): UserDownloadConnection!
  BeBillableEntityOnUserIntegrationSettings(after: String, first: Int, before: String, last: Int, sort: [UserIntegrationSettingOrderBy], filter: UserIntegrationSettingExpression): UserIntegrationSettingConnection!
  BeBillableEntityOnUserPhoneNumbers(after: String, first: Int, before: String, last: Int, sort: [UserPhoneNumberOrderBy], filter: UserPhoneNumberExpression): UserPhoneNumberConnection!
  BeBillableEntityOnUserPinEntryFailures(after: String, first: Int, before: String, last: Int, sort: [UserPinEntryFailureOrderBy], filter: UserPinEntryFailureExpression): UserPinEntryFailureConnection!
  BeBillableEntityOnUserPins(after: String, first: Int, before: String, last: Int, sort: [UserPinOrderBy], filter: UserPinExpression): UserPinConnection!
  BeBillableEntityOnUserRegistrationProfiles(after: String, first: Int, before: String, last: Int, sort: [UserRegistrationProfileOrderBy], filter: UserRegistrationProfileExpression): UserRegistrationProfileConnection!
  BeBillableEntityOnUserReports(after: String, first: Int, before: String, last: Int, sort: [UserReportOrderBy], filter: UserReportExpression): UserReportConnection!
  BeBillableEntityOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
  BeBillableEntityOnVendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection!
  BillableEntityBillableEntityOnWebhookCalls(after: String, first: Int, before: String, last: Int, sort: [WebhookCallOrderBy], filter: WebhookCallExpression): WebhookCallConnection!
  BillableEntityBillableEntityOnWebhookComponentEvents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentEventOrderBy], filter: WebhookComponentEventExpression): WebhookComponentEventConnection!
  BillableEntityBillableEntityOnWebhookComponents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentOrderBy], filter: WebhookComponentExpression): WebhookComponentConnection!
  BillableEntityBillableEntityOnWebhooks(after: String, first: Int, before: String, last: Int, sort: [WebhookOrderBy], filter: WebhookExpression): WebhookConnection!
  BeBillableEntityOnWebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection!
  BeBillableEntityOnWebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection!
  BeBillableEntityOnWebServices(after: String, first: Int, before: String, last: Int, sort: [WebServiceOrderBy], filter: WebServiceExpression): WebServiceConnection!
}

"""A connection to a list of items."""
type BillableEntityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BillableEntityEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BillableEntityEdge {
  """The item at the end of the edge"""
  node: BillableEntity

  """A cursor for use in pagination"""
  cursor: String!
}

input BillableEntityExpression {
  operator: Operator!
  operands: [BillableEntityOperand]!
}

enum BillableEntityField {
  id
  Id
  IdInt
  Name
  Addr1
  Addr2
  City
  State
  Zip
  DateCreated
  LogoPath
  Url
  IsActive
  RisksScoreWeight
  GoalsScoreWeight
  EnableEmailTokens
  EmailTokenReplyToAddress
  EnableWebServices
  WebServicesKey
  TimeZoneId
  IsSsoEnabled
  SsoSettings
  Domain
  CustomPersonLookupUrl
  EnableCustomPersonLookup
  ClientLoginPrompt
  IsCustomStylesheetEnabled
  CustomStylesModifiedDateUtc
  CustomStylesModifiedUid
  ProjReqConvertActive
  PreferScheduleByPercent
  GoogleAnalyticsTrackingId
  IsGoogleDriveEnabled
  ActivationDate
  DeactivationDate
  IncludeInUsageStats
  IsOneDriveEnabled
  IsDropboxEnabled
  EnableSiteSearch
  ServicesIsPublic
  KnowledgeBaseIsPublic
  ForumsIsPublic
  FaviconPath
  ProjectsIsPublic
  ServicesPublicSetting
  KnowledgeBasePublicSetting
  ForumsPublicSetting
  ProjectsPublicSetting
  IsBoxEnabled
  ModifyCustomFieldsDuringTaskUpdate
  IsOneDriveBusinessEnabled
  EnforceAuthenticatedFeedback
  ClientFooterHtml
  BoxClientId
  DropboxClientId
  GoogleDriveApiKey
  GoogleDriveClientId
  OneDriveClientId
  OneDriveBusinessClientId
  NextLoginPrompt
  ClientHeaderHtml
  IsSmtpConfigured
  IsSsoOnly
  EntityName
  RecaptchaPublicKey
  RecaptchaPrivateKey
}

input BillableEntityOperand {
  field: BillableEntityField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BillableEntityExpression
}

input BillableEntityOrderBy {
  field: BillableEntityField
  direction: OrderByDirection = Ascending
}

type BostonCollegeProjectsandRequest implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  AccountId: Int
  StartDate: DateTime
  EndDate: DateTime
  ModifiedDate: DateTime
  SubmittedDate: DateTime
  ProjectName: String!
  Description: String
  Requirements: String
  Budget: Decimal
  CreatedDate: DateTime!
  EstimatedHours: Float
  ItemType: String
  ItemTypeId: String
  StatusId: Int
  StatusName: String
  ClassificationId: Int!
  Classification: String!
  AccountName: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  Score: Float
  ProjectTypeId: Int
  ProjectType: String
  PriorityId: Int
  PriorityName: String
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  SponsorUid: ID
  SponsorName: String
  SponsorEmail: String
  ProjPct: Float
  ActualHours: Decimal!
  BaseEndDate: DateTime
  Active: Boolean
  BaseHours: Float
  BaseStartDate: DateTime
  ManagerUid: ID
  ManagerName: String
  StatusComments: String
  StatusModifiedDate: DateTime
  BudgetUsed: Decimal
  BudgetRemaining: Decimal
  InitialEndDate: DateTime
  InitialHours: Float
  InitialStartDate: DateTime
  InitialBudget: Decimal
  Plans: String
  ActualExpenses: Decimal
  ManagerPct: Int
  ResourceMgmt: String
  CompositeScorePct: Float
  StatusDescription: String
  ProjectStatusId: Int
  HealthId: Int
  RequestorUid: ID
  RequestorName: String
  EvaluatorUid: ID
  EvaluatorName: String
  WorkflowStepAgeDays: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeWorkDays: Int
  WorkflowTemplateStepId: Int
  Roi: Float
  Npv: Decimal
  Irr: Float
  ProjectRequestStatusId: Int
  ProjectRequestStatusName: String
  CurrentEvaluatorUid: ID
  WorkflowStepId: Int
  WorkflowStepRespNames: String
}

"""A connection to a list of items."""
type BostonCollegeProjectsandRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BostonCollegeProjectsandRequestEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BostonCollegeProjectsandRequestEdge {
  """The item at the end of the edge"""
  node: BostonCollegeProjectsandRequest

  """A cursor for use in pagination"""
  cursor: String!
}

input BostonCollegeProjectsandRequestExpression {
  operator: Operator!
  operands: [BostonCollegeProjectsandRequestOperand]!
}

enum BostonCollegeProjectsandRequestField {
  id
  Id
  Beid
  AccountId
  StartDate
  EndDate
  ModifiedDate
  SubmittedDate
  ProjectName
  Description
  Requirements
  Budget
  CreatedDate
  EstimatedHours
  ItemType
  ItemTypeId
  StatusId
  StatusName
  ClassificationId
  Classification
  AccountName
  GoalsScore
  RisksScore
  ScorecardScore
  Score
  ProjectTypeId
  ProjectType
  PriorityId
  PriorityName
  ExpensesBudget
  TimeBudget
  SponsorUid
  SponsorName
  SponsorEmail
  ProjPct
  ActualHours
  BaseEndDate
  Active
  BaseHours
  BaseStartDate
  ManagerUid
  ManagerName
  StatusComments
  StatusModifiedDate
  BudgetUsed
  BudgetRemaining
  InitialEndDate
  InitialHours
  InitialStartDate
  InitialBudget
  Plans
  ActualExpenses
  ManagerPct
  ResourceMgmt
  CompositeScorePct
  StatusDescription
  ProjectStatusId
  HealthId
  RequestorUid
  RequestorName
  EvaluatorUid
  EvaluatorName
  WorkflowStepAgeDays
  WorkflowStepStartedDate
  WorkflowStepAgeWorkDays
  WorkflowTemplateStepId
  Roi
  Npv
  Irr
  ProjectRequestStatusId
  ProjectRequestStatusName
  CurrentEvaluatorUid
  WorkflowStepId
  WorkflowStepRespNames
}

input BostonCollegeProjectsandRequestOperand {
  field: BostonCollegeProjectsandRequestField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BostonCollegeProjectsandRequestExpression
}

input BostonCollegeProjectsandRequestOrderBy {
  field: BostonCollegeProjectsandRequestField
  direction: OrderByDirection = Ascending
}

type BostonCollegeTimeReportsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserFullName: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserShouldReportTime: Boolean!
  ReportsToUid: ID
  ReportsToFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportId: Int
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  StatusId: Int!
  StatusName: String!
  CompletedDate: DateTime
  SubmittedDate: DateTime
  Hours: Decimal
}

"""A connection to a list of items."""
type BostonCollegeTimeReportsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BostonCollegeTimeReportsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type BostonCollegeTimeReportsReportViewEdge {
  """The item at the end of the edge"""
  node: BostonCollegeTimeReportsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input BostonCollegeTimeReportsReportViewExpression {
  operator: Operator!
  operands: [BostonCollegeTimeReportsReportViewOperand]!
}

enum BostonCollegeTimeReportsReportViewField {
  id
  Beid
  UserUid
  UserFullName
  IsActive
  Company
  IsEmployee
  UserShouldReportTime
  ReportsToUid
  ReportsToFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportId
  TimeReportStartDate
  TimeReportEndDate
  StatusId
  StatusName
  CompletedDate
  SubmittedDate
  Hours
}

input BostonCollegeTimeReportsReportViewOperand {
  field: BostonCollegeTimeReportsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: BostonCollegeTimeReportsReportViewExpression
}

input BostonCollegeTimeReportsReportViewOrderBy {
  field: BostonCollegeTimeReportsReportViewField
  direction: OrderByDirection = Ascending
}

scalar Buffer

type CampaignAction implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  CampaignId: String!
  ActionId: String!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type CampaignActionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CampaignActionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CampaignActionEdge {
  """The item at the end of the edge"""
  node: CampaignAction

  """A cursor for use in pagination"""
  cursor: String!
}

input CampaignActionExpression {
  operator: Operator!
  operands: [CampaignActionOperand]!
}

enum CampaignActionField {
  id
  Id
  Uid
  CampaignId
  ActionId
  CreatedDateUtc
}

input CampaignActionOperand {
  field: CampaignActionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CampaignActionExpression
}

input CampaignActionOrderBy {
  field: CampaignActionField
  direction: OrderByDirection = Ascending
}

type Category implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Name: String!
  CreatedDate: DateTime!
  ModifiedDate: DateTime!
  Order: Float!
  IsActive: Boolean!
  Description: String
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge"""
  node: Category

  """A cursor for use in pagination"""
  cursor: String!
}

input CategoryExpression {
  operator: Operator!
  operands: [CategoryOperand]!
}

enum CategoryField {
  id
  Id
  Beid
  Name
  CreatedDate
  ModifiedDate
  Order
  IsActive
  Description
}

input CategoryOperand {
  field: CategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CategoryExpression
}

input CategoryOrderBy {
  field: CategoryField
  direction: OrderByDirection = Ascending
}

type CincinnatiActualHoursReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserFullName: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserShouldReportTime: Boolean!
  ReportsToUid: ID
  ReportsToUserFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  ProjectId: Int!
  ProjectName: String
  TicketId: Int!
  TicketTitle: String
  ItemId: Int!
  ItemTitle: String
  ItemType: String
  TimeAccountId: Int
  TimeAccountName: String!
  Description: String
  StatusId: Int!
  StatusDate: DateTime
  StatusName: String!
  SubmittedDate: DateTime
  CreatedDate: DateTime!
  TimeDate: DateTime!
  IsBillable: Boolean!
  IsTimeOff: Boolean
  Hours: Decimal
  Year: Int
  Month: DateTime
  AccountId: Int
  AccountName: String
  PlanId: Int
  PlanName: String
  ServiceId: Int
  ServiceCategoryId: Int
  TypeId: Int
  TypeName: String
  BillRate: Decimal!
  ProjectIsComplete: Boolean
  TicketIsComplete: Boolean
  BillableTicket: String
  BillingCompleteTicket: String
  BillableProject: String
  BillingCompleteProject: String
}

"""A connection to a list of items."""
type CincinnatiActualHoursReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CincinnatiActualHoursReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CincinnatiActualHoursReportViewEdge {
  """The item at the end of the edge"""
  node: CincinnatiActualHoursReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input CincinnatiActualHoursReportViewExpression {
  operator: Operator!
  operands: [CincinnatiActualHoursReportViewOperand]!
}

enum CincinnatiActualHoursReportViewField {
  id
  Beid
  UserUid
  UserFullName
  IsActive
  Company
  IsEmployee
  UserShouldReportTime
  ReportsToUid
  ReportsToUserFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportStartDate
  TimeReportEndDate
  ProjectId
  ProjectName
  TicketId
  TicketTitle
  ItemId
  ItemTitle
  ItemType
  TimeAccountId
  TimeAccountName
  Description
  StatusId
  StatusDate
  StatusName
  SubmittedDate
  CreatedDate
  TimeDate
  IsBillable
  IsTimeOff
  Hours
  Year
  Month
  AccountId
  AccountName
  PlanId
  PlanName
  ServiceId
  ServiceCategoryId
  TypeId
  TypeName
  BillRate
  ProjectIsComplete
  TicketIsComplete
  BillableTicket
  BillingCompleteTicket
  BillableProject
  BillingCompleteProject
}

input CincinnatiActualHoursReportViewOperand {
  field: CincinnatiActualHoursReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CincinnatiActualHoursReportViewExpression
}

input CincinnatiActualHoursReportViewOrderBy {
  field: CincinnatiActualHoursReportViewField
  direction: OrderByDirection = Ascending
}

type ClientAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Desc: String
  BeBillableEntity: BillableEntity
  Beid: ID
  Uid: ID
  DateCreated: DateTime
  DateModified: DateTime
  AcctCode: String
  Addr1: String
  Addr2: String
  Addr3: String
  Addr4: String
  City: String
  PostalCode: String
  State: String
  Country: String
  MainPhone: String
  Fax: String
  Url: String
  IndIndustry: Industry
  IndId: Int
  Active: Boolean
  Notes: String
  ManagerUidUser: User!
  ManagerUid: ID!
  ReqDeptClientAcctCodeOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  OwningDeptClientAcctCodeOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  DeptClientAcctCodeOnAssetsDepartments(after: String, first: Int, before: String, last: Int, sort: [AssetsDepartmentOrderBy], filter: AssetsDepartmentExpression): AssetsDepartmentConnection!
  NewOwningDeptClientAcctCodeOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  OldOwningDeptClientAcctCodeOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  OwningDeptClientAcctCodeOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  AccountClientAcctCodeOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
  AccountClientAcctCodeOnServiceFormSettings(after: String, first: Int, before: String, last: Int, sort: [ServiceFormSettingOrderBy], filter: ServiceFormSettingExpression): ServiceFormSettingConnection!
  AccountClientAcctCodeOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  AccountClientAcctCodeOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  AccountClientAcctCodeOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  AccountClientAcctCodeOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  DefaultAccountClientAcctCodeOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
  CacClientAcctCodeOnUsersClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [UsersClientAcctCodeOrderBy], filter: UsersClientAcctCodeExpression): UsersClientAcctCodeConnection!
}

"""A connection to a list of items."""
type ClientAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ClientAcctCodeEdge {
  """The item at the end of the edge"""
  node: ClientAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input ClientAcctCodeExpression {
  operator: Operator!
  operands: [ClientAcctCodeOperand]!
}

enum ClientAcctCodeField {
  id
  Id
  Desc
  Beid
  Uid
  DateCreated
  DateModified
  AcctCode
  Addr1
  Addr2
  Addr3
  Addr4
  City
  PostalCode
  State
  Country
  MainPhone
  Fax
  Url
  IndId
  Active
  Notes
  ManagerUid
}

input ClientAcctCodeOperand {
  field: ClientAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ClientAcctCodeExpression
}

input ClientAcctCodeOrderBy {
  field: ClientAcctCodeField
  direction: OrderByDirection = Ascending
}

type ColoradoSystemTaskAssignmentReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TaskId: Int!
  TaskTitle: String
  TaskDesc: String
  TaskUid: ID
  ResourceUid: ID!
  ResourceFullName: String
  PercentAssigned: Float
  HoursAssigned: Float
  PersonActualHours: Decimal
  UserFullName: String
  TaskParId: Int
  ParentTitle: String
  TaskTid: Int!
  TeamsName: String!
  TaskPlanId: Int!
  PercentComplete: Decimal
  PlanName: String
  TaskOrder: Int
  TaskWbs: String
  TaskStartDate: DateTime
  TaskEndDate: DateTime
  TaskDateCreated: DateTime!
  TaskDateModified: DateTime
  TaskDateCompleted: DateTime
  TaskIsParent: Boolean
  TaskIsMilestone: Boolean!
  TaskIsStory: Boolean!
  TaskStoryPoints: Float!
  TaskValuePoints: Float!
  EstimatedHours: Decimal
  ActualHours: Decimal
  RemainingHours: Decimal
  EstimatedHoursBaseline: Decimal
  Duration: Int!
  TaskField1: String
  TaskField2: String
  TaskField3: String
  TaskField4: String
  TaskField5: String
  TaskField6: String
  TaskField7: String
  TaskField8: String
  TaskField9: String
  TaskField10: String
  PriorityId: Int
  PriorityName: String!
  TicketId: Int
  TicketAppId: Int
  Beid: ID!
  Active: Boolean!
  StatusId: Int
  TeamIsActive: Boolean!
  AccountId: Int
  SponsorName: String
  SponsorEmail: String
  ProjectId: Int!
  ProjectName: String!
  ProjectActive: Boolean!
  ProjectDateCreated: DateTime!
  ProjectStatusId: Int!
  ProjectStatusName: String!
  ProjectStatusDescription: String
  HealthId: Int!
  ProjectDateStatusModified: DateTime
  ProjectTypeId: Int
  ProjectType: String!
  ProjectAccountId: Int
  ProjectAccount: String
  ProjectSponsorName: String
  ProjectSponsorEmail: String
  ProjectPriorityId: Int
  ProjectPriorityName: String
  ProjectPriorityOrder: Float
}

"""A connection to a list of items."""
type ColoradoSystemTaskAssignmentReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ColoradoSystemTaskAssignmentReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ColoradoSystemTaskAssignmentReportViewEdge {
  """The item at the end of the edge"""
  node: ColoradoSystemTaskAssignmentReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ColoradoSystemTaskAssignmentReportViewExpression {
  operator: Operator!
  operands: [ColoradoSystemTaskAssignmentReportViewOperand]!
}

enum ColoradoSystemTaskAssignmentReportViewField {
  id
  TaskId
  TaskTitle
  TaskDesc
  TaskUid
  ResourceUid
  ResourceFullName
  PercentAssigned
  HoursAssigned
  PersonActualHours
  UserFullName
  TaskParId
  ParentTitle
  TaskTid
  TeamsName
  TaskPlanId
  PercentComplete
  PlanName
  TaskOrder
  TaskWbs
  TaskStartDate
  TaskEndDate
  TaskDateCreated
  TaskDateModified
  TaskDateCompleted
  TaskIsParent
  TaskIsMilestone
  TaskIsStory
  TaskStoryPoints
  TaskValuePoints
  EstimatedHours
  ActualHours
  RemainingHours
  EstimatedHoursBaseline
  Duration
  TaskField1
  TaskField2
  TaskField3
  TaskField4
  TaskField5
  TaskField6
  TaskField7
  TaskField8
  TaskField9
  TaskField10
  PriorityId
  PriorityName
  TicketId
  TicketAppId
  Beid
  Active
  StatusId
  TeamIsActive
  AccountId
  SponsorName
  SponsorEmail
  ProjectId
  ProjectName
  ProjectActive
  ProjectDateCreated
  ProjectStatusId
  ProjectStatusName
  ProjectStatusDescription
  HealthId
  ProjectDateStatusModified
  ProjectTypeId
  ProjectType
  ProjectAccountId
  ProjectAccount
  ProjectSponsorName
  ProjectSponsorEmail
  ProjectPriorityId
  ProjectPriorityName
  ProjectPriorityOrder
}

input ColoradoSystemTaskAssignmentReportViewOperand {
  field: ColoradoSystemTaskAssignmentReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ColoradoSystemTaskAssignmentReportViewExpression
}

input ColoradoSystemTaskAssignmentReportViewOrderBy {
  field: ColoradoSystemTaskAssignmentReportViewField
  direction: OrderByDirection = Ascending
}

type Component implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  AppName: String
  CustomAttributesCmpntId: Int
  ComponentOnAppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection!
  ComponentOnAttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection!
  ComponentOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
  ComponentOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection!
  ComponentOnComponentLogs(after: String, first: Int, before: String, last: Int, sort: [ComponentLogOrderBy], filter: ComponentLogExpression): ComponentLogConnection!
  ComponentOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  ComponentOnDeletedConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [DeletedConfigurationItemOrderBy], filter: DeletedConfigurationItemExpression): DeletedConfigurationItemConnection!
  ItemComponentComponentOnFeedbacks(after: String, first: Int, before: String, last: Int, sort: [FeedbackOrderBy], filter: FeedbackExpression): FeedbackConnection!
  ComponentOnFileReferences(after: String, first: Int, before: String, last: Int, sort: [FileReferenceOrderBy], filter: FileReferenceExpression): FileReferenceConnection!
  ComponentOnFlags(after: String, first: Int, before: String, last: Int, sort: [FlagOrderBy], filter: FlagExpression): FlagConnection!
  ComponentOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  SubComponentComponentOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  ComponentOnGroupItems(after: String, first: Int, before: String, last: Int, sort: [GroupItemOrderBy], filter: GroupItemExpression): GroupItemConnection!
  ComponentOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
  ComponentOnIntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection!
  ComponentOnItemContacts(after: String, first: Int, before: String, last: Int, sort: [ItemContactOrderBy], filter: ItemContactExpression): ItemContactConnection!
  SourceComponentComponentOnItemConversionHistories(after: String, first: Int, before: String, last: Int, sort: [ItemConversionHistoryOrderBy], filter: ItemConversionHistoryExpression): ItemConversionHistoryConnection!
  ComponentOnItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection!
  ComponentOnItemTimeAccounts(after: String, first: Int, before: String, last: Int, sort: [ItemTimeAccountOrderBy], filter: ItemTimeAccountExpression): ItemTimeAccountConnection!
  ComponentOnItemViewsRollings(after: String, first: Int, before: String, last: Int, sort: [ItemViewsRollingOrderBy], filter: ItemViewsRollingExpression): ItemViewsRollingConnection!
  ComponentOnItemViewTrackingCodes(after: String, first: Int, before: String, last: Int, sort: [ItemViewTrackingCodeOrderBy], filter: ItemViewTrackingCodeExpression): ItemViewTrackingCodeConnection!
  CmpntComponentOnPermissions(after: String, first: Int, before: String, last: Int, sort: [PermissionOrderBy], filter: PermissionExpression): PermissionConnection!
  ComponentOnPublishedItems(after: String, first: Int, before: String, last: Int, sort: [PublishedItemOrderBy], filter: PublishedItemExpression): PublishedItemConnection!
  ComponentOnReportSourcesAttributeExtensions(after: String, first: Int, before: String, last: Int, sort: [ReportSourcesAttributeExtensionOrderBy], filter: ReportSourcesAttributeExtensionExpression): ReportSourcesAttributeExtensionConnection!
  ComponentOnScheduledEvents(after: String, first: Int, before: String, last: Int, sort: [ScheduledEventOrderBy], filter: ScheduledEventExpression): ScheduledEventConnection!
  ComponentOnSearchData(after: String, first: Int, before: String, last: Int, sort: [SearchDatumOrderBy], filter: SearchDatumExpression): SearchDatumConnection!
  ComponentOnSearchHistories(after: String, first: Int, before: String, last: Int, sort: [SearchHistoryOrderBy], filter: SearchHistoryExpression): SearchHistoryConnection
  ParentCategoryComponentComponentOnShortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection!
  TargetComponentComponentOnShortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection!
  ComponentOnSourceControlWorkItems(after: String, first: Int, before: String, last: Int, sort: [SourceControlWorkItemOrderBy], filter: SourceControlWorkItemExpression): SourceControlWorkItemConnection!
  SubscriberComponentComponentOnSystemEventHandlers(after: String, first: Int, before: String, last: Int, sort: [SystemEventHandlerOrderBy], filter: SystemEventHandlerExpression): SystemEventHandlerConnection!
  TargetComponentComponentOnSystemEventHandlers(after: String, first: Int, before: String, last: Int, sort: [SystemEventHandlerOrderBy], filter: SystemEventHandlerExpression): SystemEventHandlerConnection!
  ComponentOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection!
  TcComponentOnTeamsComponents(after: String, first: Int, before: String, last: Int, sort: [TeamsComponentOrderBy], filter: TeamsComponentExpression): TeamsComponentConnection!
  CmpntComponentOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  ComponentOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  ComponentOnTicketTaskTypes(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTypeOrderBy], filter: TicketTaskTypeExpression): TicketTaskTypeConnection!
  ClassificationComponentOnTicketTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTemplateOrderBy], filter: TicketTemplateExpression): TicketTemplateConnection!
  ResourceComponentComponentOnTicketUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TicketUserAlertOrderBy], filter: TicketUserAlertExpression): TicketUserAlertConnection!
  CmpntComponentOnTypesTimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesTimeAcctCodeOrderBy], filter: TypesTimeAcctCodeExpression): TypesTimeAcctCodeConnection!
  ComponentOnUserReports(after: String, first: Int, before: String, last: Int, sort: [UserReportOrderBy], filter: UserReportExpression): UserReportConnection!
  ComponentOnWebhookComponents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentOrderBy], filter: WebhookComponentExpression): WebhookComponentConnection!
  ItemComponentComponentOnWebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection!
  TargetComponentComponentOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection!
}

"""A connection to a list of items."""
type ComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ComponentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ComponentEdge {
  """The item at the end of the edge"""
  node: Component

  """A cursor for use in pagination"""
  cursor: String!
}

input ComponentExpression {
  operator: Operator!
  operands: [ComponentOperand]!
}

enum ComponentField {
  id
  Id
  Name
  AppName
  CustomAttributesCmpntId
}

type ComponentLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CreatedDateUtc: DateTime!
  Message: String!
  TypeLogLevel: LogLevel!
  TypeId: Int!
  Component: Component!
  ComponentId: Int!
  ItemId: Int!
  Beid: ID!
}

"""A connection to a list of items."""
type ComponentLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ComponentLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ComponentLogEdge {
  """The item at the end of the edge"""
  node: ComponentLog

  """A cursor for use in pagination"""
  cursor: String!
}

input ComponentLogExpression {
  operator: Operator!
  operands: [ComponentLogOperand]!
}

enum ComponentLogField {
  id
  Id
  CreatedDateUtc
  Message
  TypeId
  ComponentId
  ItemId
  Beid
}

input ComponentLogOperand {
  field: ComponentLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ComponentLogExpression
}

input ComponentLogOrderBy {
  field: ComponentLogField
  direction: OrderByDirection = Ascending
}

type ComponentLogType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
}

"""A connection to a list of items."""
type ComponentLogTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ComponentLogTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ComponentLogTypeEdge {
  """The item at the end of the edge"""
  node: ComponentLogType

  """A cursor for use in pagination"""
  cursor: String!
}

input ComponentLogTypeExpression {
  operator: Operator!
  operands: [ComponentLogTypeOperand]!
}

enum ComponentLogTypeField {
  id
  Id
  Name
}

input ComponentLogTypeOperand {
  field: ComponentLogTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ComponentLogTypeExpression
}

input ComponentLogTypeOrderBy {
  field: ComponentLogTypeField
  direction: OrderByDirection = Ascending
}

input ComponentOperand {
  field: ComponentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ComponentExpression
}

input ComponentOrderBy {
  field: ComponentField
  direction: OrderByDirection = Ascending
}

type ConfigurationItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  TypeConfigurationItemType: ConfigurationItemType!
  TypeId: Int!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  MaintScheduleRecurringSchedule: RecurringSchedule!
  MaintScheduleId: Int!
  IsActive: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  ExternalId: String
  ExternalSrcConfigurationItemExternalSrc: ConfigurationItemExternalSrc!
  ExternalSrcId: Int!
  OwnerUidUser: User!
  OwnerUid: ID!
  OwningDeptClientAcctCode: ClientAcctCode!
  OwningDeptId: Int!
  OwningGroupGroup: Group!
  OwningGroupId: Int!
  Location: Location!
  LocationId: Int!
  LocationRoom: LocationRoom!
  LocationRoomId: Int!
  AppApplication: Application
  AppId: Int!
  Form: Form!
  FormId: Int!
  ConfigurationItemOnConfigurationItemTickets(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketOrderBy], filter: ConfigurationItemTicketExpression): ConfigurationItemTicketConnection!
  ConfigurationItemOnConfigurationItemTicketTasks(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketTaskOrderBy], filter: ConfigurationItemTicketTaskExpression): ConfigurationItemTicketTaskConnection!
  ChildConfigurationItemOnConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection!
  ParentConfigurationItemOnConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection!
  ConfigurationItemOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection
}

"""A connection to a list of items."""
type ConfigurationItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemEdge {
  """The item at the end of the edge"""
  node: ConfigurationItem

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemExpression {
  operator: Operator!
  operands: [ConfigurationItemOperand]!
}

type ConfigurationItemExternalSrc implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Name: String!
  TypeId: Int!
  IsDefault: Boolean!
  IsActive: Boolean!
  FormatString: String
  AppId: Int!
  ExternalSrcConfigurationItemExternalSrcOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
}

"""A connection to a list of items."""
type ConfigurationItemExternalSrcConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemExternalSrcEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemExternalSrcEdge {
  """The item at the end of the edge"""
  node: ConfigurationItemExternalSrc

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemExternalSrcExpression {
  operator: Operator!
  operands: [ConfigurationItemExternalSrcOperand]!
}

enum ConfigurationItemExternalSrcField {
  id
  Id
  BeidInt
  Name
  TypeId
  IsDefault
  IsActive
  FormatString
  AppId
}

input ConfigurationItemExternalSrcOperand {
  field: ConfigurationItemExternalSrcField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemExternalSrcExpression
}

input ConfigurationItemExternalSrcOrderBy {
  field: ConfigurationItemExternalSrcField
  direction: OrderByDirection = Ascending
}

enum ConfigurationItemField {
  id
  Id
  Beid
  Name
  TypeId
  ItemId
  ComponentId
  MaintScheduleId
  IsActive
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  ExternalId
  ExternalSrcId
  OwnerUid
  OwningDeptId
  OwningGroupId
  LocationId
  LocationRoomId
  AppId
  FormId
}

input ConfigurationItemOperand {
  field: ConfigurationItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemExpression
}

input ConfigurationItemOrderBy {
  field: ConfigurationItemField
  direction: OrderByDirection = Ascending
}

type ConfigurationItemsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  AppId: Int!
  AppName: String!
  FormId: Int!
  FormName: String!
  TypeId: Int!
  TypeName: String!
  AssetId: Int
  BackingItemId: Int!
  BackingItemTypeId: Int!
  BackingItemTypeName: String!
  MaintenanceScheduleId: Int!
  MaintenanceScheduleName: String!
  CreatedUid: ID!
  CreatedFullName: String
  CreatedDateUtc: DateTime!
  ModifiedUid: ID!
  ModifiedFullName: String
  ModifiedDateUtc: DateTime!
  OwnerUid: ID!
  OwnerFullName: String
  OwningDeptId: Int!
  OwningDeptName: String
  OwningGroupId: Int!
  OwningGroupName: String!
  LocationId: Int!
  LocationName: String!
  LocationRoomId: Int!
  LocationRoomName: String!
  ExternalId: String
  IsActive: Boolean!
}

"""A connection to a list of items."""
type ConfigurationItemsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemsReportViewEdge {
  """The item at the end of the edge"""
  node: ConfigurationItemsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemsReportViewExpression {
  operator: Operator!
  operands: [ConfigurationItemsReportViewOperand]!
}

enum ConfigurationItemsReportViewField {
  id
  Id
  Beid
  Name
  AppId
  AppName
  FormId
  FormName
  TypeId
  TypeName
  AssetId
  BackingItemId
  BackingItemTypeId
  BackingItemTypeName
  MaintenanceScheduleId
  MaintenanceScheduleName
  CreatedUid
  CreatedFullName
  CreatedDateUtc
  ModifiedUid
  ModifiedFullName
  ModifiedDateUtc
  OwnerUid
  OwnerFullName
  OwningDeptId
  OwningDeptName
  OwningGroupId
  OwningGroupName
  LocationId
  LocationName
  LocationRoomId
  LocationRoomName
  ExternalId
  IsActive
}

input ConfigurationItemsReportViewOperand {
  field: ConfigurationItemsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemsReportViewExpression
}

input ConfigurationItemsReportViewOrderBy {
  field: ConfigurationItemsReportViewField
  direction: OrderByDirection = Ascending
}

type ConfigurationItemTicket implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ConfigurationItem: ConfigurationItem!
  ConfigurationItemId: Int!
  TicketId: Int!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type ConfigurationItemTicketConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemTicketEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemTicketEdge {
  """The item at the end of the edge"""
  node: ConfigurationItemTicket

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemTicketExpression {
  operator: Operator!
  operands: [ConfigurationItemTicketOperand]!
}

enum ConfigurationItemTicketField {
  id
  Id
  ConfigurationItemId
  TicketId
  CreatedDateUtc
  CreatedUid
}

input ConfigurationItemTicketOperand {
  field: ConfigurationItemTicketField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemTicketExpression
}

input ConfigurationItemTicketOrderBy {
  field: ConfigurationItemTicketField
  direction: OrderByDirection = Ascending
}

type ConfigurationItemTicketTask implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Ticket: Ticket!
  TicketId: Int!
  TicketTask: TicketTask!
  TicketTaskId: Int!
  ConfigurationItem: ConfigurationItem!
  ConfigurationItemId: Int!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type ConfigurationItemTicketTaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemTicketTaskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemTicketTaskEdge {
  """The item at the end of the edge"""
  node: ConfigurationItemTicketTask

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemTicketTaskExpression {
  operator: Operator!
  operands: [ConfigurationItemTicketTaskOperand]!
}

enum ConfigurationItemTicketTaskField {
  id
  Id
  TicketId
  TicketTaskId
  ConfigurationItemId
  CreatedDateUtc
  CreatedUid
}

input ConfigurationItemTicketTaskOperand {
  field: ConfigurationItemTicketTaskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemTicketTaskExpression
}

input ConfigurationItemTicketTaskOrderBy {
  field: ConfigurationItemTicketTaskField
  direction: OrderByDirection = Ascending
}

type ConfigurationItemType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  IsActive: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  AppId: Int!
  TypeConfigurationItemTypeOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
}

"""A connection to a list of items."""
type ConfigurationItemTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationItemTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationItemTypeEdge {
  """The item at the end of the edge"""
  node: ConfigurationItemType

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationItemTypeExpression {
  operator: Operator!
  operands: [ConfigurationItemTypeOperand]!
}

enum ConfigurationItemTypeField {
  id
  Id
  Beid
  Name
  IsActive
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  AppId
}

input ConfigurationItemTypeOperand {
  field: ConfigurationItemTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationItemTypeExpression
}

input ConfigurationItemTypeOrderBy {
  field: ConfigurationItemTypeField
  direction: OrderByDirection = Ascending
}

type ConfigurationRelationship implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ParentConfigurationItem: ConfigurationItem!
  ParentId: Int!
  ChildConfigurationItem: ConfigurationItem!
  ChildId: Int!
  RelTypeConfigurationRelationshipType: ConfigurationRelationshipType!
  RelTypeId: Int!
  IsSystemMaintained: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ConfigurationRelationshipConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationRelationshipEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationRelationshipEdge {
  """The item at the end of the edge"""
  node: ConfigurationRelationship

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationRelationshipExpression {
  operator: Operator!
  operands: [ConfigurationRelationshipOperand]!
}

enum ConfigurationRelationshipField {
  id
  Id
  Beid
  ParentId
  ChildId
  RelTypeId
  IsSystemMaintained
  CreatedUid
  CreatedDateUtc
}

input ConfigurationRelationshipOperand {
  field: ConfigurationRelationshipField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationRelationshipExpression
}

input ConfigurationRelationshipOrderBy {
  field: ConfigurationRelationshipField
  direction: OrderByDirection = Ascending
}

type ConfigurationRelationshipType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Description: String!
  InverseDescription: String!
  IsActive: Boolean!
  IsOperationalDependency: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  AppId: Int!
  RelTypeConfigurationRelationshipTypeOnConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection!
}

"""A connection to a list of items."""
type ConfigurationRelationshipTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConfigurationRelationshipTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ConfigurationRelationshipTypeEdge {
  """The item at the end of the edge"""
  node: ConfigurationRelationshipType

  """A cursor for use in pagination"""
  cursor: String!
}

input ConfigurationRelationshipTypeExpression {
  operator: Operator!
  operands: [ConfigurationRelationshipTypeOperand]!
}

enum ConfigurationRelationshipTypeField {
  id
  Id
  Beid
  Description
  InverseDescription
  IsActive
  IsOperationalDependency
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  AppId
}

input ConfigurationRelationshipTypeOperand {
  field: ConfigurationRelationshipTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ConfigurationRelationshipTypeExpression
}

input ConfigurationRelationshipTypeOrderBy {
  field: ConfigurationRelationshipTypeField
  direction: OrderByDirection = Ascending
}

type ContactInformation implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Addr1: String
  Addr2: String
  Addr3: String
  Addr4: String
  City: String
  State: String
  PostalCode: String
  Country: String
  Url: String
  Phone: String
  Fax: String
  ContactContactInformationOnVendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection!
  PersonContactContactInformationOnVendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection!
}

"""A connection to a list of items."""
type ContactInformationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactInformationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ContactInformationEdge {
  """The item at the end of the edge"""
  node: ContactInformation

  """A cursor for use in pagination"""
  cursor: String!
}

input ContactInformationExpression {
  operator: Operator!
  operands: [ContactInformationOperand]!
}

enum ContactInformationField {
  id
  Id
  Addr1
  Addr2
  Addr3
  Addr4
  City
  State
  PostalCode
  Country
  Url
  Phone
  Fax
}

input ContactInformationOperand {
  field: ContactInformationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ContactInformationExpression
}

input ContactInformationOrderBy {
  field: ContactInformationField
  direction: OrderByDirection = Ascending
}

type Contract implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ProviderVendor: Vendor!
  ProviderId: Int!
  ContractNumber: String!
  StartDate: DateTime
  EndDate: DateTime
  Description: String
  TypeContractType: ContractType!
  TypeId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  IsActive: Boolean!
  IsFixedModel: Boolean!
  SlidingDefaultDuration: Int!
  SlidingDefaultUnit: String
  AccountClientAcctCode: ClientAcctCode!
  AccountId: Int!
  AppId: Int!
  ContractPrice: Decimal
  ContractOnAssetsContracts(after: String, first: Int, before: String, last: Int, sort: [AssetsContractOrderBy], filter: AssetsContractExpression): AssetsContractConnection!
}

"""A connection to a list of items."""
type ContractConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContractEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ContractEdge {
  """The item at the end of the edge"""
  node: Contract

  """A cursor for use in pagination"""
  cursor: String!
}

input ContractExpression {
  operator: Operator!
  operands: [ContractOperand]!
}

enum ContractField {
  id
  Id
  Beid
  ProviderId
  ContractNumber
  StartDate
  EndDate
  Description
  TypeId
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  IsActive
  IsFixedModel
  SlidingDefaultDuration
  SlidingDefaultUnit
  AccountId
  AppId
  ContractPrice
}

input ContractOperand {
  field: ContractField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ContractExpression
}

input ContractOrderBy {
  field: ContractField
  direction: OrderByDirection = Ascending
}

type ContractsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  Id: Int!
  AppId: Int!
  AppName: String!
  ProviderId: Int!
  ProviderName: String!
  ContractNumber: String!
  IsFixedDateModel: Boolean!
  StartDate: DateTime
  EndDate: DateTime
  Description: String
  TypeId: Int!
  TypeName: String!
  AccountId: Int!
  AccountName: String
  CreatedDate: DateTime!
  CreatedByUid: ID!
  CreatedByFullName: String
  ModifiedDate: DateTime!
  ModifiedByUid: ID!
  ModifiedByFullName: String
  Active: Boolean!
  ContractPrice: Decimal
  AssetCount: Int
}

"""A connection to a list of items."""
type ContractsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContractsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ContractsReportViewEdge {
  """The item at the end of the edge"""
  node: ContractsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ContractsReportViewExpression {
  operator: Operator!
  operands: [ContractsReportViewOperand]!
}

enum ContractsReportViewField {
  id
  Beid
  Id
  AppId
  AppName
  ProviderId
  ProviderName
  ContractNumber
  IsFixedDateModel
  StartDate
  EndDate
  Description
  TypeId
  TypeName
  AccountId
  AccountName
  CreatedDate
  CreatedByUid
  CreatedByFullName
  ModifiedDate
  ModifiedByUid
  ModifiedByFullName
  Active
  ContractPrice
  AssetCount
}

input ContractsReportViewOperand {
  field: ContractsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ContractsReportViewExpression
}

input ContractsReportViewOrderBy {
  field: ContractsReportViewField
  direction: OrderByDirection = Ascending
}

type ContractType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeContractTypeOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
}

"""A connection to a list of items."""
type ContractTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContractTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ContractTypeEdge {
  """The item at the end of the edge"""
  node: ContractType

  """A cursor for use in pagination"""
  cursor: String!
}

input ContractTypeExpression {
  operator: Operator!
  operands: [ContractTypeOperand]!
}

enum ContractTypeField {
  id
  Id
  Name
}

input ContractTypeOperand {
  field: ContractTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ContractTypeExpression
}

input ContractTypeOrderBy {
  field: ContractTypeField
  direction: OrderByDirection = Ascending
}

type CriteriaChoice implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CrCriterion: Criterion!
  Crid: Int!
  Name: String!
  Value: String!
  CrcCriteriaChoiceOnProjectCriteria(after: String, first: Int, before: String, last: Int, sort: [ProjectCriterionOrderBy], filter: ProjectCriterionExpression): ProjectCriterionConnection!
}

"""A connection to a list of items."""
type CriteriaChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CriteriaChoiceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CriteriaChoiceEdge {
  """The item at the end of the edge"""
  node: CriteriaChoice

  """A cursor for use in pagination"""
  cursor: String!
}

input CriteriaChoiceExpression {
  operator: Operator!
  operands: [CriteriaChoiceOperand]!
}

enum CriteriaChoiceField {
  id
  Id
  Crid
  Name
  Value
}

input CriteriaChoiceOperand {
  field: CriteriaChoiceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CriteriaChoiceExpression
}

input CriteriaChoiceOrderBy {
  field: CriteriaChoiceField
  direction: OrderByDirection = Ascending
}

type Criterion implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Name: String!
  Type: String!
  Comments: String
  PcTofValue: Float!
  IsActive: Boolean!
  DateCreated: DateTime
  MaxValue: Float!
  MinValue: Float!
  CrCriterionOnCriteriaChoices(after: String, first: Int, before: String, last: Int, sort: [CriteriaChoiceOrderBy], filter: CriteriaChoiceExpression): CriteriaChoiceConnection!
  CrCriterionOnProjectCriteria(after: String, first: Int, before: String, last: Int, sort: [ProjectCriterionOrderBy], filter: ProjectCriterionExpression): ProjectCriterionConnection!
  CriteriaCriterionOnScoreCardCriteria(after: String, first: Int, before: String, last: Int, sort: [ScoreCardCriterionOrderBy], filter: ScoreCardCriterionExpression): ScoreCardCriterionConnection!
}

"""A connection to a list of items."""
type CriterionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CriterionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CriterionEdge {
  """The item at the end of the edge"""
  node: Criterion

  """A cursor for use in pagination"""
  cursor: String!
}

input CriterionExpression {
  operator: Operator!
  operands: [CriterionOperand]!
}

enum CriterionField {
  id
  Id
  Beid
  Name
  Type
  Comments
  PcTofValue
  IsActive
  DateCreated
  MaxValue
  MinValue
}

input CriterionOperand {
  field: CriterionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CriterionExpression
}

input CriterionOrderBy {
  field: CriterionField
  direction: OrderByDirection = Ascending
}

type CustomOperator implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  FromRelativeTo: String
  FromAdd: Int
  FromAddUnit: String
  ToRelativeTo: String
  ToAdd: Int
  ToAddUnit: String
  Order: Int!
}

"""A connection to a list of items."""
type CustomOperatorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomOperatorEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CustomOperatorEdge {
  """The item at the end of the edge"""
  node: CustomOperator

  """A cursor for use in pagination"""
  cursor: String!
}

input CustomOperatorExpression {
  operator: Operator!
  operands: [CustomOperatorOperand]!
}

enum CustomOperatorField {
  id
  Id
  Name
  FromRelativeTo
  FromAdd
  FromAddUnit
  ToRelativeTo
  ToAdd
  ToAddUnit
  Order
}

input CustomOperatorOperand {
  field: CustomOperatorField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CustomOperatorExpression
}

input CustomOperatorOrderBy {
  field: CustomOperatorField
  direction: OrderByDirection = Ascending
}

type CustomPage implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  DateCreated: DateTime!
  DateModified: DateTime!
  Url: String!
  Name: String!
  CreatedByUid: ID!
  Application: String!
  Order: Int!
  ClientVisible: Boolean!
  IsActive: Boolean!
}

"""A connection to a list of items."""
type CustomPageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomPageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CustomPageEdge {
  """The item at the end of the edge"""
  node: CustomPage

  """A cursor for use in pagination"""
  cursor: String!
}

input CustomPageExpression {
  operator: Operator!
  operands: [CustomPageOperand]!
}

enum CustomPageField {
  id
  Id
  Beid
  DateCreated
  DateModified
  Url
  Name
  CreatedByUid
  Application
  Order
  ClientVisible
  IsActive
}

input CustomPageOperand {
  field: CustomPageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: CustomPageExpression
}

input CustomPageOrderBy {
  field: CustomPageField
  direction: OrderByDirection = Ascending
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

scalar Decimal

type DeletedConfigurationItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  TypeId: Int!
  TypeName: String!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  AttributesXml: Xml
  RelationshipsXml: Xml
  DeletedUidUser: User!
  DeletedUid: ID!
  DeletedDateUtc: DateTime!
  AppId: Int!
}

"""A connection to a list of items."""
type DeletedConfigurationItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeletedConfigurationItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DeletedConfigurationItemEdge {
  """The item at the end of the edge"""
  node: DeletedConfigurationItem

  """A cursor for use in pagination"""
  cursor: String!
}

input DeletedConfigurationItemExpression {
  operator: Operator!
  operands: [DeletedConfigurationItemOperand]!
}

enum DeletedConfigurationItemField {
  id
  Id
  Beid
  Name
  TypeId
  TypeName
  ItemId
  ComponentId
  AttributesXml
  RelationshipsXml
  DeletedUid
  DeletedDateUtc
  AppId
}

input DeletedConfigurationItemOperand {
  field: DeletedConfigurationItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DeletedConfigurationItemExpression
}

input DeletedConfigurationItemOrderBy {
  field: DeletedConfigurationItemField
  direction: OrderByDirection = Ascending
}

type DeletedFile implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  FileId: ID!
  FileUid: ID!
  FileTid: Int!
  FileFoldId: ID!
  FileName: String!
  FileSize: String!
  FileDateCreated: DateTime!
  FileDateModified: DateTime!
  DeletedByUid: ID!
  DateDeleted: DateTime!
}

"""A connection to a list of items."""
type DeletedFileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeletedFileEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DeletedFileEdge {
  """The item at the end of the edge"""
  node: DeletedFile

  """A cursor for use in pagination"""
  cursor: String!
}

input DeletedFileExpression {
  operator: Operator!
  operands: [DeletedFileOperand]!
}

enum DeletedFileField {
  id
  Id
  FileId
  FileUid
  FileTid
  FileFoldId
  FileName
  FileSize
  FileDateCreated
  FileDateModified
  DeletedByUid
  DateDeleted
}

input DeletedFileOperand {
  field: DeletedFileField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DeletedFileExpression
}

input DeletedFileOrderBy {
  field: DeletedFileField
  direction: OrderByDirection = Ascending
}

type DeletedItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  DeletedDate: DateTime!
  DeletedUid: ID!
  ItemId: Int!
  ComponentId: Int!
}

"""A connection to a list of items."""
type DeletedItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeletedItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DeletedItemEdge {
  """The item at the end of the edge"""
  node: DeletedItem

  """A cursor for use in pagination"""
  cursor: String!
}

input DeletedItemExpression {
  operator: Operator!
  operands: [DeletedItemOperand]!
}

enum DeletedItemField {
  id
  Id
  Beid
  DeletedDate
  DeletedUid
  ItemId
  ComponentId
}

input DeletedItemOperand {
  field: DeletedItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DeletedItemExpression
}

input DeletedItemOrderBy {
  field: DeletedItemField
  direction: OrderByDirection = Ascending
}

type Desktop implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  OwnerUid: ID
  CreatedDate: DateTime!
  IsShared: Boolean!
  SharedUntilDate: DateTime
  IsDefault: Boolean!
  AppContext: String!
  AppName: String!
  Description: String
  IsActive: Boolean!
  AppId: Int
  DesktopLayout: DesktopLayout!
  DesktopLayoutId: Int!
  Order: Int!
  TemplateId: ID
  AllowEdit: Boolean!
  DesktopOnDesktopModules(after: String, first: Int, before: String, last: Int, sort: [DesktopModuleOrderBy], filter: DesktopModuleExpression): DesktopModuleConnection!
  DesktopOnUserRegistrationProfiles(after: String, first: Int, before: String, last: Int, sort: [UserRegistrationProfileOrderBy], filter: UserRegistrationProfileExpression): UserRegistrationProfileConnection
}

"""A connection to a list of items."""
type DesktopConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DesktopEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DesktopEdge {
  """The item at the end of the edge"""
  node: Desktop

  """A cursor for use in pagination"""
  cursor: String!
}

input DesktopExpression {
  operator: Operator!
  operands: [DesktopOperand]!
}

enum DesktopField {
  id
  Id
  Beid
  Name
  OwnerUid
  CreatedDate
  IsShared
  SharedUntilDate
  IsDefault
  AppContext
  AppName
  Description
  IsActive
  AppId
  DesktopLayoutId
  Order
  TemplateId
  AllowEdit
}

type DesktopLayout implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Description: String!
  Panels: Int!
  DesktopLayoutOnDesktops(after: String, first: Int, before: String, last: Int, sort: [DesktopOrderBy], filter: DesktopExpression): DesktopConnection!
}

"""A connection to a list of items."""
type DesktopLayoutConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DesktopLayoutEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DesktopLayoutEdge {
  """The item at the end of the edge"""
  node: DesktopLayout

  """A cursor for use in pagination"""
  cursor: String!
}

input DesktopLayoutExpression {
  operator: Operator!
  operands: [DesktopLayoutOperand]!
}

enum DesktopLayoutField {
  id
  Id
  Name
  Description
  Panels
}

input DesktopLayoutOperand {
  field: DesktopLayoutField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DesktopLayoutExpression
}

input DesktopLayoutOrderBy {
  field: DesktopLayoutField
  direction: OrderByDirection = Ascending
}

type DesktopModule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Desktop: Desktop!
  DesktopId: ID!
  OwnerUid: ID!
  ModModule: Module!
  ModId: Int!
  Column: Int!
  Position: Int!
  AppName: String!
  Settings: String
  CreatedDate: DateTime!
}

"""A connection to a list of items."""
type DesktopModuleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DesktopModuleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DesktopModuleEdge {
  """The item at the end of the edge"""
  node: DesktopModule

  """A cursor for use in pagination"""
  cursor: String!
}

input DesktopModuleExpression {
  operator: Operator!
  operands: [DesktopModuleOperand]!
}

enum DesktopModuleField {
  id
  Id
  DesktopId
  OwnerUid
  ModId
  Column
  Position
  AppName
  Settings
  CreatedDate
}

input DesktopModuleOperand {
  field: DesktopModuleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DesktopModuleExpression
}

input DesktopModuleOrderBy {
  field: DesktopModuleField
  direction: OrderByDirection = Ascending
}

type DesktopModulesBackup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  DesktopId: ID!
  OwnerUid: ID!
  ModId: Int!
  Column: Int!
  Position: Int!
  AppName: String!
  Settings: String
  CreatedDate: DateTime!
}

"""A connection to a list of items."""
type DesktopModulesBackupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DesktopModulesBackupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DesktopModulesBackupEdge {
  """The item at the end of the edge"""
  node: DesktopModulesBackup

  """A cursor for use in pagination"""
  cursor: String!
}

input DesktopModulesBackupExpression {
  operator: Operator!
  operands: [DesktopModulesBackupOperand]!
}

enum DesktopModulesBackupField {
  id
  Id
  DesktopId
  OwnerUid
  ModId
  Column
  Position
  AppName
  Settings
  CreatedDate
}

input DesktopModulesBackupOperand {
  field: DesktopModulesBackupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DesktopModulesBackupExpression
}

input DesktopModulesBackupOrderBy {
  field: DesktopModulesBackupField
  direction: OrderByDirection = Ascending
}

input DesktopOperand {
  field: DesktopField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DesktopExpression
}

input DesktopOrderBy {
  field: DesktopField
  direction: OrderByDirection = Ascending
}

type Download implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  SystemName: String!
  IconCharCode: Int
  IsActive: Boolean!
  Description: String
  DownloadUrl: String
  LandingPageUrl: String
  HelpUrl: String
  GaTrackingId: String
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  DownloadOnDownloadApplications(after: String, first: Int, before: String, last: Int, sort: [DownloadApplicationOrderBy], filter: DownloadApplicationExpression): DownloadApplicationConnection!
  DownloadOnUserDownloads(after: String, first: Int, before: String, last: Int, sort: [UserDownloadOrderBy], filter: UserDownloadExpression): UserDownloadConnection!
}

type DownloadApplication implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Download: Download!
  DownloadId: Int!
  AppApplication: Application!
  AppId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type DownloadApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DownloadApplicationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DownloadApplicationEdge {
  """The item at the end of the edge"""
  node: DownloadApplication

  """A cursor for use in pagination"""
  cursor: String!
}

input DownloadApplicationExpression {
  operator: Operator!
  operands: [DownloadApplicationOperand]!
}

enum DownloadApplicationField {
  id
  Id
  DownloadId
  AppId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input DownloadApplicationOperand {
  field: DownloadApplicationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DownloadApplicationExpression
}

input DownloadApplicationOrderBy {
  field: DownloadApplicationField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type DownloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DownloadEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DownloadEdge {
  """The item at the end of the edge"""
  node: Download

  """A cursor for use in pagination"""
  cursor: String!
}

input DownloadExpression {
  operator: Operator!
  operands: [DownloadOperand]!
}

enum DownloadField {
  id
  Id
  Name
  SystemName
  IconCharCode
  IsActive
  Description
  DownloadUrl
  LandingPageUrl
  HelpUrl
  GaTrackingId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  BeidInt
}

input DownloadOperand {
  field: DownloadField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DownloadExpression
}

input DownloadOrderBy {
  field: DownloadField
  direction: OrderByDirection = Ascending
}

type DwTeamStatusMonth implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Tid: String
  Beid: ID
  HealthId: Int
  TimeId: Int
  TypeId: Int
  AccountId: Int
}

"""A connection to a list of items."""
type DwTeamStatusMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DwTeamStatusMonthEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DwTeamStatusMonthEdge {
  """The item at the end of the edge"""
  node: DwTeamStatusMonth

  """A cursor for use in pagination"""
  cursor: String!
}

input DwTeamStatusMonthExpression {
  operator: Operator!
  operands: [DwTeamStatusMonthOperand]!
}

enum DwTeamStatusMonthField {
  id
  Id
  Tid
  Beid
  HealthId
  TimeId
  TypeId
  AccountId
}

input DwTeamStatusMonthOperand {
  field: DwTeamStatusMonthField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DwTeamStatusMonthExpression
}

input DwTeamStatusMonthOrderBy {
  field: DwTeamStatusMonthField
  direction: OrderByDirection = Ascending
}

type DwTeamStatusWeek implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Tid: String
  Beid: ID
  HealthId: Int
  TimeId: Int
  TypeId: Int
  AccountId: Int
}

"""A connection to a list of items."""
type DwTeamStatusWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DwTeamStatusWeekEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DwTeamStatusWeekEdge {
  """The item at the end of the edge"""
  node: DwTeamStatusWeek

  """A cursor for use in pagination"""
  cursor: String!
}

input DwTeamStatusWeekExpression {
  operator: Operator!
  operands: [DwTeamStatusWeekOperand]!
}

enum DwTeamStatusWeekField {
  id
  Id
  Tid
  Beid
  HealthId
  TimeId
  TypeId
  AccountId
}

input DwTeamStatusWeekOperand {
  field: DwTeamStatusWeekField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DwTeamStatusWeekExpression
}

input DwTeamStatusWeekOrderBy {
  field: DwTeamStatusWeekField
  direction: OrderByDirection = Ascending
}

type DwTimeTeamMonth implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Month: String
  Year: String
  Date: DateTime
}

"""A connection to a list of items."""
type DwTimeTeamMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DwTimeTeamMonthEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DwTimeTeamMonthEdge {
  """The item at the end of the edge"""
  node: DwTimeTeamMonth

  """A cursor for use in pagination"""
  cursor: String!
}

input DwTimeTeamMonthExpression {
  operator: Operator!
  operands: [DwTimeTeamMonthOperand]!
}

enum DwTimeTeamMonthField {
  id
  Id
  Month
  Year
  Date
}

input DwTimeTeamMonthOperand {
  field: DwTimeTeamMonthField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DwTimeTeamMonthExpression
}

input DwTimeTeamMonthOrderBy {
  field: DwTimeTeamMonthField
  direction: OrderByDirection = Ascending
}

type DwTimeTeamWeek implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Week: String
  Year: String
  Date: DateTime
}

"""A connection to a list of items."""
type DwTimeTeamWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DwTimeTeamWeekEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type DwTimeTeamWeekEdge {
  """The item at the end of the edge"""
  node: DwTimeTeamWeek

  """A cursor for use in pagination"""
  cursor: String!
}

input DwTimeTeamWeekExpression {
  operator: Operator!
  operands: [DwTimeTeamWeekOperand]!
}

enum DwTimeTeamWeekField {
  id
  Id
  Week
  Year
  Date
}

input DwTimeTeamWeekOperand {
  field: DwTimeTeamWeekField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: DwTimeTeamWeekExpression
}

input DwTimeTeamWeekOrderBy {
  field: DwTimeTeamWeekField
  direction: OrderByDirection = Ascending
}

type EmailField implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  ContainingFieldEmailFieldOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
}

"""A connection to a list of items."""
type EmailFieldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailFieldEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EmailFieldEdge {
  """The item at the end of the edge"""
  node: EmailField

  """A cursor for use in pagination"""
  cursor: String!
}

input EmailFieldExpression {
  operator: Operator!
  operands: [EmailFieldOperand]!
}

enum EmailFieldField {
  id
  Id
  Name
}

input EmailFieldOperand {
  field: EmailFieldField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EmailFieldExpression
}

input EmailFieldOrderBy {
  field: EmailFieldField
  direction: OrderByDirection = Ascending
}

type EmailMonitor implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  EmailUsername: String
  EmailPassword: String
  TdUsername: String
  TdPassword: String
  ErrorToEmail: String
  ServerName: String
  ServerPort: Int
  InboxFolderName: String
  ProcessedFolderName: String
  UnsuccessfulFolderName: String
  ModifiedUidUser: User
  ModifiedUid: ID
  CreatedUidUser: User
  CreatedUid: ID
  IsActive: Boolean
  BeBillableEntity: BillableEntity
  Beid: ID
  BeidInt: Int
  ModifiedDateUtc: DateTime
  CreatedDateUtc: DateTime
  EnableAttachments: Boolean
  PrivateComments: Boolean
  Application: Application
  ApplicationId: Int
  TypeEmailMonitorType: EmailMonitorType
  TypeId: Int
  Interval: Int
  ShouldHandleCommentsOrTickets: Boolean!
  EmailMonitorOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
}

"""A connection to a list of items."""
type EmailMonitorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailMonitorEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EmailMonitorEdge {
  """The item at the end of the edge"""
  node: EmailMonitor

  """A cursor for use in pagination"""
  cursor: String!
}

input EmailMonitorExpression {
  operator: Operator!
  operands: [EmailMonitorOperand]!
}

enum EmailMonitorField {
  id
  Id
  Name
  EmailUsername
  EmailPassword
  TdUsername
  TdPassword
  ErrorToEmail
  ServerName
  ServerPort
  InboxFolderName
  ProcessedFolderName
  UnsuccessfulFolderName
  ModifiedUid
  CreatedUid
  IsActive
  Beid
  BeidInt
  ModifiedDateUtc
  CreatedDateUtc
  EnableAttachments
  PrivateComments
  ApplicationId
  TypeId
  Interval
  ShouldHandleCommentsOrTickets
}

input EmailMonitorOperand {
  field: EmailMonitorField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EmailMonitorExpression
}

input EmailMonitorOrderBy {
  field: EmailMonitorField
  direction: OrderByDirection = Ascending
}

type EmailMonitorType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  TypeEmailMonitorTypeOnEmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
}

"""A connection to a list of items."""
type EmailMonitorTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmailMonitorTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EmailMonitorTypeEdge {
  """The item at the end of the edge"""
  node: EmailMonitorType

  """A cursor for use in pagination"""
  cursor: String!
}

input EmailMonitorTypeExpression {
  operator: Operator!
  operands: [EmailMonitorTypeOperand]!
}

enum EmailMonitorTypeField {
  id
  Id
  Name
}

input EmailMonitorTypeOperand {
  field: EmailMonitorTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EmailMonitorTypeExpression
}

input EmailMonitorTypeOrderBy {
  field: EmailMonitorTypeField
  direction: OrderByDirection = Ascending
}

type Event implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  Tid: Int!
  Title: String!
  STitle: String
  Desc: String
  StartDate: DateTime
  EndDate: DateTime
  IsAllDay: Boolean
  Location: String
  WebLocation: String
  IsRepeating: Boolean
  RepeatInt: Int
  RepeatUntil: DateTime
  RepeatId: Int
  HasAttendees: Boolean
  TimeZone: Int
  DateCreated: DateTime!
  IsPublished: Int!
  DatePublished: DateTime
  PublishedUid: ID
  IsPending: Boolean!
  DateCreatedGmt: DateTime
  DateModifiedGmt: DateTime
  OrganizerUidUser: User!
  OrganizerUid: ID!
  Beid: ID!
  EventOnEventAttendees(after: String, first: Int, before: String, last: Int, sort: [EventAttendeeOrderBy], filter: EventAttendeeExpression): EventAttendeeConnection!
  EventOnEventUserAlerts(after: String, first: Int, before: String, last: Int, sort: [EventUserAlertOrderBy], filter: EventUserAlertExpression): EventUserAlertConnection!
}

type EventAttendee implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Event: Event!
  EventId: Int!
  Uid: ID!
}

"""A connection to a list of items."""
type EventAttendeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventAttendeeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EventAttendeeEdge {
  """The item at the end of the edge"""
  node: EventAttendee

  """A cursor for use in pagination"""
  cursor: String!
}

input EventAttendeeExpression {
  operator: Operator!
  operands: [EventAttendeeOperand]!
}

enum EventAttendeeField {
  id
  Id
  EventId
  Uid
}

input EventAttendeeOperand {
  field: EventAttendeeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EventAttendeeExpression
}

input EventAttendeeOrderBy {
  field: EventAttendeeField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge"""
  node: Event

  """A cursor for use in pagination"""
  cursor: String!
}

input EventExpression {
  operator: Operator!
  operands: [EventOperand]!
}

enum EventField {
  id
  Id
  Uid
  Tid
  Title
  STitle
  Desc
  StartDate
  EndDate
  IsAllDay
  Location
  WebLocation
  IsRepeating
  RepeatInt
  RepeatUntil
  RepeatId
  HasAttendees
  TimeZone
  DateCreated
  IsPublished
  DatePublished
  PublishedUid
  IsPending
  DateCreatedGmt
  DateModifiedGmt
  OrganizerUid
  Beid
}

input EventOperand {
  field: EventField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EventExpression
}

input EventOrderBy {
  field: EventField
  direction: OrderByDirection = Ascending
}

type EventUserAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Alert: Alert!
  AlertId: Int!
  Event: Event!
  EventId: Int!
  UidUser: User!
  Uid: ID!
  Status: Boolean!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type EventUserAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventUserAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type EventUserAlertEdge {
  """The item at the end of the edge"""
  node: EventUserAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input EventUserAlertExpression {
  operator: Operator!
  operands: [EventUserAlertOperand]!
}

enum EventUserAlertField {
  id
  Id
  AlertId
  EventId
  Uid
  Status
  DateCreated
}

input EventUserAlertOperand {
  field: EventUserAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: EventUserAlertExpression
}

input EventUserAlertOrderBy {
  field: EventUserAlertField
  direction: OrderByDirection = Ascending
}

type Exception implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Type: String
  InnerExceptionId: Int
  Source: String
  Message: String
  Text: String
  Form: String
  QueryString: String
  TargetSite: String
  StackTrace: String
  Referer: String
  BrowserName: String
  BrowserVersion: String
  DateCreated: DateTime
  Uid: ID
  ReferringUrl: String
  Host: String
}

"""A connection to a list of items."""
type ExceptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExceptionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ExceptionEdge {
  """The item at the end of the edge"""
  node: Exception

  """A cursor for use in pagination"""
  cursor: String!
}

input ExceptionExpression {
  operator: Operator!
  operands: [ExceptionOperand]!
}

enum ExceptionField {
  id
  Id
  Type
  InnerExceptionId
  Source
  Message
  Text
  Form
  QueryString
  TargetSite
  StackTrace
  Referer
  BrowserName
  BrowserVersion
  DateCreated
  Uid
  ReferringUrl
  Host
}

input ExceptionOperand {
  field: ExceptionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ExceptionExpression
}

input ExceptionOrderBy {
  field: ExceptionField
  direction: OrderByDirection = Ascending
}

type ExceptionsView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  PartitionId: Int!
  PartitionName: String
  ExcId: Int!
  ExcType: String
  ExcInnerExceptionId: Int
  ExcSource: String
  ExcMessage: String
  ExcText: String
  ExcForm: String
  ExcQueryString: String
  ExcTargetSite: String
  ExcStackTrace: String
  ExcReferer: String
  ExcBrowserName: String
  ExcBrowserVersion: String
  ExcDateCreated: DateTime
  ExcUid: ID
  ExcReferringUrl: String
  ExcDateOnly: Date
  ExcYear: Int
  ExcYearMonth: DateTime
  ExcYearMonthName: String
  ExcYearWeek: Date
  ExcYearWeekName: String
}

"""A connection to a list of items."""
type ExceptionsViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExceptionsViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ExceptionsViewEdge {
  """The item at the end of the edge"""
  node: ExceptionsView

  """A cursor for use in pagination"""
  cursor: String!
}

input ExceptionsViewExpression {
  operator: Operator!
  operands: [ExceptionsViewOperand]!
}

enum ExceptionsViewField {
  id
  PartitionId
  PartitionName
  ExcId
  ExcType
  ExcInnerExceptionId
  ExcSource
  ExcMessage
  ExcText
  ExcForm
  ExcQueryString
  ExcTargetSite
  ExcStackTrace
  ExcReferer
  ExcBrowserName
  ExcBrowserVersion
  ExcDateCreated
  ExcUid
  ExcReferringUrl
  ExcDateOnly
  ExcYear
  ExcYearMonth
  ExcYearMonthName
  ExcYearWeek
  ExcYearWeekName
}

input ExceptionsViewOperand {
  field: ExceptionsViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ExceptionsViewExpression
}

input ExceptionsViewOrderBy {
  field: ExceptionsViewField
  direction: OrderByDirection = Ascending
}

type Expense implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Tid: Int!
  Uid: ID!
  Eacid: Int!
  ReportDate: DateTime!
  ReceiptDate: DateTime
  Amount: Decimal!
  Rate: Decimal!
  Quantity: Decimal!
  DateCreated: DateTime!
  DateModified: DateTime!
  Status: Int!
  Description: String
  Trid: Int
  Billable: Boolean!
  StatusDate: DateTime
  StatusUid: ID
  HaveReceipt: Boolean
  Invid: String
  ExportDate: DateTime
  Reimbursable: Boolean
  Type: Int!
  ItemId: Int
  ItemTitle: String
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppId: Int!
  VendorName: String!
}

type ExpenseAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Desc: String
  BeBillableEntity: BillableEntity
  Beid: ID
  DateCreated: DateTime
  DateModified: DateTime
  AcctCode: String
  Rate: Decimal
  GlAcct: String
  IsActive: Boolean!
  EacExpenseAcctCodeOnTicketExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TicketExpenseAcctCodeOrderBy], filter: TicketExpenseAcctCodeExpression): TicketExpenseAcctCodeConnection!
  EacExpenseAcctCodeOnTypesExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesExpenseAcctCodeOrderBy], filter: TypesExpenseAcctCodeExpression): TypesExpenseAcctCodeConnection!
}

"""A connection to a list of items."""
type ExpenseAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ExpenseAcctCodeEdge {
  """The item at the end of the edge"""
  node: ExpenseAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input ExpenseAcctCodeExpression {
  operator: Operator!
  operands: [ExpenseAcctCodeOperand]!
}

enum ExpenseAcctCodeField {
  id
  Id
  Desc
  Beid
  DateCreated
  DateModified
  AcctCode
  Rate
  GlAcct
  IsActive
}

input ExpenseAcctCodeOperand {
  field: ExpenseAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ExpenseAcctCodeExpression
}

input ExpenseAcctCodeOrderBy {
  field: ExpenseAcctCodeField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ExpenseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpenseEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ExpenseEdge {
  """The item at the end of the edge"""
  node: Expense

  """A cursor for use in pagination"""
  cursor: String!
}

input ExpenseExpression {
  operator: Operator!
  operands: [ExpenseOperand]!
}

enum ExpenseField {
  id
  Id
  Tid
  Uid
  Eacid
  ReportDate
  ReceiptDate
  Amount
  Rate
  Quantity
  DateCreated
  DateModified
  Status
  Description
  Trid
  Billable
  StatusDate
  StatusUid
  HaveReceipt
  Invid
  ExportDate
  Reimbursable
  Type
  ItemId
  ItemTitle
  BeidInt
  AppId
  VendorName
}

input ExpenseOperand {
  field: ExpenseField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ExpenseExpression
}

input ExpenseOrderBy {
  field: ExpenseField
  direction: OrderByDirection = Ascending
}

type ExpensesReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID
  ExpenseId: Int!
  TypeId: Int!
  TypeName: String
  ProjectId: Int
  ProjectName: String
  TicketId: Int
  AppId: Int!
  TicketTitle: String
  ProjectTicketName: String
  AccountId: Int
  AccountName: String
  StatusId: Int!
  StatusName: String
  StatusDate: DateTime
  StatusUid: ID
  CreatedByUid: ID!
  CreatedByName: String
  CreatedDate: DateTime!
  ReportsToUid: ID
  ReportsToName: String
  Amount: Decimal!
  Billable: Boolean!
  HasReceipt: Boolean
  ReceiptDate: DateTime
  ReportDate: DateTime!
  Reimbursable: Boolean
  Description: String
  VendorId: Int!
  VendorName: String!
  ExpenseAccountId: Int!
  ExpenseAccountName: String
  IsEmployee: Boolean
  PrimaryFunctionalRoleId: Int
  PrimaryFunctionalRole: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
}

"""A connection to a list of items."""
type ExpensesReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExpensesReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ExpensesReportViewEdge {
  """The item at the end of the edge"""
  node: ExpensesReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ExpensesReportViewExpression {
  operator: Operator!
  operands: [ExpensesReportViewOperand]!
}

enum ExpensesReportViewField {
  id
  Beid
  ExpenseId
  TypeId
  TypeName
  ProjectId
  ProjectName
  TicketId
  AppId
  TicketTitle
  ProjectTicketName
  AccountId
  AccountName
  StatusId
  StatusName
  StatusDate
  StatusUid
  CreatedByUid
  CreatedByName
  CreatedDate
  ReportsToUid
  ReportsToName
  Amount
  Billable
  HasReceipt
  ReceiptDate
  ReportDate
  Reimbursable
  Description
  VendorId
  VendorName
  ExpenseAccountId
  ExpenseAccountName
  IsEmployee
  PrimaryFunctionalRoleId
  PrimaryFunctionalRole
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
}

input ExpensesReportViewOperand {
  field: ExpensesReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ExpensesReportViewExpression
}

input ExpensesReportViewOrderBy {
  field: ExpensesReportViewField
  direction: OrderByDirection = Ascending
}

type FailedEmailDelivery implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Subject: String
  BodyHtml: String
  BodyText: String
  ToAddresses: String
  CcAddresses: String
  BccAddresses: String
  FromDisplayName: String
  ReplyToAddress: String
  AsHtml: Boolean!
  HadAttachments: Boolean!
  Component: Int!
  ErrorMessage: String
  CreatedDateUtc: DateTime!
  Resent: Boolean!
  ResentDateUtc: DateTime
  AttachmentsJson: String
  MailServer: String!
  LastMailServer: String
  LastErrorMessage: String
  LastErrorDateUtc: DateTime
  RetryCount: Int!
  AttemptResend: Boolean!
}

"""A connection to a list of items."""
type FailedEmailDeliveryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FailedEmailDeliveryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FailedEmailDeliveryEdge {
  """The item at the end of the edge"""
  node: FailedEmailDelivery

  """A cursor for use in pagination"""
  cursor: String!
}

input FailedEmailDeliveryExpression {
  operator: Operator!
  operands: [FailedEmailDeliveryOperand]!
}

enum FailedEmailDeliveryField {
  id
  Id
  Beid
  Subject
  BodyHtml
  BodyText
  ToAddresses
  CcAddresses
  BccAddresses
  FromDisplayName
  ReplyToAddress
  AsHtml
  HadAttachments
  Component
  ErrorMessage
  CreatedDateUtc
  Resent
  ResentDateUtc
  AttachmentsJson
  MailServer
  LastMailServer
  LastErrorMessage
  LastErrorDateUtc
  RetryCount
  AttemptResend
}

input FailedEmailDeliveryOperand {
  field: FailedEmailDeliveryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FailedEmailDeliveryExpression
}

input FailedEmailDeliveryOrderBy {
  field: FailedEmailDeliveryField
  direction: OrderByDirection = Ascending
}

type Feedback implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: Int!
  ItemComponentComponent: Component!
  ItemComponentId: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  UidUser: User!
  Uid: ID!
  CreatedDateUtc: DateTime!
  Comments: String
  IsHelpful: Boolean!
  IsAddressed: Boolean!
  AddressedDateUtc: DateTime
  AddressedUidUser: User
  AddressedUid: ID
  IpAddress: Buffer
}

"""A connection to a list of items."""
type FeedbackConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeedbackEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FeedbackEdge {
  """The item at the end of the edge"""
  node: Feedback

  """A cursor for use in pagination"""
  cursor: String!
}

input FeedbackExpression {
  operator: Operator!
  operands: [FeedbackOperand]!
}

enum FeedbackField {
  id
  Id
  ItemId
  ItemComponentId
  Beid
  Uid
  CreatedDateUtc
  Comments
  IsHelpful
  IsAddressed
  AddressedDateUtc
  AddressedUid
  IpAddress
}

input FeedbackOperand {
  field: FeedbackField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FeedbackExpression
}

input FeedbackOrderBy {
  field: FeedbackField
  direction: OrderByDirection = Ascending
}

type File implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  Uid: ID!
  Tid: Int!
  FoldFolder: Folder
  FoldId: ID
  RoutingId: ID
  Name: String
  Desc: String
  Size: String
  Ext: String
  IsAvailable: Boolean
  RevNo: Int!
  DateCreated: DateTime!
  DateModified: DateTime
  ModifiedUid: ID
  ActionUid: ID
  ActionDate: DateTime
  IsPublished: Boolean!
  DatePublished: DateTime
  PublishedUid: ID
  IsLocked: Boolean!
  RoutingComplete: Boolean
  RoutingDateCompleted: DateTime
  IsKm: Boolean
  DateAddedToKm: DateTime
  KmAddedByUid: ID
  RefId: Int!
  IsDeleted: Boolean!
  DeletedDate: DateTime
  DeletedUid: ID
  WfApproversCanCurEdit: Boolean
  WfAuthorCanCurEdit: Boolean
  ExternalUrl: String
  SourceFileSource: FileSource!
  Source: Int!
  FileOnFileReferences(after: String, first: Int, before: String, last: Int, sort: [FileReferenceOrderBy], filter: FileReferenceExpression): FileReferenceConnection!
  FileOnFileTexts(after: String, first: Int, before: String, last: Int, sort: [FileTextOrderBy], filter: FileTextExpression): FileTextConnection!
  FileOnKmFilesUserStatuses(after: String, first: Int, before: String, last: Int, sort: [KmFilesUserStatusOrderBy], filter: KmFilesUserStatusExpression): KmFilesUserStatusConnection!
  FileOnRevs(after: String, first: Int, before: String, last: Int, sort: [RevOrderBy], filter: RevExpression): RevConnection!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge"""
  node: File

  """A cursor for use in pagination"""
  cursor: String!
}

input FileExpression {
  operator: Operator!
  operands: [FileOperand]!
}

enum FileField {
  id
  Id
  Uid
  Tid
  FoldId
  RoutingId
  Name
  Desc
  Size
  Ext
  IsAvailable
  RevNo
  DateCreated
  DateModified
  ModifiedUid
  ActionUid
  ActionDate
  IsPublished
  DatePublished
  PublishedUid
  IsLocked
  RoutingComplete
  RoutingDateCompleted
  IsKm
  DateAddedToKm
  KmAddedByUid
  RefId
  IsDeleted
  DeletedDate
  DeletedUid
  WfApproversCanCurEdit
  WfAuthorCanCurEdit
  ExternalUrl
  Source
}

input FileOperand {
  field: FileField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FileExpression
}

input FileOrderBy {
  field: FileField
  direction: OrderByDirection = Ascending
}

type FileReference implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Component: Component!
  ComponentId: Int!
  File: File!
  FileId: ID!
  ItemId: Int!
}

"""A connection to a list of items."""
type FileReferenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileReferenceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FileReferenceEdge {
  """The item at the end of the edge"""
  node: FileReference

  """A cursor for use in pagination"""
  cursor: String!
}

input FileReferenceExpression {
  operator: Operator!
  operands: [FileReferenceOperand]!
}

enum FileReferenceField {
  id
  Id
  ComponentId
  FileId
  ItemId
}

input FileReferenceOperand {
  field: FileReferenceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FileReferenceExpression
}

input FileReferenceOrderBy {
  field: FileReferenceField
  direction: OrderByDirection = Ascending
}

type FileSource implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  IsExternal: Boolean!
  SourceFileSourceOnAttachments(after: String, first: Int, before: String, last: Int, sort: [AttachmentOrderBy], filter: AttachmentExpression): AttachmentConnection!
  SourceFileSourceOnFiles(after: String, first: Int, before: String, last: Int, sort: [FileOrderBy], filter: FileExpression): FileConnection!
}

"""A connection to a list of items."""
type FileSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileSourceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FileSourceEdge {
  """The item at the end of the edge"""
  node: FileSource

  """A cursor for use in pagination"""
  cursor: String!
}

input FileSourceExpression {
  operator: Operator!
  operands: [FileSourceOperand]!
}

enum FileSourceField {
  id
  Id
  Name
  IsExternal
}

input FileSourceOperand {
  field: FileSourceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FileSourceExpression
}

input FileSourceOrderBy {
  field: FileSourceField
  direction: OrderByDirection = Ascending
}

type FileText implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  File: File!
  FileId: ID!
  RevisionRev: Rev!
  RevisionId: ID!
  Text: String!
}

"""A connection to a list of items."""
type FileTextConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileTextEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FileTextEdge {
  """The item at the end of the edge"""
  node: FileText

  """A cursor for use in pagination"""
  cursor: String!
}

input FileTextExpression {
  operator: Operator!
  operands: [FileTextOperand]!
}

enum FileTextField {
  id
  Id
  FileId
  RevisionId
  Text
}

input FileTextOperand {
  field: FileTextField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FileTextExpression
}

input FileTextOrderBy {
  field: FileTextField
  direction: OrderByDirection = Ascending
}

type Flag implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  Component: Component!
  ComponentId: Int!
  DateCreated: DateTime!
  ItemId: Int!
}

"""A connection to a list of items."""
type FlagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FlagEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FlagEdge {
  """The item at the end of the edge"""
  node: Flag

  """A cursor for use in pagination"""
  cursor: String!
}

input FlagExpression {
  operator: Operator!
  operands: [FlagOperand]!
}

enum FlagField {
  id
  Id
  Uid
  ComponentId
  DateCreated
  ItemId
}

input FlagOperand {
  field: FlagField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FlagExpression
}

input FlagOrderBy {
  field: FlagField
  direction: OrderByDirection = Ascending
}

type Folder implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  Uid: ID!
  Tid: Int!
  Pid: ID
  Name: String!
  Path: String
  Level: Int!
  DateCreated: DateTime
  IsDeleted: Boolean!
  DeletedDate: DateTime
  DeletedUid: ID
  RefId: Int!
  ModifiedDate: DateTime!
  ModifiedUid: ID!
  PathIDs: String
  FoldFolderOnFiles(after: String, first: Int, before: String, last: Int, sort: [FileOrderBy], filter: FileExpression): FileConnection
}

"""A connection to a list of items."""
type FolderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FolderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FolderEdge {
  """The item at the end of the edge"""
  node: Folder

  """A cursor for use in pagination"""
  cursor: String!
}

input FolderExpression {
  operator: Operator!
  operands: [FolderOperand]!
}

enum FolderField {
  id
  Id
  Uid
  Tid
  Pid
  Name
  Path
  Level
  DateCreated
  IsDeleted
  DeletedDate
  DeletedUid
  RefId
  ModifiedDate
  ModifiedUid
  PathIDs
}

input FolderOperand {
  field: FolderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FolderExpression
}

input FolderOrderBy {
  field: FolderField
  direction: OrderByDirection = Ascending
}

type FoldersFilesView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ItemId: ID!
  ParentItemId: ID
  ItemType: Int!
  Name: String
  Extension: String
  Path: String
  CreatedDate: DateTime
  CreatedFullName: String
  CreatedUid: ID!
  ModifiedDate: DateTime
  ModifiedFullName: String
  ModifiedUid: ID!
  ProjectId: Int!
  ContentType: Int
  SerialNumber: Int
  TotalContentLength: Int
  FileAttributes: Int!
  RevisionId: ID
}

"""A connection to a list of items."""
type FoldersFilesViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FoldersFilesViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FoldersFilesViewEdge {
  """The item at the end of the edge"""
  node: FoldersFilesView

  """A cursor for use in pagination"""
  cursor: String!
}

input FoldersFilesViewExpression {
  operator: Operator!
  operands: [FoldersFilesViewOperand]!
}

enum FoldersFilesViewField {
  id
  ItemId
  ParentItemId
  ItemType
  Name
  Extension
  Path
  CreatedDate
  CreatedFullName
  CreatedUid
  ModifiedDate
  ModifiedFullName
  ModifiedUid
  ProjectId
  ContentType
  SerialNumber
  TotalContentLength
  FileAttributes
  RevisionId
}

input FoldersFilesViewOperand {
  field: FoldersFilesViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FoldersFilesViewExpression
}

input FoldersFilesViewOrderBy {
  field: FoldersFilesViewField
  direction: OrderByDirection = Ascending
}

type ForComment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ThreadForPost: ForPost!
  ThreadId: Int!
  ForPost: ForPost!
  PostId: Int!
  Comments: String
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
}

"""A connection to a list of items."""
type ForCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ForCommentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ForCommentEdge {
  """The item at the end of the edge"""
  node: ForComment

  """A cursor for use in pagination"""
  cursor: String!
}

input ForCommentExpression {
  operator: Operator!
  operands: [ForCommentOperand]!
}

enum ForCommentField {
  id
  Id
  Beid
  ThreadId
  PostId
  Comments
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ForCommentOperand {
  field: ForCommentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ForCommentExpression
}

input ForCommentOrderBy {
  field: ForCommentField
  direction: OrderByDirection = Ascending
}

type ForForum implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ForumId: Int!
  ForumBeBillableEntity: BillableEntity
  ForumBeid: ID
  DisplayName: String
  LastPostId: Int
  LastPostDate: DateTime
  LastPostUid: ID
  LastThreadPostId: Int
  LastThreadPostDate: DateTime
  LastThreadUid: ID
  Status: Int
  ThreadCount: Int
  PostCount: Int
  IpAddress: String
  IsActive: Boolean
  DateCreated: DateTime
  DateModified: DateTime
  CreateUid: ID
  ModifiedUid: ID
  SortOrder: Int
  ShortDesc: String
  LastPostTitle: String
  LastThreadTitle: String
  IsPrivate: Boolean
  IsPublic: Boolean!
  IsDeleted: Boolean!
  IsRoot: Boolean!
  ForForumOnForNotifications(after: String, first: Int, before: String, last: Int, sort: [ForNotificationOrderBy], filter: ForNotificationExpression): ForNotificationConnection
  ForForumOnForPosts(after: String, first: Int, before: String, last: Int, sort: [ForPostOrderBy], filter: ForPostExpression): ForPostConnection
}

"""A connection to a list of items."""
type ForForumConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ForForumEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ForForumEdge {
  """The item at the end of the edge"""
  node: ForForum

  """A cursor for use in pagination"""
  cursor: String!
}

input ForForumExpression {
  operator: Operator!
  operands: [ForForumOperand]!
}

enum ForForumField {
  id
  ForumId
  ForumBeid
  DisplayName
  LastPostId
  LastPostDate
  LastPostUid
  LastThreadPostId
  LastThreadPostDate
  LastThreadUid
  Status
  ThreadCount
  PostCount
  IpAddress
  IsActive
  DateCreated
  DateModified
  CreateUid
  ModifiedUid
  SortOrder
  ShortDesc
  LastPostTitle
  LastThreadTitle
  IsPrivate
  IsPublic
  IsDeleted
  IsRoot
}

input ForForumOperand {
  field: ForForumField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ForForumExpression
}

input ForForumOrderBy {
  field: ForForumField
  direction: OrderByDirection = Ascending
}

type Form implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  IsActive: Boolean!
  IsConfigured: Boolean!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  Component: Component!
  ComponentId: Int!
  ShouldExpandHelp: Boolean!
  ServiceId: Int!
  AppApplication: Application!
  AppId: Int!
  SubComponentComponent: Component!
  SubComponentId: Int!
  IsDefaultForApp: Boolean!
  IsDefaultForSubComponent: Boolean!
  IsPinned: Boolean!
  IsVisibleInTdNext: Boolean!
  AllowGroups: Boolean!
  FormOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  FormOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  FormOnServiceFormSettings(after: String, first: Int, before: String, last: Int, sort: [ServiceFormSettingOrderBy], filter: ServiceFormSettingExpression): ServiceFormSettingConnection!
  FormOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection!
  FormOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  FormOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  FormOnTypeFields(after: String, first: Int, before: String, last: Int, sort: [TypeFieldOrderBy], filter: TypeFieldExpression): TypeFieldConnection!
}

"""A connection to a list of items."""
type FormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FormEdge {
  """The item at the end of the edge"""
  node: Form

  """A cursor for use in pagination"""
  cursor: String!
}

input FormExpression {
  operator: Operator!
  operands: [FormOperand]!
}

enum FormField {
  id
  Id
  Beid
  Name
  IsActive
  IsConfigured
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  ComponentId
  ShouldExpandHelp
  ServiceId
  AppId
  SubComponentId
  IsDefaultForApp
  IsDefaultForSubComponent
  IsPinned
  IsVisibleInTdNext
  AllowGroups
}

input FormOperand {
  field: FormField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FormExpression
}

input FormOrderBy {
  field: FormField
  direction: OrderByDirection = Ascending
}

type ForNotification implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  ForForum: ForForum
  ForumId: Int
  ThreadForPost: ForPost
  ThreadId: Int
  ForPost: ForPost
  PostId: Int
}

"""A connection to a list of items."""
type ForNotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ForNotificationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ForNotificationEdge {
  """The item at the end of the edge"""
  node: ForNotification

  """A cursor for use in pagination"""
  cursor: String!
}

input ForNotificationExpression {
  operator: Operator!
  operands: [ForNotificationOperand]!
}

enum ForNotificationField {
  id
  Id
  Uid
  ForumId
  ThreadId
  PostId
}

input ForNotificationOperand {
  field: ForNotificationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ForNotificationExpression
}

input ForNotificationOrderBy {
  field: ForNotificationField
  direction: OrderByDirection = Ascending
}

type ForPost implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  PostId: Int!
  ForForum: ForForum
  ForumId: Int
  ThreadPostId: Int
  Uid: ID
  Status: Int
  Title: String
  PostDate: DateTime
  Body: String
  SendReplyNotification: Boolean
  AdminNotes: String
  LastPostId: Int
  LastPostDate: DateTime
  LastPostUid: ID
  RepliesCount: Int
  IsParked: Boolean
  IpAddress: String
  IsActive: Boolean
  DateCreated: DateTime
  DateModified: DateTime
  CreateUid: ID
  ModifiedUid: ID
  ForumBeid: ID
  AskedByUid: ID
  IsDeleted: Boolean!
  IsAcceptedAnswer: Boolean!
  AnswerAcceptedDateUtc: DateTime
  AnswerAcceptedUid: ID
  ForPostOnForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection!
  ThreadForPostOnForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection!
  ThreadForPostOnForNotifications(after: String, first: Int, before: String, last: Int, sort: [ForNotificationOrderBy], filter: ForNotificationExpression): ForNotificationConnection
  ForPostOnForNotifications(after: String, first: Int, before: String, last: Int, sort: [ForNotificationOrderBy], filter: ForNotificationExpression): ForNotificationConnection
}

"""A connection to a list of items."""
type ForPostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ForPostEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ForPostEdge {
  """The item at the end of the edge"""
  node: ForPost

  """A cursor for use in pagination"""
  cursor: String!
}

input ForPostExpression {
  operator: Operator!
  operands: [ForPostOperand]!
}

enum ForPostField {
  id
  PostId
  ForumId
  ThreadPostId
  Uid
  Status
  Title
  PostDate
  Body
  SendReplyNotification
  AdminNotes
  LastPostId
  LastPostDate
  LastPostUid
  RepliesCount
  IsParked
  IpAddress
  IsActive
  DateCreated
  DateModified
  CreateUid
  ModifiedUid
  ForumBeid
  AskedByUid
  IsDeleted
  IsAcceptedAnswer
  AnswerAcceptedDateUtc
  AnswerAcceptedUid
}

input ForPostOperand {
  field: ForPostField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ForPostExpression
}

input ForPostOrderBy {
  field: ForPostField
  direction: OrderByDirection = Ascending
}

type FunctionalRole implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  StandRate: Decimal!
  CostRate: Decimal!
  DateCreated: DateTime!
  DateModified: DateTime!
  Comments: String
  FrFunctionalRoleOnFunctionalRolesUsers(after: String, first: Int, before: String, last: Int, sort: [FunctionalRolesUserOrderBy], filter: FunctionalRolesUserExpression): FunctionalRolesUserConnection!
  RequestedFrFunctionalRoleOnResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection!
}

"""A connection to a list of items."""
type FunctionalRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FunctionalRoleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FunctionalRoleEdge {
  """The item at the end of the edge"""
  node: FunctionalRole

  """A cursor for use in pagination"""
  cursor: String!
}

input FunctionalRoleExpression {
  operator: Operator!
  operands: [FunctionalRoleOperand]!
}

enum FunctionalRoleField {
  id
  Id
  Beid
  Name
  StandRate
  CostRate
  DateCreated
  DateModified
  Comments
}

input FunctionalRoleOperand {
  field: FunctionalRoleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FunctionalRoleExpression
}

input FunctionalRoleOrderBy {
  field: FunctionalRoleField
  direction: OrderByDirection = Ascending
}

type FunctionalRolesUser implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  FrFunctionalRole: FunctionalRole!
  Frid: Int!
  UidUser: User!
  Uid: ID!
  DateCreated: DateTime!
  IsPrimary: Boolean!
}

"""A connection to a list of items."""
type FunctionalRolesUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FunctionalRolesUserEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type FunctionalRolesUserEdge {
  """The item at the end of the edge"""
  node: FunctionalRolesUser

  """A cursor for use in pagination"""
  cursor: String!
}

input FunctionalRolesUserExpression {
  operator: Operator!
  operands: [FunctionalRolesUserOperand]!
}

enum FunctionalRolesUserField {
  id
  Id
  Frid
  Uid
  DateCreated
  IsPrimary
}

input FunctionalRolesUserOperand {
  field: FunctionalRolesUserField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: FunctionalRolesUserExpression
}

input FunctionalRolesUserOrderBy {
  field: FunctionalRolesUserField
  direction: OrderByDirection = Ascending
}

type Goal implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity
  Beid: ID
  Name: String
  CreatedByUidUser: User
  CreatedByUid: ID
  ModifiedByUidUser: User
  ModifiedByUid: ID
  DateCreated: DateTime!
  DateModified: DateTime
  IsActive: Boolean!
  GoalOnProjectGoals(after: String, first: Int, before: String, last: Int, sort: [ProjectGoalOrderBy], filter: ProjectGoalExpression): ProjectGoalConnection!
}

"""A connection to a list of items."""
type GoalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoalEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type GoalEdge {
  """The item at the end of the edge"""
  node: Goal

  """A cursor for use in pagination"""
  cursor: String!
}

input GoalExpression {
  operator: Operator!
  operands: [GoalOperand]!
}

enum GoalField {
  id
  Id
  Beid
  Name
  CreatedByUid
  ModifiedByUid
  DateCreated
  DateModified
  IsActive
}

input GoalOperand {
  field: GoalField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: GoalExpression
}

input GoalOrderBy {
  field: GoalField
  direction: OrderByDirection = Ascending
}

type Group implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  IsActive: Boolean!
  CreatedDate: DateTime!
  CreatedByUid: ID!
  ModifiedDate: DateTime!
  ModifiedByUid: ID!
  IsTicketingGroup: Boolean!
  ExternalId: String
  NewRespGroupGroupOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  OwningGroupGroupOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  GroupOnGroupItems(after: String, first: Int, before: String, last: Int, sort: [GroupItemOrderBy], filter: GroupItemExpression): GroupItemConnection!
  ReviewingGroupGroupOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection!
  ResponsibleGrpGroupOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  ResponsibleGroupGroupOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  ResponsibleGrpGroupOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  ResponsibleGroupGroupOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  GroupOnTypesGroups(after: String, first: Int, before: String, last: Int, sort: [TypesGroupOrderBy], filter: TypesGroupExpression): TypesGroupConnection!
  ResponsibleGroupGroupOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection
  GrpGroupOnUserGroups(after: String, first: Int, before: String, last: Int, sort: [UserGroupOrderBy], filter: UserGroupExpression): UserGroupConnection!
  PrimaryGroupGroupOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge"""
  node: Group

  """A cursor for use in pagination"""
  cursor: String!
}

input GroupExpression {
  operator: Operator!
  operands: [GroupOperand]!
}

enum GroupField {
  id
  Id
  Beid
  Name
  Description
  IsActive
  CreatedDate
  CreatedByUid
  ModifiedDate
  ModifiedByUid
  IsTicketingGroup
  ExternalId
}

type GroupItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  Group: Group!
  GroupId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type GroupItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type GroupItemEdge {
  """The item at the end of the edge"""
  node: GroupItem

  """A cursor for use in pagination"""
  cursor: String!
}

input GroupItemExpression {
  operator: Operator!
  operands: [GroupItemOperand]!
}

enum GroupItemField {
  id
  Id
  ItemId
  ComponentId
  GroupId
  CreatedDate
  CreatedUid
}

input GroupItemOperand {
  field: GroupItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: GroupItemExpression
}

input GroupItemOrderBy {
  field: GroupItemField
  direction: OrderByDirection = Ascending
}

input GroupOperand {
  field: GroupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: GroupExpression
}

input GroupOrderBy {
  field: GroupField
  direction: OrderByDirection = Ascending
}

type HealthChoice implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Description: String!
  Order: Int!
  NewHealthHealthChoiceOnProjectHealthHistories(after: String, first: Int, before: String, last: Int, sort: [ProjectHealthHistoryOrderBy], filter: ProjectHealthHistoryExpression): ProjectHealthHistoryConnection!
  OldHealthHealthChoiceOnProjectHealthHistories(after: String, first: Int, before: String, last: Int, sort: [ProjectHealthHistoryOrderBy], filter: ProjectHealthHistoryExpression): ProjectHealthHistoryConnection!
  HealthHealthChoiceOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection!
}

"""A connection to a list of items."""
type HealthChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HealthChoiceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type HealthChoiceEdge {
  """The item at the end of the edge"""
  node: HealthChoice

  """A cursor for use in pagination"""
  cursor: String!
}

input HealthChoiceExpression {
  operator: Operator!
  operands: [HealthChoiceOperand]!
}

enum HealthChoiceField {
  id
  Id
  Name
  Description
  Order
}

input HealthChoiceOperand {
  field: HealthChoiceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: HealthChoiceExpression
}

input HealthChoiceOrderBy {
  field: HealthChoiceField
  direction: OrderByDirection = Ascending
}

type Image implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Guid: ID!
  Path: String!
  EditorKey: ID
  CreatedDateUtc: DateTime!
  CreatedByUserUser: User!
  CreatedByUserId: ID!
  ImageOnItemImages(after: String, first: Int, before: String, last: Int, sort: [ItemImageOrderBy], filter: ItemImageExpression): ItemImageConnection!
}

"""A connection to a list of items."""
type ImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ImageEdge {
  """The item at the end of the edge"""
  node: Image

  """A cursor for use in pagination"""
  cursor: String!
}

input ImageExpression {
  operator: Operator!
  operands: [ImageOperand]!
}

enum ImageField {
  id
  Id
  Guid
  Path
  EditorKey
  CreatedDateUtc
  CreatedByUserId
}

input ImageOperand {
  field: ImageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ImageExpression
}

input ImageOrderBy {
  field: ImageField
  direction: OrderByDirection = Ascending
}

type ImMessage implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SessionId: ID
  MessageText: String
  IsDelivered: Boolean
  PostDate: DateTime
  DeliveredDate: DateTime
  From: ID
  To: ID
}

"""A connection to a list of items."""
type ImMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImMessageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ImMessageEdge {
  """The item at the end of the edge"""
  node: ImMessage

  """A cursor for use in pagination"""
  cursor: String!
}

input ImMessageExpression {
  operator: Operator!
  operands: [ImMessageOperand]!
}

enum ImMessageField {
  id
  Id
  SessionId
  MessageText
  IsDelivered
  PostDate
  DeliveredDate
  From
  To
}

input ImMessageOperand {
  field: ImMessageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ImMessageExpression
}

input ImMessageOrderBy {
  field: ImMessageField
  direction: OrderByDirection = Ascending
}

type ImportTask implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
  FilePath: String!
  Status: String!
  StartTimeUtc: DateTime
  EndTimeUtc: DateTime
  HasErrors: Boolean!
  Errors: String
  NotifyEmail: String
  SettingsFilePath: String
  TypeId: Int!
  TryCount: Int!
}

"""A connection to a list of items."""
type ImportTaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImportTaskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ImportTaskEdge {
  """The item at the end of the edge"""
  node: ImportTask

  """A cursor for use in pagination"""
  cursor: String!
}

input ImportTaskExpression {
  operator: Operator!
  operands: [ImportTaskOperand]!
}

enum ImportTaskField {
  id
  Id
  BeidInt
  CreatedUid
  CreatedDateUtc
  ModifiedDateUtc
  FilePath
  Status
  StartTimeUtc
  EndTimeUtc
  HasErrors
  Errors
  NotifyEmail
  SettingsFilePath
  TypeId
  TryCount
}

input ImportTaskOperand {
  field: ImportTaskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ImportTaskExpression
}

input ImportTaskOrderBy {
  field: ImportTaskField
  direction: OrderByDirection = Ascending
}

type Industry implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Name: String
  DateCreated: DateTime
  DateModified: DateTime
  IndIndustryOnClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ClientAcctCodeOrderBy], filter: ClientAcctCodeExpression): ClientAcctCodeConnection
}

"""A connection to a list of items."""
type IndustryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IndustryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IndustryEdge {
  """The item at the end of the edge"""
  node: Industry

  """A cursor for use in pagination"""
  cursor: String!
}

input IndustryExpression {
  operator: Operator!
  operands: [IndustryOperand]!
}

enum IndustryField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
}

input IndustryOperand {
  field: IndustryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IndustryExpression
}

input IndustryOrderBy {
  field: IndustryField
  direction: OrderByDirection = Ascending
}

type Integration implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  AppApplication: Application!
  AppId: Int!
  Component: Component!
  ComponentId: Int!
  TypeIntegrationType: IntegrationType!
  TypeId: Int!
  IsActive: Boolean!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  EncSettingsJson: String!
  IntegrationOnIntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection!
  IntegrationOnUserIntegrationSettings(after: String, first: Int, before: String, last: Int, sort: [UserIntegrationSettingOrderBy], filter: UserIntegrationSettingExpression): UserIntegrationSettingConnection!
}

"""A connection to a list of items."""
type IntegrationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IntegrationEdge {
  """The item at the end of the edge"""
  node: Integration

  """A cursor for use in pagination"""
  cursor: String!
}

input IntegrationExpression {
  operator: Operator!
  operands: [IntegrationOperand]!
}

enum IntegrationField {
  id
  Id
  Beid
  AppId
  ComponentId
  TypeId
  IsActive
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  EncSettingsJson
}

input IntegrationOperand {
  field: IntegrationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IntegrationExpression
}

input IntegrationOrderBy {
  field: IntegrationField
  direction: OrderByDirection = Ascending
}

type IntegrationSession implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SessionId: ID!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Integration: Integration!
  IntegrationId: Int!
  AppApplication: Application!
  AppId: Int!
  Component: Component!
  ComponentId: Int!
  ItemId: Int!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  IsComplete: Boolean!
  CompletedDateUtc: DateTime
  SessionDataJson: String
}

"""A connection to a list of items."""
type IntegrationSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationSessionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IntegrationSessionEdge {
  """The item at the end of the edge"""
  node: IntegrationSession

  """A cursor for use in pagination"""
  cursor: String!
}

input IntegrationSessionExpression {
  operator: Operator!
  operands: [IntegrationSessionOperand]!
}

enum IntegrationSessionField {
  id
  Id
  SessionId
  Beid
  IntegrationId
  AppId
  ComponentId
  ItemId
  CreatedDateUtc
  CreatedUid
  IsComplete
  CompletedDateUtc
  SessionDataJson
}

input IntegrationSessionOperand {
  field: IntegrationSessionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IntegrationSessionExpression
}

input IntegrationSessionOrderBy {
  field: IntegrationSessionField
  direction: OrderByDirection = Ascending
}

type IntegrationType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeIntegrationTypeOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
}

"""A connection to a list of items."""
type IntegrationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IntegrationTypeEdge {
  """The item at the end of the edge"""
  node: IntegrationType

  """A cursor for use in pagination"""
  cursor: String!
}

input IntegrationTypeExpression {
  operator: Operator!
  operands: [IntegrationTypeOperand]!
}

enum IntegrationTypeField {
  id
  Id
  Name
}

input IntegrationTypeOperand {
  field: IntegrationTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IntegrationTypeExpression
}

input IntegrationTypeOrderBy {
  field: IntegrationTypeField
  direction: OrderByDirection = Ascending
}

type InternalType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ItId: String!
  InternalTypeInternalTypeOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection
}

"""A connection to a list of items."""
type InternalTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InternalTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type InternalTypeEdge {
  """The item at the end of the edge"""
  node: InternalType

  """A cursor for use in pagination"""
  cursor: String!
}

input InternalTypeExpression {
  operator: Operator!
  operands: [InternalTypeOperand]!
}

enum InternalTypeField {
  id
  ItId
}

input InternalTypeOperand {
  field: InternalTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: InternalTypeExpression
}

input InternalTypeOrderBy {
  field: InternalTypeField
  direction: OrderByDirection = Ascending
}

type InvoiceHeader implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Cacid: Int!
  StartDate: DateTime!
  EndDate: DateTime!
  Team: String!
  ContactName: String!
  DateCreated: DateTime!
  StatusId: Int!
  ClientName: String
  ContactEmail: String
  Addr1: String
  Addr2: String
  Addr3: String
  Addr4: String
  AcctCode: String
  SubTotal: Decimal
  Adjustment: Decimal
  Status: String!
  Amount: Decimal
  Terms: Int
  DueDate: DateTime
  City: String
  State: String
  PostalCode: String
  Country: String
  Tid: String
  InvoiceNumber: Int
  Comments: String
  InvoiceDate: DateTime
  PaymentTypeId: Int
  TicketId: String
  InvhInvoiceHeaderOnAdjustments(after: String, first: Int, before: String, last: Int, sort: [AdjustmentOrderBy], filter: AdjustmentExpression): AdjustmentConnection!
}

"""A connection to a list of items."""
type InvoiceHeaderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceHeaderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type InvoiceHeaderEdge {
  """The item at the end of the edge"""
  node: InvoiceHeader

  """A cursor for use in pagination"""
  cursor: String!
}

input InvoiceHeaderExpression {
  operator: Operator!
  operands: [InvoiceHeaderOperand]!
}

enum InvoiceHeaderField {
  id
  Id
  Beid
  Cacid
  StartDate
  EndDate
  Team
  ContactName
  DateCreated
  StatusId
  ClientName
  ContactEmail
  Addr1
  Addr2
  Addr3
  Addr4
  AcctCode
  SubTotal
  Adjustment
  Status
  Amount
  Terms
  DueDate
  City
  State
  PostalCode
  Country
  Tid
  InvoiceNumber
  Comments
  InvoiceDate
  PaymentTypeId
  TicketId
}

input InvoiceHeaderOperand {
  field: InvoiceHeaderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: InvoiceHeaderExpression
}

input InvoiceHeaderOrderBy {
  field: InvoiceHeaderField
  direction: OrderByDirection = Ascending
}

type InvoiceSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  RemitAddr1: String
  RemitAddr2: String
  RemitAddr3: String
  RemitAddr4: String
  RemitAddr5: String
  Terms: Int
  TxRate: Decimal
  ArAccount: String
  LastInvoiceNumber: Int
  HeaderText: String
  ApAccount: String
  BankAccount: String
  QbVersion: String
  QbRelease: String
  QbCompanyName: String
  QbCompanyCreateTime: String
}

"""A connection to a list of items."""
type InvoiceSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type InvoiceSettingEdge {
  """The item at the end of the edge"""
  node: InvoiceSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input InvoiceSettingExpression {
  operator: Operator!
  operands: [InvoiceSettingOperand]!
}

enum InvoiceSettingField {
  id
  Id
  Beid
  RemitAddr1
  RemitAddr2
  RemitAddr3
  RemitAddr4
  RemitAddr5
  Terms
  TxRate
  ArAccount
  LastInvoiceNumber
  HeaderText
  ApAccount
  BankAccount
  QbVersion
  QbRelease
  QbCompanyName
  QbCompanyCreateTime
}

input InvoiceSettingOperand {
  field: InvoiceSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: InvoiceSettingExpression
}

input InvoiceSettingOrderBy {
  field: InvoiceSettingField
  direction: OrderByDirection = Ascending
}

type IowaActualHoursReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserFullName: String
  UserFirstName: String
  UserLastName: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserShouldReportTime: Boolean!
  ReportsToUid: ID
  ReportsToUserFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  ProjectId: Int!
  ProjectName: String
  TicketId: Int!
  TicketTitle: String
  ItemId: Int!
  ItemTitle: String
  ItemType: String
  TimeAccountId: Int
  TimeAccountName: String!
  Description: String
  StatusId: Int!
  StatusDate: DateTime
  StatusName: String!
  SubmittedDate: DateTime
  CreatedDate: DateTime!
  TimeDate: DateTime!
  IsBillable: Boolean!
  IsTimeOff: Boolean
  Hours: Decimal
  Year: Int
  Month: DateTime
  AccountId: Int
  AccountName: String
  PlanId: Int
  PlanName: String
  ServiceId: Int
  ServiceCategoryId: Int
  TypeId: Int
  TypeName: String
  ProjectClassification: String
  DeptCode: String
  SubDepartment: String
  TimeAcctCode: String!
  OrganizationalId: String
  AlternateId: String
  TopLevelCode: String
  CrossOrgCode: String
  Mfk: String
  TransactionCode: String
  Classification: String
  JobCode: String
  UserBillRate: Decimal
  UserCostRate: Decimal
  UserTitle: String
  UserDefaultAccountId: Int!
  UserDefaultAccountName: String
}

"""A connection to a list of items."""
type IowaActualHoursReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IowaActualHoursReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IowaActualHoursReportViewEdge {
  """The item at the end of the edge"""
  node: IowaActualHoursReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input IowaActualHoursReportViewExpression {
  operator: Operator!
  operands: [IowaActualHoursReportViewOperand]!
}

enum IowaActualHoursReportViewField {
  id
  Beid
  UserUid
  UserFullName
  UserFirstName
  UserLastName
  IsActive
  Company
  IsEmployee
  UserShouldReportTime
  ReportsToUid
  ReportsToUserFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportStartDate
  TimeReportEndDate
  ProjectId
  ProjectName
  TicketId
  TicketTitle
  ItemId
  ItemTitle
  ItemType
  TimeAccountId
  TimeAccountName
  Description
  StatusId
  StatusDate
  StatusName
  SubmittedDate
  CreatedDate
  TimeDate
  IsBillable
  IsTimeOff
  Hours
  Year
  Month
  AccountId
  AccountName
  PlanId
  PlanName
  ServiceId
  ServiceCategoryId
  TypeId
  TypeName
  ProjectClassification
  DeptCode
  SubDepartment
  TimeAcctCode
  OrganizationalId
  AlternateId
  TopLevelCode
  CrossOrgCode
  Mfk
  TransactionCode
  Classification
  JobCode
  UserBillRate
  UserCostRate
  UserTitle
  UserDefaultAccountId
  UserDefaultAccountName
}

input IowaActualHoursReportViewOperand {
  field: IowaActualHoursReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IowaActualHoursReportViewExpression
}

input IowaActualHoursReportViewOrderBy {
  field: IowaActualHoursReportViewField
  direction: OrderByDirection = Ascending
}

type IowaUsersByTeamReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ProjectId: Int!
  ProjectName: String!
  ItemType: String
  UserUid: ID!
  UserFullName: String
  ManagerUid: ID!
  Manager: String
  AlternateManagerUid: ID
  AlternateManager: String
  IsManager: Boolean
  IsAlternateManager: Boolean
}

"""A connection to a list of items."""
type IowaUsersByTeamReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IowaUsersByTeamReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IowaUsersByTeamReportViewEdge {
  """The item at the end of the edge"""
  node: IowaUsersByTeamReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input IowaUsersByTeamReportViewExpression {
  operator: Operator!
  operands: [IowaUsersByTeamReportViewOperand]!
}

enum IowaUsersByTeamReportViewField {
  id
  ProjectId
  ProjectName
  ItemType
  UserUid
  UserFullName
  ManagerUid
  Manager
  AlternateManagerUid
  AlternateManager
  IsManager
  IsAlternateManager
}

input IowaUsersByTeamReportViewOperand {
  field: IowaUsersByTeamReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IowaUsersByTeamReportViewExpression
}

input IowaUsersByTeamReportViewOrderBy {
  field: IowaUsersByTeamReportViewField
  direction: OrderByDirection = Ascending
}

type Issue implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  SueId: Int!
  IcIssueCategory: IssueCategory!
  Icid: Int!
  Uid: ID!
  Tid: Int!
  Subject: String
  DateCreated: DateTime
  Desc: String
  Resp: ID
  IssStatus: Status
  Issid: Int
  StatusDate: DateTime
  DueDate: DateTime
  IspIssuePriority: IssuePriority
  Ispid: Int
  DateModified: DateTime
  ModifiedBy: ID
  EstWork: Float
  LastUpdateId: Int
  LastUpdateComments: String
  LastUpdateDateCreated: DateTime
  LastUpdateUid: ID
  ActualMinutes: Int!
  StartDate: DateTime
  CompletedDate: DateTime
  CompletedUid: ID
  Beid: ID!
  ParentId: Int
  ComponentId: Int!
  Impact: Decimal
  Probability: Decimal
  Urgency: Decimal
  IsOpportunity: Boolean!
  ResponseStrategy: ResponseStrategy
  ResponseStrategyId: Int
  IsIssueOnIssueUserAlerts(after: String, first: Int, before: String, last: Int, sort: [IssueUserAlertOrderBy], filter: IssueUserAlertExpression): IssueUserAlertConnection!
  IsIssueOnTasksIssues(after: String, first: Int, before: String, last: Int, sort: [TasksIssueOrderBy], filter: TasksIssueExpression): TasksIssueConnection!
}

type IssueCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  Tid: Int!
  Name: String
  DateCreated: DateTime
  DateModified: DateTime
  ComponentId: Int!
  IcIssueCategoryOnIssues(after: String, first: Int, before: String, last: Int, sort: [IssueOrderBy], filter: IssueExpression): IssueConnection!
}

"""A connection to a list of items."""
type IssueCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssueCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IssueCategoryEdge {
  """The item at the end of the edge"""
  node: IssueCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input IssueCategoryExpression {
  operator: Operator!
  operands: [IssueCategoryOperand]!
}

enum IssueCategoryField {
  id
  Id
  Uid
  Tid
  Name
  DateCreated
  DateModified
  ComponentId
}

input IssueCategoryOperand {
  field: IssueCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IssueCategoryExpression
}

input IssueCategoryOrderBy {
  field: IssueCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type IssueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssueEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IssueEdge {
  """The item at the end of the edge"""
  node: Issue

  """A cursor for use in pagination"""
  cursor: String!
}

input IssueExpression {
  operator: Operator!
  operands: [IssueOperand]!
}

enum IssueField {
  id
  SueId
  Icid
  Uid
  Tid
  Subject
  DateCreated
  Desc
  Resp
  Issid
  StatusDate
  DueDate
  Ispid
  DateModified
  ModifiedBy
  EstWork
  LastUpdateId
  LastUpdateComments
  LastUpdateDateCreated
  LastUpdateUid
  ActualMinutes
  StartDate
  CompletedDate
  CompletedUid
  Beid
  ParentId
  ComponentId
  Impact
  Probability
  Urgency
  IsOpportunity
  ResponseStrategyId
}

input IssueOperand {
  field: IssueField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IssueExpression
}

input IssueOrderBy {
  field: IssueField
  direction: OrderByDirection = Ascending
}

type IssuePriority implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Value: String
  DateCreated: DateTime!
  MyWorkPriorityId: Int
  IspIssuePriorityOnIssues(after: String, first: Int, before: String, last: Int, sort: [IssueOrderBy], filter: IssueExpression): IssueConnection
}

"""A connection to a list of items."""
type IssuePriorityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssuePriorityEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IssuePriorityEdge {
  """The item at the end of the edge"""
  node: IssuePriority

  """A cursor for use in pagination"""
  cursor: String!
}

input IssuePriorityExpression {
  operator: Operator!
  operands: [IssuePriorityOperand]!
}

enum IssuePriorityField {
  id
  Id
  Name
  Value
  DateCreated
  MyWorkPriorityId
}

input IssuePriorityOperand {
  field: IssuePriorityField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IssuePriorityExpression
}

input IssuePriorityOrderBy {
  field: IssuePriorityField
  direction: OrderByDirection = Ascending
}

type IssuesReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  IssueId: Int!
  Id: Int!
  ModuleTag: Int!
  Beid: ID!
  BeidInt: Int!
  Subject: String
  Description: String
  CategoryName: String
  DateCreated: DateTime
  CreatedByUid: ID!
  CreatedByFullName: String
  DateModified: DateTime
  ModifiedByUid: ID
  ModifiedByFullName: String
  CompletedDate: DateTime
  CompletedUid: ID
  CompletedFullName: String
  LastUpdateText: String
  LastUpdateDate: DateTime
  LastUpdateUid: ID
  LastUpdateFullName: String
  StartDate: DateTime
  DueDate: DateTime
  DaysOld: Int
  ActHours: Decimal
  EstHours: Float
  ResponsibleUid: ID
  ResponsibleFullName: String!
  IsUnassigned: Boolean
  StatusName: String!
  StatusId: Int!
  PriorityName: String!
  PriorityId: String
  TaskId: Int
  PlanId: Int
  PlanName: String
  TaskName: String
  TeamIsActive: Boolean!
  SponsorName: String
  SponsorEmail: String
  ProjectId: Int!
  ProjectName: String!
  ProjectActive: Boolean!
  ProjectDateCreated: DateTime!
  TeamInternalTypeId: String
  ProjectStatusId: Int!
  ProjectStatusName: String!
  ProjectStatusDescription: String
  HealthId: Int!
  ProjectDateStatusModified: DateTime
  ProjectTypeId: Int
  ProjectType: String
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
  AccountId: Int
  ProjectAccountId: Int
  ProjectAccount: String
  ProjectSponsorName: String
  ProjectSponsorEmail: String
  ProjectPriorityId: Int
  ProjectPriorityName: String
  ProjectPriorityOrder: Float
  RiskTitle: String
  RiskId: Int
  HasRisk: Boolean
}

"""A connection to a list of items."""
type IssuesReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssuesReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IssuesReportViewEdge {
  """The item at the end of the edge"""
  node: IssuesReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input IssuesReportViewExpression {
  operator: Operator!
  operands: [IssuesReportViewOperand]!
}

enum IssuesReportViewField {
  id
  IssueId
  Id
  ModuleTag
  Beid
  BeidInt
  Subject
  Description
  CategoryName
  DateCreated
  CreatedByUid
  CreatedByFullName
  DateModified
  ModifiedByUid
  ModifiedByFullName
  CompletedDate
  CompletedUid
  CompletedFullName
  LastUpdateText
  LastUpdateDate
  LastUpdateUid
  LastUpdateFullName
  StartDate
  DueDate
  DaysOld
  ActHours
  EstHours
  ResponsibleUid
  ResponsibleFullName
  IsUnassigned
  StatusName
  StatusId
  PriorityName
  PriorityId
  TaskId
  PlanId
  PlanName
  TaskName
  TeamIsActive
  SponsorName
  SponsorEmail
  ProjectId
  ProjectName
  ProjectActive
  ProjectDateCreated
  TeamInternalTypeId
  ProjectStatusId
  ProjectStatusName
  ProjectStatusDescription
  HealthId
  ProjectDateStatusModified
  ProjectTypeId
  ProjectType
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
  AccountId
  ProjectAccountId
  ProjectAccount
  ProjectSponsorName
  ProjectSponsorEmail
  ProjectPriorityId
  ProjectPriorityName
  ProjectPriorityOrder
  RiskTitle
  RiskId
  HasRisk
}

input IssuesReportViewOperand {
  field: IssuesReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IssuesReportViewExpression
}

input IssuesReportViewOrderBy {
  field: IssuesReportViewField
  direction: OrderByDirection = Ascending
}

type IssueUserAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Alert: Alert!
  AlertId: Int!
  IsIssue: Issue!
  IssueId: Int!
  Uid: ID!
  Status: Int!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type IssueUserAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IssueUserAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type IssueUserAlertEdge {
  """The item at the end of the edge"""
  node: IssueUserAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input IssueUserAlertExpression {
  operator: Operator!
  operands: [IssueUserAlertOperand]!
}

enum IssueUserAlertField {
  id
  Id
  AlertId
  IssueId
  Uid
  Status
  DateCreated
}

input IssueUserAlertOperand {
  field: IssueUserAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: IssueUserAlertExpression
}

input IssueUserAlertOrderBy {
  field: IssueUserAlertField
  direction: OrderByDirection = Ascending
}

type ItemArticle implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: Int!
  ItemComponentId: Int!
  ArticleId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  IsPublic: Boolean!
}

"""A connection to a list of items."""
type ItemArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemArticleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemArticleEdge {
  """The item at the end of the edge"""
  node: ItemArticle

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemArticleExpression {
  operator: Operator!
  operands: [ItemArticleOperand]!
}

enum ItemArticleField {
  id
  Id
  ItemId
  ItemComponentId
  ArticleId
  CreatedUid
  CreatedDateUtc
  IsPublic
}

input ItemArticleOperand {
  field: ItemArticleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemArticleExpression
}

input ItemArticleOrderBy {
  field: ItemArticleField
  direction: OrderByDirection = Ascending
}

type ItemContact implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  UserUidUser: User!
  UserUid: ID!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  Category: String!
  IsPublished: Boolean!
  PublishedUidUser: User
  PublishedUid: ID
  PublishedDateUtc: DateTime
}

"""A connection to a list of items."""
type ItemContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemContactEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemContactEdge {
  """The item at the end of the edge"""
  node: ItemContact

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemContactExpression {
  operator: Operator!
  operands: [ItemContactOperand]!
}

enum ItemContactField {
  id
  Id
  ItemId
  ComponentId
  UserUid
  CreatedUid
  CreatedDateUtc
  Category
  IsPublished
  PublishedUid
  PublishedDateUtc
}

input ItemContactOperand {
  field: ItemContactField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemContactExpression
}

input ItemContactOrderBy {
  field: ItemContactField
  direction: OrderByDirection = Ascending
}

type ItemConversionHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SourceItemId: Int!
  SourceComponentComponent: Component!
  SourceComponentId: Int!
  SourceAppApplication: Application!
  SourceAppId: Int!
  SourceItemTitle: String!
  DestinationItemId: Int!
  DestinationComponentId: Int!
  DestinationAppApplication: Application!
  DestinationAppId: Int!
  DestinationItemTitle: String
  ActionName: String!
  ConvertedUidUser: User!
  ConvertedUid: ID!
  ConvertedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ItemConversionHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemConversionHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemConversionHistoryEdge {
  """The item at the end of the edge"""
  node: ItemConversionHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemConversionHistoryExpression {
  operator: Operator!
  operands: [ItemConversionHistoryOperand]!
}

enum ItemConversionHistoryField {
  id
  Id
  SourceItemId
  SourceComponentId
  SourceAppId
  SourceItemTitle
  DestinationItemId
  DestinationComponentId
  DestinationAppId
  DestinationItemTitle
  ActionName
  ConvertedUid
  ConvertedDateUtc
}

input ItemConversionHistoryOperand {
  field: ItemConversionHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemConversionHistoryExpression
}

input ItemConversionHistoryOrderBy {
  field: ItemConversionHistoryField
  direction: OrderByDirection = Ascending
}

type ItemImage implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: Int!
  ComponentId: Int!
  Image: Image!
  ImageId: Int!
  CreatedDateUtc: DateTime!
  CreatedByUserUser: User!
  CreatedByUserId: ID!
}

"""A connection to a list of items."""
type ItemImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemImageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemImageEdge {
  """The item at the end of the edge"""
  node: ItemImage

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemImageExpression {
  operator: Operator!
  operands: [ItemImageOperand]!
}

enum ItemImageField {
  id
  Id
  ItemId
  ComponentId
  ImageId
  CreatedDateUtc
  CreatedByUserId
}

input ItemImageOperand {
  field: ItemImageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemImageExpression
}

input ItemImageOrderBy {
  field: ItemImageField
  direction: OrderByDirection = Ascending
}

type ItemTag implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Tag: Tag!
  TagId: Int!
  ItemAsset: Asset
  ItemTicket: Ticket
  ItemId: Int!
  ComponentId: Int!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type ItemTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemTagEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemTagEdge {
  """The item at the end of the edge"""
  node: ItemTag

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemTagExpression {
  operator: Operator!
  operands: [ItemTagOperand]!
}

enum ItemTagField {
  id
  Id
  TagId
  ItemId
  ComponentId
  CreatedDateUtc
  CreatedUid
}

input ItemTagOperand {
  field: ItemTagField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemTagExpression
}

input ItemTagOrderBy {
  field: ItemTagField
  direction: OrderByDirection = Ascending
}

type ItemTemplate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  Body: String
  CategoryItemTemplateCategory: ItemTemplateCategory!
  CategoryId: Int!
  Component: Component!
  ComponentId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
}

type ItemTemplateCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  ComponentId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
  CategoryItemTemplateCategoryOnItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection!
}

"""A connection to a list of items."""
type ItemTemplateCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemTemplateCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemTemplateCategoryEdge {
  """The item at the end of the edge"""
  node: ItemTemplateCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemTemplateCategoryExpression {
  operator: Operator!
  operands: [ItemTemplateCategoryOperand]!
}

enum ItemTemplateCategoryField {
  id
  Id
  Beid
  Name
  Description
  ComponentId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ItemTemplateCategoryOperand {
  field: ItemTemplateCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemTemplateCategoryExpression
}

input ItemTemplateCategoryOrderBy {
  field: ItemTemplateCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ItemTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemTemplateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemTemplateEdge {
  """The item at the end of the edge"""
  node: ItemTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemTemplateExpression {
  operator: Operator!
  operands: [ItemTemplateOperand]!
}

enum ItemTemplateField {
  id
  Id
  Beid
  Name
  Description
  Body
  CategoryId
  ComponentId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ItemTemplateOperand {
  field: ItemTemplateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemTemplateExpression
}

input ItemTemplateOrderBy {
  field: ItemTemplateField
  direction: OrderByDirection = Ascending
}

type ItemTimeAccount implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  TacTimeAcctCode: TimeAcctCode!
  Tacid: Int!
  IsActive: Boolean!
  CreatedDate: DateTime
  CreatedUid: ID
}

"""A connection to a list of items."""
type ItemTimeAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemTimeAccountEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemTimeAccountEdge {
  """The item at the end of the edge"""
  node: ItemTimeAccount

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemTimeAccountExpression {
  operator: Operator!
  operands: [ItemTimeAccountOperand]!
}

enum ItemTimeAccountField {
  id
  Id
  Beid
  ItemId
  ComponentId
  Tacid
  IsActive
  CreatedDate
  CreatedUid
}

input ItemTimeAccountOperand {
  field: ItemTimeAccountField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemTimeAccountExpression
}

input ItemTimeAccountOrderBy {
  field: ItemTimeAccountField
  direction: OrderByDirection = Ascending
}

type ItemUpdate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ComponentId: Int!
  ProjectId: Int!
  PlanId: Int!
  ItemId: Int
  Title: String
  CreatedByUid: ID!
  DateCreated: DateTime!
  Body: String
  LikesCount: Int!
  RepliesCount: Int!
  NotifiedList: String
  IsPrivate: Boolean!
  UpdateTypeId: Int!
  StatusIdOld: Int!
  StatusIdNew: Int!
  PercentCompleteOld: Float
  PercentCompleteNew: Float
  ReferenceId: String
  Beid: ID
  LastUpdated: DateTime!
  ParentId: Int!
  IsParent: Boolean!
  SubComponentId: Int!
  AppId: Int!
  ComponentName: String
  ParentComponentName: String
  IsCascaded: Boolean!
  CascadeNotificationGroups: Int!
  IsDeleted: Boolean!
  DeletedUid: ID
  DeletedDateUtc: DateTime
  ItemUpdateOnMessages(after: String, first: Int, before: String, last: Int, sort: [MessageOrderBy], filter: MessageExpression): MessageConnection
}

type ItemUpdateComment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemUpdateId: Int!
  CreatedByUid: ID!
  DateCreated: DateTime!
  Body: String
  IsDeleted: Boolean!
  DeletedUid: ID
  DeletedDateUtc: DateTime
}

"""A connection to a list of items."""
type ItemUpdateCommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemUpdateCommentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemUpdateCommentEdge {
  """The item at the end of the edge"""
  node: ItemUpdateComment

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemUpdateCommentExpression {
  operator: Operator!
  operands: [ItemUpdateCommentOperand]!
}

enum ItemUpdateCommentField {
  id
  Id
  ItemUpdateId
  CreatedByUid
  DateCreated
  Body
  IsDeleted
  DeletedUid
  DeletedDateUtc
}

input ItemUpdateCommentOperand {
  field: ItemUpdateCommentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemUpdateCommentExpression
}

input ItemUpdateCommentOrderBy {
  field: ItemUpdateCommentField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ItemUpdateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemUpdateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemUpdateEdge {
  """The item at the end of the edge"""
  node: ItemUpdate

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemUpdateExpression {
  operator: Operator!
  operands: [ItemUpdateOperand]!
}

enum ItemUpdateField {
  id
  Id
  ComponentId
  ProjectId
  PlanId
  ItemId
  Title
  CreatedByUid
  DateCreated
  Body
  LikesCount
  RepliesCount
  NotifiedList
  IsPrivate
  UpdateTypeId
  StatusIdOld
  StatusIdNew
  PercentCompleteOld
  PercentCompleteNew
  ReferenceId
  Beid
  LastUpdated
  ParentId
  IsParent
  SubComponentId
  AppId
  ComponentName
  ParentComponentName
  IsCascaded
  CascadeNotificationGroups
  IsDeleted
  DeletedUid
  DeletedDateUtc
}

type ItemUpdateLike implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemUpdateId: Int!
  DateCreated: DateTime!
  CreatedByUid: ID!
}

"""A connection to a list of items."""
type ItemUpdateLikeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemUpdateLikeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemUpdateLikeEdge {
  """The item at the end of the edge"""
  node: ItemUpdateLike

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemUpdateLikeExpression {
  operator: Operator!
  operands: [ItemUpdateLikeOperand]!
}

enum ItemUpdateLikeField {
  id
  Id
  ItemUpdateId
  DateCreated
  CreatedByUid
}

input ItemUpdateLikeOperand {
  field: ItemUpdateLikeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemUpdateLikeExpression
}

input ItemUpdateLikeOrderBy {
  field: ItemUpdateLikeField
  direction: OrderByDirection = Ascending
}

input ItemUpdateOperand {
  field: ItemUpdateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemUpdateExpression
}

input ItemUpdateOrderBy {
  field: ItemUpdateField
  direction: OrderByDirection = Ascending
}

type ItemUpdateType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type ItemUpdateTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemUpdateTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemUpdateTypeEdge {
  """The item at the end of the edge"""
  node: ItemUpdateType

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemUpdateTypeExpression {
  operator: Operator!
  operands: [ItemUpdateTypeOperand]!
}

enum ItemUpdateTypeField {
  id
  Id
  Name
}

input ItemUpdateTypeOperand {
  field: ItemUpdateTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemUpdateTypeExpression
}

input ItemUpdateTypeOrderBy {
  field: ItemUpdateTypeField
  direction: OrderByDirection = Ascending
}

type ItemUserPermission implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ItemId: ID
  TTeam: Team!
  Tid: Int!
  UidUser: User!
  Uid: ID!
  HasFull: Boolean!
  HasSelect: Boolean!
  HasUpdate: Boolean!
  HasDelete: Boolean!
  HasInsert: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ItemUserPermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemUserPermissionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemUserPermissionEdge {
  """The item at the end of the edge"""
  node: ItemUserPermission

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemUserPermissionExpression {
  operator: Operator!
  operands: [ItemUserPermissionOperand]!
}

enum ItemUserPermissionField {
  id
  Id
  ItemId
  Tid
  Uid
  HasFull
  HasSelect
  HasUpdate
  HasDelete
  HasInsert
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ItemUserPermissionOperand {
  field: ItemUserPermissionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemUserPermissionExpression
}

input ItemUserPermissionOrderBy {
  field: ItemUserPermissionField
  direction: OrderByDirection = Ascending
}

type ItemView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  ComponentId: Int!
  ItemId: Int!
  Uid: ID!
  ReadCount: Int!
  ReadDateUtc: DateTime!
  FirstReadDateUtc: DateTime!
}

"""A connection to a list of items."""
type ItemViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemViewEdge {
  """The item at the end of the edge"""
  node: ItemView

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemViewExpression {
  operator: Operator!
  operands: [ItemViewOperand]!
}

enum ItemViewField {
  id
  Id
  Beid
  ComponentId
  ItemId
  Uid
  ReadCount
  ReadDateUtc
  FirstReadDateUtc
}

input ItemViewOperand {
  field: ItemViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemViewExpression
}

input ItemViewOrderBy {
  field: ItemViewField
  direction: OrderByDirection = Ascending
}

type ItemViewsRolling implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  UidUser: User!
  Uid: ID!
  Component: Component!
  ComponentId: Int!
  ItemId: Int!
  ReadDateUtc: DateTime!
}

"""A connection to a list of items."""
type ItemViewsRollingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemViewsRollingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemViewsRollingEdge {
  """The item at the end of the edge"""
  node: ItemViewsRolling

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemViewsRollingExpression {
  operator: Operator!
  operands: [ItemViewsRollingOperand]!
}

enum ItemViewsRollingField {
  id
  Id
  Beid
  Uid
  ComponentId
  ItemId
  ReadDateUtc
}

input ItemViewsRollingOperand {
  field: ItemViewsRollingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemViewsRollingExpression
}

input ItemViewsRollingOrderBy {
  field: ItemViewsRollingField
  direction: OrderByDirection = Ascending
}

type ItemViewsWarehouse implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  ComponentId: Int!
  ItemId: Int!
  YearMonth: Int!
  Year: Int!
  Month: Int!
  Uid: ID!
  ViewCount: Int!
}

"""A connection to a list of items."""
type ItemViewsWarehouseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemViewsWarehouseEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemViewsWarehouseEdge {
  """The item at the end of the edge"""
  node: ItemViewsWarehouse

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemViewsWarehouseExpression {
  operator: Operator!
  operands: [ItemViewsWarehouseOperand]!
}

enum ItemViewsWarehouseField {
  id
  Id
  Beid
  ComponentId
  ItemId
  YearMonth
  Year
  Month
  Uid
  ViewCount
}

input ItemViewsWarehouseOperand {
  field: ItemViewsWarehouseField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemViewsWarehouseExpression
}

input ItemViewsWarehouseOrderBy {
  field: ItemViewsWarehouseField
  direction: OrderByDirection = Ascending
}

type ItemViewTrackingCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Component: Component!
  ComponentId: Int!
  ItemId: Int!
  ToEmailAddress: String!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ItemViewTrackingCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemViewTrackingCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ItemViewTrackingCodeEdge {
  """The item at the end of the edge"""
  node: ItemViewTrackingCode

  """A cursor for use in pagination"""
  cursor: String!
}

input ItemViewTrackingCodeExpression {
  operator: Operator!
  operands: [ItemViewTrackingCodeOperand]!
}

enum ItemViewTrackingCodeField {
  id
  Id
  Beid
  ComponentId
  ItemId
  ToEmailAddress
  CreatedDateUtc
}

input ItemViewTrackingCodeOperand {
  field: ItemViewTrackingCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ItemViewTrackingCodeExpression
}

input ItemViewTrackingCodeOrderBy {
  field: ItemViewTrackingCodeField
  direction: OrderByDirection = Ascending
}

type Job implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Description: String!
  Schedule: String!
  JobOnJobHistories(after: String, first: Int, before: String, last: Int, sort: [JobHistoryOrderBy], filter: JobHistoryExpression): JobHistoryConnection!
}

"""A connection to a list of items."""
type JobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type JobEdge {
  """The item at the end of the edge"""
  node: Job

  """A cursor for use in pagination"""
  cursor: String!
}

input JobExpression {
  operator: Operator!
  operands: [JobOperand]!
}

enum JobField {
  id
  Id
  Name
  Description
  Schedule
}

type JobHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Job: Job!
  JobId: Int!
  Date: DateTime!
  Id: Int!
}

"""A connection to a list of items."""
type JobHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [JobHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type JobHistoryEdge {
  """The item at the end of the edge"""
  node: JobHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input JobHistoryExpression {
  operator: Operator!
  operands: [JobHistoryOperand]!
}

enum JobHistoryField {
  id
  JobId
  Date
  Id
}

input JobHistoryOperand {
  field: JobHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: JobHistoryExpression
}

input JobHistoryOrderBy {
  field: JobHistoryField
  direction: OrderByDirection = Ascending
}

input JobOperand {
  field: JobField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: JobExpression
}

input JobOrderBy {
  field: JobField
  direction: OrderByDirection = Ascending
}

type KmFilesUserStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  File: File!
  FileId: ID!
  Uid: ID!
  Read: Boolean!
  DateRead: DateTime!
}

"""A connection to a list of items."""
type KmFilesUserStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KmFilesUserStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type KmFilesUserStatusEdge {
  """The item at the end of the edge"""
  node: KmFilesUserStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input KmFilesUserStatusExpression {
  operator: Operator!
  operands: [KmFilesUserStatusOperand]!
}

enum KmFilesUserStatusField {
  id
  Id
  FileId
  Uid
  Read
  DateRead
}

input KmFilesUserStatusOperand {
  field: KmFilesUserStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: KmFilesUserStatusExpression
}

input KmFilesUserStatusOrderBy {
  field: KmFilesUserStatusField
  direction: OrderByDirection = Ascending
}

type KnowledgeBaseArticlesReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  ArticleId: Int!
  ArticleOrder: Float!
  CategoryId: Int!
  CategoryName: String!
  CategoryPathNames: String
  ArticleSubject: String!
  ArticleBody: String!
  ArticleSummary: String
  RevisionNumber: Int!
  ArticleStatusId: Int!
  ArticleStatusName: String!
  ReviewDate: Date
  IsPublished: Boolean!
  IsPublic: Boolean!
  InheritPermissions: Boolean!
  CreatedDate: DateTime!
  CreatedUid: ID!
  CreatedFullName: String
  ModifiedDate: DateTime!
  ModifiedUid: ID!
  ModifiedFullName: String
  OwnerUid: ID!
  OwnerFullName: String
  NotifyOwnerOnFeedback: Boolean!
}

"""A connection to a list of items."""
type KnowledgeBaseArticlesReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [KnowledgeBaseArticlesReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type KnowledgeBaseArticlesReportViewEdge {
  """The item at the end of the edge"""
  node: KnowledgeBaseArticlesReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input KnowledgeBaseArticlesReportViewExpression {
  operator: Operator!
  operands: [KnowledgeBaseArticlesReportViewOperand]!
}

enum KnowledgeBaseArticlesReportViewField {
  id
  Beid
  ArticleId
  ArticleOrder
  CategoryId
  CategoryName
  CategoryPathNames
  ArticleSubject
  ArticleBody
  ArticleSummary
  RevisionNumber
  ArticleStatusId
  ArticleStatusName
  ReviewDate
  IsPublished
  IsPublic
  InheritPermissions
  CreatedDate
  CreatedUid
  CreatedFullName
  ModifiedDate
  ModifiedUid
  ModifiedFullName
  OwnerUid
  OwnerFullName
  NotifyOwnerOnFeedback
}

input KnowledgeBaseArticlesReportViewOperand {
  field: KnowledgeBaseArticlesReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: KnowledgeBaseArticlesReportViewExpression
}

input KnowledgeBaseArticlesReportViewOrderBy {
  field: KnowledgeBaseArticlesReportViewField
  direction: OrderByDirection = Ascending
}

type LicenseType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  LicenseTypeOnLicenseTypePermissions(after: String, first: Int, before: String, last: Int, sort: [LicenseTypePermissionOrderBy], filter: LicenseTypePermissionExpression): LicenseTypePermissionConnection!
  LicenseTypeOnRoles(after: String, first: Int, before: String, last: Int, sort: [RoleOrderBy], filter: RoleExpression): RoleConnection
}

"""A connection to a list of items."""
type LicenseTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LicenseTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LicenseTypeEdge {
  """The item at the end of the edge"""
  node: LicenseType

  """A cursor for use in pagination"""
  cursor: String!
}

input LicenseTypeExpression {
  operator: Operator!
  operands: [LicenseTypeOperand]!
}

enum LicenseTypeField {
  id
  Id
  Name
}

input LicenseTypeOperand {
  field: LicenseTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LicenseTypeExpression
}

input LicenseTypeOrderBy {
  field: LicenseTypeField
  direction: OrderByDirection = Ascending
}

type LicenseTypePermission implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  LicenseType: LicenseType!
  LicenseTypeId: Int!
  PermPermission: Permission
  PermName: String
  AppName: String
  HasPermission: Boolean
}

"""A connection to a list of items."""
type LicenseTypePermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LicenseTypePermissionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LicenseTypePermissionEdge {
  """The item at the end of the edge"""
  node: LicenseTypePermission

  """A cursor for use in pagination"""
  cursor: String!
}

input LicenseTypePermissionExpression {
  operator: Operator!
  operands: [LicenseTypePermissionOperand]!
}

enum LicenseTypePermissionField {
  id
  Id
  LicenseTypeId
  PermName
  AppName
  HasPermission
}

input LicenseTypePermissionOperand {
  field: LicenseTypePermissionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LicenseTypePermissionExpression
}

input LicenseTypePermissionOrderBy {
  field: LicenseTypePermissionField
  direction: OrderByDirection = Ascending
}

type Link implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  Tid: Int!
  CatLinksCategory: LinksCategory!
  CatId: Int!
  Url: String
  Desc: String
  DateCreated: DateTime!
  DateMod: DateTime!
  Subject: String
  IsPublished: Boolean!
  DatePublished: DateTime
  PublishedUid: ID
  ModifiedUid: ID
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge"""
  node: Link

  """A cursor for use in pagination"""
  cursor: String!
}

input LinkExpression {
  operator: Operator!
  operands: [LinkOperand]!
}

enum LinkField {
  id
  Id
  Uid
  Tid
  CatId
  Url
  Desc
  DateCreated
  DateMod
  Subject
  IsPublished
  DatePublished
  PublishedUid
  ModifiedUid
}

input LinkOperand {
  field: LinkField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LinkExpression
}

input LinkOrderBy {
  field: LinkField
  direction: OrderByDirection = Ascending
}

type LinksCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  Tid: Int!
  Name: String
  DateCreated: DateTime!
  DateModified: DateTime
  CatLinksCategoryOnLinks(after: String, first: Int, before: String, last: Int, sort: [LinkOrderBy], filter: LinkExpression): LinkConnection!
}

"""A connection to a list of items."""
type LinksCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinksCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LinksCategoryEdge {
  """The item at the end of the edge"""
  node: LinksCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input LinksCategoryExpression {
  operator: Operator!
  operands: [LinksCategoryOperand]!
}

enum LinksCategoryField {
  id
  Id
  Uid
  Tid
  Name
  DateCreated
  DateModified
}

input LinksCategoryOperand {
  field: LinksCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LinksCategoryExpression
}

input LinksCategoryOrderBy {
  field: LinksCategoryField
  direction: OrderByDirection = Ascending
}

type Location implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  Address: String
  City: String
  State: String
  Zip: String
  Country: String
  IsRoomRequired: Boolean!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  IsActive: Boolean!
  ExternalId: String
  Latitude: Decimal
  Longitude: Decimal
  LocationOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  LocationOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  LocationOnLocationRooms(after: String, first: Int, before: String, last: Int, sort: [LocationRoomOrderBy], filter: LocationRoomExpression): LocationRoomConnection!
  LocationOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationExpression {
  operator: Operator!
  operands: [LocationOperand]!
}

enum LocationField {
  id
  Id
  Beid
  Name
  Description
  Address
  City
  State
  Zip
  Country
  IsRoomRequired
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  IsActive
  ExternalId
  Latitude
  Longitude
}

input LocationOperand {
  field: LocationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LocationExpression
}

input LocationOrderBy {
  field: LocationField
  direction: OrderByDirection = Ascending
}

type LocationRoom implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Location: Location!
  LocationId: Int!
  Name: String!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ExternalId: String
  Description: String
  Floor: String
  Capacity: Int
  LocationRoomOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  LocationRoomOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  LocationRoomOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
}

"""A connection to a list of items."""
type LocationRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationRoomEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LocationRoomEdge {
  """The item at the end of the edge"""
  node: LocationRoom

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationRoomExpression {
  operator: Operator!
  operands: [LocationRoomOperand]!
}

enum LocationRoomField {
  id
  Id
  LocationId
  Name
  CreatedDate
  CreatedUid
  ExternalId
  Description
  Floor
  Capacity
}

input LocationRoomOperand {
  field: LocationRoomField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LocationRoomExpression
}

input LocationRoomOrderBy {
  field: LocationRoomField
  direction: OrderByDirection = Ascending
}

type LogLevel implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  TypeLogLevelOnComponentLogs(after: String, first: Int, before: String, last: Int, sort: [ComponentLogOrderBy], filter: ComponentLogExpression): ComponentLogConnection!
}

"""A connection to a list of items."""
type LogLevelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogLevelEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type LogLevelEdge {
  """The item at the end of the edge"""
  node: LogLevel

  """A cursor for use in pagination"""
  cursor: String!
}

input LogLevelExpression {
  operator: Operator!
  operands: [LogLevelOperand]!
}

enum LogLevelField {
  id
  Id
  Name
}

input LogLevelOperand {
  field: LogLevelField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: LogLevelExpression
}

input LogLevelOrderBy {
  field: LogLevelField
  direction: OrderByDirection = Ascending
}

type MailServer implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  MailServerAddress: String!
  MailServerPort: Int
  MailServerSecurityMode: Int!
  UseSmtpAuthentication: Boolean!
  MailUser: String
  MailUserPw: String
  MailUserDomain: String!
  MailFromAddress: String
  MailFromDisplayName: String
  LastModifiedDateUtc: DateTime!
  LastModifiedByUidUser: User!
  LastModifiedByUid: ID!
}

"""A connection to a list of items."""
type MailServerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MailServerEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MailServerEdge {
  """The item at the end of the edge"""
  node: MailServer

  """A cursor for use in pagination"""
  cursor: String!
}

input MailServerExpression {
  operator: Operator!
  operands: [MailServerOperand]!
}

enum MailServerField {
  id
  BeidInt
  MailServerAddress
  MailServerPort
  MailServerSecurityMode
  UseSmtpAuthentication
  MailUser
  MailUserPw
  MailUserDomain
  MailFromAddress
  MailFromDisplayName
  LastModifiedDateUtc
  LastModifiedByUid
}

input MailServerOperand {
  field: MailServerField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MailServerExpression
}

input MailServerOrderBy {
  field: MailServerField
  direction: OrderByDirection = Ascending
}

type MaintenanceConflictType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type MaintenanceConflictTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MaintenanceConflictTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MaintenanceConflictTypeEdge {
  """The item at the end of the edge"""
  node: MaintenanceConflictType

  """A cursor for use in pagination"""
  cursor: String!
}

input MaintenanceConflictTypeExpression {
  operator: Operator!
  operands: [MaintenanceConflictTypeOperand]!
}

enum MaintenanceConflictTypeField {
  id
  Id
  Name
}

input MaintenanceConflictTypeOperand {
  field: MaintenanceConflictTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MaintenanceConflictTypeExpression
}

input MaintenanceConflictTypeOrderBy {
  field: MaintenanceConflictTypeField
  direction: OrderByDirection = Ascending
}

type Message implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  UserRefUser: User!
  UserRefId: Int!
  ItemUpdate: ItemUpdate
  ItemUpdateId: Int
  Subject: String!
  Body: String!
  IsHtml: Boolean!
  IsSent: Boolean!
  SentDateUtc: DateTime
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge"""
  node: Message

  """A cursor for use in pagination"""
  cursor: String!
}

input MessageExpression {
  operator: Operator!
  operands: [MessageOperand]!
}

enum MessageField {
  id
  Id
  BeidInt
  UserRefId
  ItemUpdateId
  Subject
  Body
  IsHtml
  IsSent
  SentDateUtc
}

input MessageOperand {
  field: MessageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MessageExpression
}

input MessageOrderBy {
  field: MessageField
  direction: OrderByDirection = Ascending
}

type MettlerToledoPendingTimeApprovalView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TimeReportId: Int!
  TimeReportStartDate: DateTime!
  TimeReportEndDate: DateTime!
  Beid: ID!
  Hours: Decimal
  TimeCreatedByUid: ID!
  TimeCreatedByFullName: String
  ApproverUid: ID
  ApproverFullName: String
}

"""A connection to a list of items."""
type MettlerToledoPendingTimeApprovalViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MettlerToledoPendingTimeApprovalViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MettlerToledoPendingTimeApprovalViewEdge {
  """The item at the end of the edge"""
  node: MettlerToledoPendingTimeApprovalView

  """A cursor for use in pagination"""
  cursor: String!
}

input MettlerToledoPendingTimeApprovalViewExpression {
  operator: Operator!
  operands: [MettlerToledoPendingTimeApprovalViewOperand]!
}

enum MettlerToledoPendingTimeApprovalViewField {
  id
  TimeReportId
  TimeReportStartDate
  TimeReportEndDate
  Beid
  Hours
  TimeCreatedByUid
  TimeCreatedByFullName
  ApproverUid
  ApproverFullName
}

input MettlerToledoPendingTimeApprovalViewOperand {
  field: MettlerToledoPendingTimeApprovalViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MettlerToledoPendingTimeApprovalViewExpression
}

input MettlerToledoPendingTimeApprovalViewOrderBy {
  field: MettlerToledoPendingTimeApprovalViewField
  direction: OrderByDirection = Ascending
}

type MobileNotificationPlayer implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Type: Int!
  PlayerId: String
  UidUser: User!
  Uid: ID!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
}

"""A connection to a list of items."""
type MobileNotificationPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MobileNotificationPlayerEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MobileNotificationPlayerEdge {
  """The item at the end of the edge"""
  node: MobileNotificationPlayer

  """A cursor for use in pagination"""
  cursor: String!
}

input MobileNotificationPlayerExpression {
  operator: Operator!
  operands: [MobileNotificationPlayerOperand]!
}

enum MobileNotificationPlayerField {
  id
  Id
  Type
  PlayerId
  Uid
  BeidInt
}

input MobileNotificationPlayerOperand {
  field: MobileNotificationPlayerField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MobileNotificationPlayerExpression
}

input MobileNotificationPlayerOrderBy {
  field: MobileNotificationPlayerField
  direction: OrderByDirection = Ascending
}

type Module implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Uid: ID
  Type: String
  Name: String
  DefCol: Int!
  DefPos: Int!
  Timeout: Int!
  DesktopSrc: String
  CacheTime: Int!
  A1Src: String
  A3Src: String
  AppName: String!
  Category: String
  Detail: String
  MinVersion: Float
  ValidFeed: Boolean
  Attributes: String
  MaxVersion: Float
  DefSettings: String
  ReportSearch: Search!
  ReportId: Int!
  DesktopSrcClient: String
  IsPublic: Boolean!
  ShowBorder: Boolean!
  ShowName: Boolean!
  ReportFolderName: String
  ModModuleOnDesktopModules(after: String, first: Int, before: String, last: Int, sort: [DesktopModuleOrderBy], filter: DesktopModuleExpression): DesktopModuleConnection!
}

"""A connection to a list of items."""
type ModuleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ModuleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ModuleEdge {
  """The item at the end of the edge"""
  node: Module

  """A cursor for use in pagination"""
  cursor: String!
}

input ModuleExpression {
  operator: Operator!
  operands: [ModuleOperand]!
}

enum ModuleField {
  id
  Id
  Beid
  Uid
  Type
  Name
  DefCol
  DefPos
  Timeout
  DesktopSrc
  CacheTime
  A1Src
  A3Src
  AppName
  Category
  Detail
  MinVersion
  ValidFeed
  Attributes
  MaxVersion
  DefSettings
  ReportId
  DesktopSrcClient
  IsPublic
  ShowBorder
  ShowName
  ReportFolderName
}

input ModuleOperand {
  field: ModuleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ModuleExpression
}

input ModuleOrderBy {
  field: ModuleField
  direction: OrderByDirection = Ascending
}

type MyAccomplishment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  Beid: ID!
  ProjId: Int!
  ItemId: Int!
  ComponentId: Int!
  DateCompleted: DateTime!
}

"""A connection to a list of items."""
type MyAccomplishmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyAccomplishmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MyAccomplishmentEdge {
  """The item at the end of the edge"""
  node: MyAccomplishment

  """A cursor for use in pagination"""
  cursor: String!
}

input MyAccomplishmentExpression {
  operator: Operator!
  operands: [MyAccomplishmentOperand]!
}

enum MyAccomplishmentField {
  id
  Id
  Uid
  Beid
  ProjId
  ItemId
  ComponentId
  DateCompleted
}

input MyAccomplishmentOperand {
  field: MyAccomplishmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MyAccomplishmentExpression
}

input MyAccomplishmentOrderBy {
  field: MyAccomplishmentField
  direction: OrderByDirection = Ascending
}

type MyWork implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  Beid: ID!
  ProjId: Int!
  ItemId: Int!
  ItemType: Int!
  DateAccepted: DateTime!
  Order: Float!
}

"""A connection to a list of items."""
type MyWorkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyWorkEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MyWorkEdge {
  """The item at the end of the edge"""
  node: MyWork

  """A cursor for use in pagination"""
  cursor: String!
}

input MyWorkExpression {
  operator: Operator!
  operands: [MyWorkOperand]!
}

enum MyWorkField {
  id
  Id
  Uid
  Beid
  ProjId
  ItemId
  ItemType
  DateAccepted
  Order
}

input MyWorkOperand {
  field: MyWorkField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MyWorkExpression
}

input MyWorkOrderBy {
  field: MyWorkField
  direction: OrderByDirection = Ascending
}

type MyWorkPriority implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Order: Int!
}

"""A connection to a list of items."""
type MyWorkPriorityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MyWorkPriorityEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type MyWorkPriorityEdge {
  """The item at the end of the edge"""
  node: MyWorkPriority

  """A cursor for use in pagination"""
  cursor: String!
}

input MyWorkPriorityExpression {
  operator: Operator!
  operands: [MyWorkPriorityOperand]!
}

enum MyWorkPriorityField {
  id
  Id
  Name
  Order
}

input MyWorkPriorityOperand {
  field: MyWorkPriorityField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: MyWorkPriorityExpression
}

input MyWorkPriorityOrderBy {
  field: MyWorkPriorityField
  direction: OrderByDirection = Ascending
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type NotificationAttachment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UnprocessedNotification: UnprocessedNotification
  UnprocessedNotificationId: Int
  NotificationHistory: NotificationHistory
  NotificationHistoryId: Int
  IsTemporary: Boolean!
  AttachmentPath: String!
  NotificationHistoryArchive: NotificationHistoryArchive
  NotificationHistoryArchiveId: Int
}

"""A connection to a list of items."""
type NotificationAttachmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationAttachmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationAttachmentEdge {
  """The item at the end of the edge"""
  node: NotificationAttachment

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationAttachmentExpression {
  operator: Operator!
  operands: [NotificationAttachmentOperand]!
}

enum NotificationAttachmentField {
  id
  Id
  UnprocessedNotificationId
  NotificationHistoryId
  IsTemporary
  AttachmentPath
  NotificationHistoryArchiveId
}

input NotificationAttachmentOperand {
  field: NotificationAttachmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationAttachmentExpression
}

input NotificationAttachmentOrderBy {
  field: NotificationAttachmentField
  direction: OrderByDirection = Ascending
}

type NotificationEventType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  ComponentId: Int!
  NetNotificationEventTypeOnNotificationTemplates(after: String, first: Int, before: String, last: Int, sort: [NotificationTemplateOrderBy], filter: NotificationTemplateExpression): NotificationTemplateConnection!
}

"""A connection to a list of items."""
type NotificationEventTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEventTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationEventTypeEdge {
  """The item at the end of the edge"""
  node: NotificationEventType

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationEventTypeExpression {
  operator: Operator!
  operands: [NotificationEventTypeOperand]!
}

enum NotificationEventTypeField {
  id
  Id
  Name
  ComponentId
}

input NotificationEventTypeOperand {
  field: NotificationEventTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationEventTypeExpression
}

input NotificationEventTypeOrderBy {
  field: NotificationEventTypeField
  direction: OrderByDirection = Ascending
}

type NotificationFooter implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  ComponentId: Int!
  FooterText: String
  FooterHtml: String
  DateCreated: DateTime!
  DateModified: DateTime!
  IsTrackingPixelEnabled: Boolean!
  AppApplication: Application!
  AppId: Int!
}

"""A connection to a list of items."""
type NotificationFooterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationFooterEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationFooterEdge {
  """The item at the end of the edge"""
  node: NotificationFooter

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationFooterExpression {
  operator: Operator!
  operands: [NotificationFooterOperand]!
}

enum NotificationFooterField {
  id
  Id
  Beid
  ComponentId
  FooterText
  FooterHtml
  DateCreated
  DateModified
  IsTrackingPixelEnabled
  AppId
}

input NotificationFooterOperand {
  field: NotificationFooterField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationFooterExpression
}

input NotificationFooterOrderBy {
  field: NotificationFooterField
  direction: OrderByDirection = Ascending
}

type NotificationHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  RecipientUserUser: User!
  RecipientUserId: Int!
  SenderUserUser: User!
  SenderUserId: Int!
  ItemUpdateId: Int
  Subject: String!
  StatusNotificationStatus: NotificationStatus!
  StatusId: Int!
  StatusDateUtc: DateTime!
  CreatedDateUtc: DateTime!
  FirstReadDateUtc: DateTime
  Body: String!
  NotificationHistoryOnNotificationAttachments(after: String, first: Int, before: String, last: Int, sort: [NotificationAttachmentOrderBy], filter: NotificationAttachmentExpression): NotificationAttachmentConnection
  UnNotificationHistoryNotificationHistoryOnUnsentNotifications(after: String, first: Int, before: String, last: Int, sort: [UnsentNotificationOrderBy], filter: UnsentNotificationExpression): UnsentNotificationConnection!
}

type NotificationHistoryArchive implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  RecipientUserUser: User!
  RecipientUserId: Int!
  SenderUserUser: User!
  SenderUserId: Int!
  ItemUpdateId: Int
  Subject: String!
  StatusNotificationStatus: NotificationStatus!
  StatusId: Int!
  StatusDateUtc: DateTime!
  CreatedDateUtc: DateTime!
  FirstReadDateUtc: DateTime
  Body: String!
  NotificationHistoryArchiveOnNotificationAttachments(after: String, first: Int, before: String, last: Int, sort: [NotificationAttachmentOrderBy], filter: NotificationAttachmentExpression): NotificationAttachmentConnection
}

"""A connection to a list of items."""
type NotificationHistoryArchiveConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationHistoryArchiveEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationHistoryArchiveEdge {
  """The item at the end of the edge"""
  node: NotificationHistoryArchive

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationHistoryArchiveExpression {
  operator: Operator!
  operands: [NotificationHistoryArchiveOperand]!
}

enum NotificationHistoryArchiveField {
  id
  Id
  BeidInt
  RecipientUserId
  SenderUserId
  ItemUpdateId
  Subject
  StatusId
  StatusDateUtc
  CreatedDateUtc
  FirstReadDateUtc
  Body
}

input NotificationHistoryArchiveOperand {
  field: NotificationHistoryArchiveField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationHistoryArchiveExpression
}

input NotificationHistoryArchiveOrderBy {
  field: NotificationHistoryArchiveField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type NotificationHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationHistoryEdge {
  """The item at the end of the edge"""
  node: NotificationHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationHistoryExpression {
  operator: Operator!
  operands: [NotificationHistoryOperand]!
}

enum NotificationHistoryField {
  id
  Id
  BeidInt
  RecipientUserId
  SenderUserId
  ItemUpdateId
  Subject
  StatusId
  StatusDateUtc
  CreatedDateUtc
  FirstReadDateUtc
  Body
}

input NotificationHistoryOperand {
  field: NotificationHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationHistoryExpression
}

input NotificationHistoryOrderBy {
  field: NotificationHistoryField
  direction: OrderByDirection = Ascending
}

type NotificationStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  StatusNotificationStatusOnNotificationHistories(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryOrderBy], filter: NotificationHistoryExpression): NotificationHistoryConnection!
  StatusNotificationStatusOnNotificationHistoryArchives(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryArchiveOrderBy], filter: NotificationHistoryArchiveExpression): NotificationHistoryArchiveConnection!
  StatusNotificationStatusOnUnprocessedNotifications(after: String, first: Int, before: String, last: Int, sort: [UnprocessedNotificationOrderBy], filter: UnprocessedNotificationExpression): UnprocessedNotificationConnection!
}

"""A connection to a list of items."""
type NotificationStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationStatusEdge {
  """The item at the end of the edge"""
  node: NotificationStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationStatusExpression {
  operator: Operator!
  operands: [NotificationStatusOperand]!
}

enum NotificationStatusField {
  id
  Id
  Name
}

input NotificationStatusOperand {
  field: NotificationStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationStatusExpression
}

input NotificationStatusOrderBy {
  field: NotificationStatusField
  direction: OrderByDirection = Ascending
}

type NotificationTemplate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  NetNotificationEventType: NotificationEventType!
  Netid: Int!
  Template: String!
  IsEnabled: Boolean!
  Subject: String!
  AppApplication: Application!
  AppId: Int!
}

"""A connection to a list of items."""
type NotificationTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationTemplateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type NotificationTemplateEdge {
  """The item at the end of the edge"""
  node: NotificationTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input NotificationTemplateExpression {
  operator: Operator!
  operands: [NotificationTemplateOperand]!
}

enum NotificationTemplateField {
  id
  Id
  Beid
  Netid
  Template
  IsEnabled
  Subject
  AppId
}

input NotificationTemplateOperand {
  field: NotificationTemplateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: NotificationTemplateExpression
}

input NotificationTemplateOrderBy {
  field: NotificationTemplateField
  direction: OrderByDirection = Ascending
}

enum Operator {
  Not
  IsNull
  NotIsNull
  IsTrue
  IsFalse
  IsToday
  IsYesterday
  IsThisWeek
  IsLastWeek
  IsThisMonth
  IsLastMonth
  IsThisQuarter
  IsLastQuarter
  IsThisYear
  IsLastYear
  IsLastSevenDays
  IsLastThirtyDays
  IsLastSixtyDays
  IsLastNinetyDays
  IsLastOneHundredTwentyDays
  IsLastTwelveMonths
  IsBetween
  NotIsBetween
  And
  Or
  In
  NotIn
  IsEqualTo
  NotIsEqualTo
  IsStrictlyGreaterThan
  IsGreaterThanOrEqualTo
  IsStrictlyLessThan
  IsLessThanOrEqualTo
  Matches
  MatchesWithWildcards
  StartsWith
  EndsWith
}

type OppType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  DateCreated: DateTime!
  DateModified: DateTime!
  CreatedByUid: ID
  ModifiedByUid: ID
  PrimaryUidUser: User
  PrimaryUid: ID
  Cmpntid: Int!
  SendAlert: Boolean!
  OtherEmailAddresses: String
  CatTypeCategory: TypeCategory!
  CatId: Int!
  AllowGroups: Boolean!
  Description: String
  DefaultSlaServiceLevelAgreement: ServiceLevelAgreement!
  DefaultSlaid: Int!
  IsActive: Boolean!
  ReviewingGroupGroup: Group!
  ReviewingGroupId: Int!
  ShouldAlertResponsibleOnTaskClose: Boolean!
  WorkspaceId: Int!
  AppApplication: Application
  AppId: Int
  WorkflowId: Int
  UseMonthlySchedules: Boolean!
  RequestTypeOppTypeOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection
  ItemTypeOppTypeOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  TicketTypeOppTypeOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  TypeOppTypeOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  TypOppTypeOnTypesExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesExpenseAcctCodeOrderBy], filter: TypesExpenseAcctCodeExpression): TypesExpenseAcctCodeConnection!
  TypeOppTypeOnTypesGroups(after: String, first: Int, before: String, last: Int, sort: [TypesGroupOrderBy], filter: TypesGroupExpression): TypesGroupConnection!
  TypOppTypeOnTypesTimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesTimeAcctCodeOrderBy], filter: TypesTimeAcctCodeExpression): TypesTimeAcctCodeConnection!
}

"""A connection to a list of items."""
type OppTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OppTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type OppTypeEdge {
  """The item at the end of the edge"""
  node: OppType

  """A cursor for use in pagination"""
  cursor: String!
}

input OppTypeExpression {
  operator: Operator!
  operands: [OppTypeOperand]!
}

enum OppTypeField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  CreatedByUid
  ModifiedByUid
  PrimaryUid
  Cmpntid
  SendAlert
  OtherEmailAddresses
  CatId
  AllowGroups
  Description
  DefaultSlaid
  IsActive
  ReviewingGroupId
  ShouldAlertResponsibleOnTaskClose
  WorkspaceId
  AppId
  WorkflowId
  UseMonthlySchedules
}

input OppTypeOperand {
  field: OppTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: OppTypeExpression
}

input OppTypeOrderBy {
  field: OppTypeField
  direction: OrderByDirection = Ascending
}

enum OrderByDirection {
  Ascending
  Descending
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  DateCreated: DateTime!
  DateModified: DateTime
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedByUidUser: User
  ModifiedByUid: ID
  IsActive: Boolean
}

"""A connection to a list of items."""
type PaymentTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PaymentTypeEdge {
  """The item at the end of the edge"""
  node: PaymentType

  """A cursor for use in pagination"""
  cursor: String!
}

input PaymentTypeExpression {
  operator: Operator!
  operands: [PaymentTypeOperand]!
}

enum PaymentTypeField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  CreatedByUid
  ModifiedByUid
  IsActive
}

input PaymentTypeOperand {
  field: PaymentTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PaymentTypeExpression
}

input PaymentTypeOrderBy {
  field: PaymentTypeField
  direction: OrderByDirection = Ascending
}

type PendingTimeReportUser implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Uid: ID
  Email: String!
  IsExpenseApproval: Int!
}

"""A connection to a list of items."""
type PendingTimeReportUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PendingTimeReportUserEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PendingTimeReportUserEdge {
  """The item at the end of the edge"""
  node: PendingTimeReportUser

  """A cursor for use in pagination"""
  cursor: String!
}

input PendingTimeReportUserExpression {
  operator: Operator!
  operands: [PendingTimeReportUserOperand]!
}

enum PendingTimeReportUserField {
  id
  Uid
  Email
  IsExpenseApproval
}

input PendingTimeReportUserOperand {
  field: PendingTimeReportUserField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PendingTimeReportUserExpression
}

input PendingTimeReportUserOrderBy {
  field: PendingTimeReportUserField
  direction: OrderByDirection = Ascending
}

type PeopleReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  UserId: Int!
  Beid: ID!
  Username: String
  AuthUsername: String
  IsActive: Boolean!
  FullName: String
  FirstName: String
  LastName: String
  MiddleName: String
  NickName: String
  Salutation: String
  Organization: String
  IsEmployee: Boolean
  Title: String
  Gender: String!
  PrimaryEmail: String!
  AlternateEmail: String
  CreatedDate: DateTime
  ModifiedDate: DateTime
  ModifiedByUid: ID
  ModifiedByFullName: String
  LastLogon: DateTime
  PrimaryPhone: String
  PreferredPhone: String
  HomePhone: String
  WorkPhone: String
  Pager: String
  MobilePhone: String
  Fax: String
  OtherPhone: String
  HomeAddress: String
  HomeCity: String
  HomeState: String
  HomeZip: String
  HomeCountry: String
  WorkAddress: String
  WorkCity: String
  WorkState: String
  WorkZip: String
  WorkCountry: String
  Birthday: DateTime
  ImHandle: String
  ImProvider: String
  WorkableHours: Float
  ReportsToUid: ID
  AccountId: Int!
  DefaultPriorityId: Int!
  PrimaryFunctionalRoleId: Int
  ShouldReportTime: Boolean!
  SecurityRoleId: ID
  TypeId: Int!
  AboutMe: String
  TypeName: String!
  SecurityRoleName: String
  ReportsToFullName: String
  TextStatus: String
  OrganizationalId: String
  AlternateId: String
  DefaultPriority: String
  DefaultPriorityOrder: Float
  PrimaryFunctionalRole: String
  DefaultAccountName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  PrimaryGroupId: Int!
  PrimaryGroupName: String!
  IsCapacityManaged: Boolean!
}

"""A connection to a list of items."""
type PeopleReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PeopleReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PeopleReportViewEdge {
  """The item at the end of the edge"""
  node: PeopleReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input PeopleReportViewExpression {
  operator: Operator!
  operands: [PeopleReportViewOperand]!
}

enum PeopleReportViewField {
  id
  Id
  UserId
  Beid
  Username
  AuthUsername
  IsActive
  FullName
  FirstName
  LastName
  MiddleName
  NickName
  Salutation
  Organization
  IsEmployee
  Title
  Gender
  PrimaryEmail
  AlternateEmail
  CreatedDate
  ModifiedDate
  ModifiedByUid
  ModifiedByFullName
  LastLogon
  PrimaryPhone
  PreferredPhone
  HomePhone
  WorkPhone
  Pager
  MobilePhone
  Fax
  OtherPhone
  HomeAddress
  HomeCity
  HomeState
  HomeZip
  HomeCountry
  WorkAddress
  WorkCity
  WorkState
  WorkZip
  WorkCountry
  Birthday
  ImHandle
  ImProvider
  WorkableHours
  ReportsToUid
  AccountId
  DefaultPriorityId
  PrimaryFunctionalRoleId
  ShouldReportTime
  SecurityRoleId
  TypeId
  AboutMe
  TypeName
  SecurityRoleName
  ReportsToFullName
  TextStatus
  OrganizationalId
  AlternateId
  DefaultPriority
  DefaultPriorityOrder
  PrimaryFunctionalRole
  DefaultAccountName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  PrimaryGroupId
  PrimaryGroupName
  IsCapacityManaged
}

input PeopleReportViewOperand {
  field: PeopleReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PeopleReportViewExpression
}

input PeopleReportViewOrderBy {
  field: PeopleReportViewField
  direction: OrderByDirection = Ascending
}

type Permission implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  Desc: String
  CmpntComponent: Component!
  Cmpntid: Int!
  LongDescription: String
  ApplicationClass: String
  PermPermissionOnLicenseTypePermissions(after: String, first: Int, before: String, last: Int, sort: [LicenseTypePermissionOrderBy], filter: LicenseTypePermissionExpression): LicenseTypePermissionConnection
  PermPermissionOnRolePermissions(after: String, first: Int, before: String, last: Int, sort: [RolePermissionOrderBy], filter: RolePermissionExpression): RolePermissionConnection!
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge"""
  node: Permission

  """A cursor for use in pagination"""
  cursor: String!
}

input PermissionExpression {
  operator: Operator!
  operands: [PermissionOperand]!
}

enum PermissionField {
  id
  Id
  Name
  Desc
  Cmpntid
  LongDescription
  ApplicationClass
}

input PermissionOperand {
  field: PermissionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PermissionExpression
}

input PermissionOrderBy {
  field: PermissionField
  direction: OrderByDirection = Ascending
}

type PinSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  LockoutThreshold: Int!
  LockoutObservationWindowSeconds: Int!
  LockoutDurationSeconds: Int!
  PinResetServiceUrl: String
}

"""A connection to a list of items."""
type PinSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PinSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PinSettingEdge {
  """The item at the end of the edge"""
  node: PinSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input PinSettingExpression {
  operator: Operator!
  operands: [PinSettingOperand]!
}

enum PinSettingField {
  id
  BeidInt
  LockoutThreshold
  LockoutObservationWindowSeconds
  LockoutDurationSeconds
  PinResetServiceUrl
}

input PinSettingOperand {
  field: PinSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PinSettingExpression
}

input PinSettingOrderBy {
  field: PinSettingField
  direction: OrderByDirection = Ascending
}

type PlanBackup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  PlanId: Int!
  Tid: Int!
  Beid: ID!
  Uid: ID!
  DateCreated: DateTime!
  Version: Int
  Comments: String
}

"""A connection to a list of items."""
type PlanBackupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanBackupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlanBackupEdge {
  """The item at the end of the edge"""
  node: PlanBackup

  """A cursor for use in pagination"""
  cursor: String!
}

input PlanBackupExpression {
  operator: Operator!
  operands: [PlanBackupOperand]!
}

enum PlanBackupField {
  id
  Id
  PlanId
  Tid
  Beid
  Uid
  DateCreated
  Version
  Comments
}

input PlanBackupOperand {
  field: PlanBackupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlanBackupExpression
}

input PlanBackupOrderBy {
  field: PlanBackupField
  direction: OrderByDirection = Ascending
}

type PlanDraft implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  PlanTask: Task!
  PlanId: Int!
  PlanXml: String!
}

"""A connection to a list of items."""
type PlanDraftConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanDraftEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlanDraftEdge {
  """The item at the end of the edge"""
  node: PlanDraft

  """A cursor for use in pagination"""
  cursor: String!
}

input PlanDraftExpression {
  operator: Operator!
  operands: [PlanDraftOperand]!
}

enum PlanDraftField {
  id
  Id
  BeidInt
  PlanId
  PlanXml
}

input PlanDraftOperand {
  field: PlanDraftField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlanDraftExpression
}

input PlanDraftOrderBy {
  field: PlanDraftField
  direction: OrderByDirection = Ascending
}

type PlanHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  ProjectId: Int!
  PlanId: Int!
  StartDate: DateTime
  EndDate: DateTime
  EstMinutesRemaining: Int
  EstMinutesCompleted: Int
  EstMinutes: Int
  ActualMinutes: Int
  EstMinutesBaseline: Int
  StartDateBaseline: DateTime
  EndDateBaseline: DateTime
  DateCreated: DateTime
  Uid: ID
}

"""A connection to a list of items."""
type PlanHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlanHistoryEdge {
  """The item at the end of the edge"""
  node: PlanHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input PlanHistoryExpression {
  operator: Operator!
  operands: [PlanHistoryOperand]!
}

enum PlanHistoryField {
  id
  Id
  Beid
  ProjectId
  PlanId
  StartDate
  EndDate
  EstMinutesRemaining
  EstMinutesCompleted
  EstMinutes
  ActualMinutes
  EstMinutesBaseline
  StartDateBaseline
  EndDateBaseline
  DateCreated
  Uid
}

input PlanHistoryOperand {
  field: PlanHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlanHistoryExpression
}

input PlanHistoryOrderBy {
  field: PlanHistoryField
  direction: OrderByDirection = Ascending
}

type PlanLimit implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ProjectTeam: Team!
  ProjectId: Int!
  PlanTask: Task!
  PlanId: Int!
  Status: Status
  StatusId: Int
  MinValue: Int
  MaxValue: Int
}

"""A connection to a list of items."""
type PlanLimitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanLimitEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlanLimitEdge {
  """The item at the end of the edge"""
  node: PlanLimit

  """A cursor for use in pagination"""
  cursor: String!
}

input PlanLimitExpression {
  operator: Operator!
  operands: [PlanLimitOperand]!
}

enum PlanLimitField {
  id
  Id
  BeidInt
  ProjectId
  PlanId
  StatusId
  MinValue
  MaxValue
}

input PlanLimitOperand {
  field: PlanLimitField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlanLimitExpression
}

input PlanLimitOrderBy {
  field: PlanLimitField
  direction: OrderByDirection = Ascending
}

type PlansReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  PlanId: Int!
  TaskTitle: String
  TaskDesc: String
  CreatorUid: ID
  BeidInt: Int!
  CreatorFullName: String
  TaskTid: Int!
  TeamsName: String!
  TaskPlanId: Int!
  PlanTypeId: Int!
  PlanType: String!
  PercentComplete: Int
  PlanName: String
  TaskStartDate: DateTime
  TaskEndDate: DateTime
  TaskDateCreated: DateTime!
  TaskDateModified: DateTime
  TaskDateCompleted: DateTime
  EstimatedHours: Decimal
  RemainingHours: Decimal
  EstimatedHoursBaseline: Decimal
  BaseStart: DateTime
  BaseEnd: DateTime
  TaskStartDateEst: DateTime
  TaskEndDateEst: DateTime
  Beid: ID!
  Active: Boolean!
  StatusId: Int
  ProjectId: Int!
  ProjectName: String!
  ProjectActive: Boolean!
  ProjectClosed: Boolean
  ProjectDateCreated: DateTime!
  ProjectInternalTypeId: String
  ProjectStatusId: Int!
  ProjectStatusName: String!
  HealthId: Int!
  ProjectStatusDescription: String
  ProjectDateStatusModified: DateTime
  ProjectTypeId: Int
  ProjectType: String!
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
  ProjectAccountId: Int
  ProjectAccount: String
  ProjectSponsorName: String
  ProjectSponsorEmail: String
  ProjectPriorityId: Int
  ProjectPriorityName: String
  ProjectPriorityOrder: Float
}

"""A connection to a list of items."""
type PlansReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlansReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlansReportViewEdge {
  """The item at the end of the edge"""
  node: PlansReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input PlansReportViewExpression {
  operator: Operator!
  operands: [PlansReportViewOperand]!
}

enum PlansReportViewField {
  id
  PlanId
  TaskTitle
  TaskDesc
  CreatorUid
  BeidInt
  CreatorFullName
  TaskTid
  TeamsName
  TaskPlanId
  PlanTypeId
  PlanType
  PercentComplete
  PlanName
  TaskStartDate
  TaskEndDate
  TaskDateCreated
  TaskDateModified
  TaskDateCompleted
  EstimatedHours
  RemainingHours
  EstimatedHoursBaseline
  BaseStart
  BaseEnd
  TaskStartDateEst
  TaskEndDateEst
  Beid
  Active
  StatusId
  ProjectId
  ProjectName
  ProjectActive
  ProjectClosed
  ProjectDateCreated
  ProjectInternalTypeId
  ProjectStatusId
  ProjectStatusName
  HealthId
  ProjectStatusDescription
  ProjectDateStatusModified
  ProjectTypeId
  ProjectType
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
  ProjectAccountId
  ProjectAccount
  ProjectSponsorName
  ProjectSponsorEmail
  ProjectPriorityId
  ProjectPriorityName
  ProjectPriorityOrder
}

input PlansReportViewOperand {
  field: PlansReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlansReportViewExpression
}

input PlansReportViewOrderBy {
  field: PlansReportViewField
  direction: OrderByDirection = Ascending
}

type PlanType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  PlanTypeOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection
}

"""A connection to a list of items."""
type PlanTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PlanTypeEdge {
  """The item at the end of the edge"""
  node: PlanType

  """A cursor for use in pagination"""
  cursor: String!
}

input PlanTypeExpression {
  operator: Operator!
  operands: [PlanTypeOperand]!
}

enum PlanTypeField {
  id
  Id
  Name
}

input PlanTypeOperand {
  field: PlanTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PlanTypeExpression
}

input PlanTypeOrderBy {
  field: PlanTypeField
  direction: OrderByDirection = Ascending
}

type Portfolio implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  ManagerUidUser: User!
  ManagerUid: ID!
  Budget: Decimal!
  Description: String!
  AllowProjectAdd: Boolean!
  AllowRequestAdd: Boolean!
  IsActive: Boolean!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  CreatedDate: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
  ModifiedDate: DateTime!
  StartDate: DateTime
  EndDate: DateTime
  IsTicketDataSourceTd: Boolean!
  TicketSearchXml: String
  TicketSearchSql: String
  IncludeTimeOff: Boolean!
  PPortfolioOnPortfolioProjectInformations(after: String, first: Int, before: String, last: Int, sort: [PortfolioProjectInformationOrderBy], filter: PortfolioProjectInformationExpression): PortfolioProjectInformationConnection!
  PPortfolioOnPortfoliosProjects(after: String, first: Int, before: String, last: Int, sort: [PortfoliosProjectOrderBy], filter: PortfoliosProjectExpression): PortfoliosProjectConnection!
  PPortfolioOnPortfolioTicketInformations(after: String, first: Int, before: String, last: Int, sort: [PortfolioTicketInformationOrderBy], filter: PortfolioTicketInformationExpression): PortfolioTicketInformationConnection!
}

"""A connection to a list of items."""
type PortfolioConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioEdge {
  """The item at the end of the edge"""
  node: Portfolio

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioExpression {
  operator: Operator!
  operands: [PortfolioOperand]!
}

enum PortfolioField {
  id
  Id
  Beid
  Name
  ManagerUid
  Budget
  Description
  AllowProjectAdd
  AllowRequestAdd
  IsActive
  CreatedByUid
  CreatedDate
  ModifiedByUid
  ModifiedDate
  StartDate
  EndDate
  IsTicketDataSourceTd
  TicketSearchXml
  TicketSearchSql
  IncludeTimeOff
}

input PortfolioOperand {
  field: PortfolioField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioExpression
}

input PortfolioOrderBy {
  field: PortfolioField
  direction: OrderByDirection = Ascending
}

type PortfolioProjectInformation implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  PPortfolio: Portfolio!
  Pid: Int!
  DateModified: DateTime!
  ProjectsCount: Int!
  StartDate: DateTime
  EndDate: DateTime
  StartDateBaseline: DateTime
  EndDateBaseline: DateTime
  DurationPctComp: Float!
  EstimatedHours: Float!
  ActualHours: Float!
  HoursRemaining: Float!
  BudgetUsed: Float!
  ExpensesBudgetUsed: Float!
  TimeBudgetUsed: Float!
  ExpensesBudget: Float!
  TimeBudget: Float!
  Budget: Float!
  TimeBudgetRemaining: Float!
  ExpensesBudgetRemaining: Float!
  BudgetRemaining: Float!
  HoursBaseline: Float!
  PctComp: Float!
  HrsPctComp: Float!
  BudgetPctComp: Float!
  CompositeScore: Float!
  CompositeScorePct: Float!
  GoalsScore: Float!
  RisksScore: Float!
  ScorecardScore: Float!
  Roi: Float!
  PaybackPeriod: Float!
  DiscountRate: Float!
  Irr: Float!
  Status: Float!
}

"""A connection to a list of items."""
type PortfolioProjectInformationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioProjectInformationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioProjectInformationEdge {
  """The item at the end of the edge"""
  node: PortfolioProjectInformation

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioProjectInformationExpression {
  operator: Operator!
  operands: [PortfolioProjectInformationOperand]!
}

enum PortfolioProjectInformationField {
  id
  Id
  Pid
  DateModified
  ProjectsCount
  StartDate
  EndDate
  StartDateBaseline
  EndDateBaseline
  DurationPctComp
  EstimatedHours
  ActualHours
  HoursRemaining
  BudgetUsed
  ExpensesBudgetUsed
  TimeBudgetUsed
  ExpensesBudget
  TimeBudget
  Budget
  TimeBudgetRemaining
  ExpensesBudgetRemaining
  BudgetRemaining
  HoursBaseline
  PctComp
  HrsPctComp
  BudgetPctComp
  CompositeScore
  CompositeScorePct
  GoalsScore
  RisksScore
  ScorecardScore
  Roi
  PaybackPeriod
  DiscountRate
  Irr
  Status
}

type PortfolioProjectInformationHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Pid: Int!
  DateCreated: DateTime!
  ProjectsCount: Int!
  StartDate: DateTime
  EndDate: DateTime
  StartDateBaseline: DateTime
  EndDateBaseline: DateTime
  DurationPctComp: Float!
  EstimatedHours: Float!
  ActualHours: Float!
  HoursRemaining: Float!
  BudgetUsed: Float!
  ExpensesBudgetUsed: Float!
  TimeBudgetUsed: Float!
  ExpensesBudget: Float!
  TimeBudget: Float!
  Budget: Float!
  TimeBudgetRemaining: Float!
  ExpensesBudgetRemaining: Float!
  BudgetRemaining: Float!
  HoursBaseline: Float!
  PctComp: Float!
  HrsPctComp: Float!
  BudgetPctComp: Float!
  CompositeScore: Float!
  CompositeScorePct: Float!
  GoalsScore: Float!
  RisksScore: Float!
  ScorecardScore: Float!
  Roi: Float!
  PaybackPeriod: Float!
  DiscountRate: Float!
  Irr: Float!
  Status: Float!
}

"""A connection to a list of items."""
type PortfolioProjectInformationHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioProjectInformationHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioProjectInformationHistoryEdge {
  """The item at the end of the edge"""
  node: PortfolioProjectInformationHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioProjectInformationHistoryExpression {
  operator: Operator!
  operands: [PortfolioProjectInformationHistoryOperand]!
}

enum PortfolioProjectInformationHistoryField {
  id
  Id
  Pid
  DateCreated
  ProjectsCount
  StartDate
  EndDate
  StartDateBaseline
  EndDateBaseline
  DurationPctComp
  EstimatedHours
  ActualHours
  HoursRemaining
  BudgetUsed
  ExpensesBudgetUsed
  TimeBudgetUsed
  ExpensesBudget
  TimeBudget
  Budget
  TimeBudgetRemaining
  ExpensesBudgetRemaining
  BudgetRemaining
  HoursBaseline
  PctComp
  HrsPctComp
  BudgetPctComp
  CompositeScore
  CompositeScorePct
  GoalsScore
  RisksScore
  ScorecardScore
  Roi
  PaybackPeriod
  DiscountRate
  Irr
  Status
}

input PortfolioProjectInformationHistoryOperand {
  field: PortfolioProjectInformationHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioProjectInformationHistoryExpression
}

input PortfolioProjectInformationHistoryOrderBy {
  field: PortfolioProjectInformationHistoryField
  direction: OrderByDirection = Ascending
}

input PortfolioProjectInformationOperand {
  field: PortfolioProjectInformationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioProjectInformationExpression
}

input PortfolioProjectInformationOrderBy {
  field: PortfolioProjectInformationField
  direction: OrderByDirection = Ascending
}

type PortfolioSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  WeightingFieldName: String
  ModifiedDate: DateTime
  ModifiedUid: ID
}

"""A connection to a list of items."""
type PortfolioSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioSettingEdge {
  """The item at the end of the edge"""
  node: PortfolioSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioSettingExpression {
  operator: Operator!
  operands: [PortfolioSettingOperand]!
}

enum PortfolioSettingField {
  id
  Id
  Beid
  WeightingFieldName
  ModifiedDate
  ModifiedUid
}

input PortfolioSettingOperand {
  field: PortfolioSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioSettingExpression
}

input PortfolioSettingOrderBy {
  field: PortfolioSettingField
  direction: OrderByDirection = Ascending
}

type PortfoliosProject implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  PPortfolio: Portfolio!
  Pid: Int!
  ItemId: Int!
  CreatedDate: DateTime!
  CreatedByUid: ID!
  ComponentId: Int!
}

"""A connection to a list of items."""
type PortfoliosProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfoliosProjectEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfoliosProjectEdge {
  """The item at the end of the edge"""
  node: PortfoliosProject

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfoliosProjectExpression {
  operator: Operator!
  operands: [PortfoliosProjectOperand]!
}

enum PortfoliosProjectField {
  id
  Id
  Pid
  ItemId
  CreatedDate
  CreatedByUid
  ComponentId
}

input PortfoliosProjectOperand {
  field: PortfoliosProjectField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfoliosProjectExpression
}

input PortfoliosProjectOrderBy {
  field: PortfoliosProjectField
  direction: OrderByDirection = Ascending
}

type PortfoliosReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  Description: String!
  ManagerUid: ID!
  ManagerFullName: String
  ApprovedPortfolioBudget: Decimal!
  ActualPortfolioBudget: Float
  BudgetConsumed: Float
  EstimatedProjectHours: Float
  ActualProjectHours: Float
}

"""A connection to a list of items."""
type PortfoliosReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfoliosReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfoliosReportViewEdge {
  """The item at the end of the edge"""
  node: PortfoliosReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfoliosReportViewExpression {
  operator: Operator!
  operands: [PortfoliosReportViewOperand]!
}

enum PortfoliosReportViewField {
  id
  Id
  Beid
  Name
  Description
  ManagerUid
  ManagerFullName
  ApprovedPortfolioBudget
  ActualPortfolioBudget
  BudgetConsumed
  EstimatedProjectHours
  ActualProjectHours
}

input PortfoliosReportViewOperand {
  field: PortfoliosReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfoliosReportViewExpression
}

input PortfoliosReportViewOrderBy {
  field: PortfoliosReportViewField
  direction: OrderByDirection = Ascending
}

type PortfolioTicketInformation implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  PPortfolio: Portfolio!
  Pid: Int!
  DateModified: DateTime!
  TicketsCount: Int
  OpenCount: Int
  InProcessCount: Int
  ClosedCount: Int
  OpenAverageAge: Float
  InProcessAverageAge: Float
  ActualHours: Float
  ActualCost: Float
  EstimatedHours: Float
  OpenEstimatedHours: Float
  InProcessEstimatedHours: Float
  OpenAverageAgeWorkDays: Float
  InProcessAverageAgeWorkDays: Float
  ClosedAverageLifeDays: Float
  ClosedAverageLifeWorkDays: Float
}

"""A connection to a list of items."""
type PortfolioTicketInformationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioTicketInformationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioTicketInformationEdge {
  """The item at the end of the edge"""
  node: PortfolioTicketInformation

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioTicketInformationExpression {
  operator: Operator!
  operands: [PortfolioTicketInformationOperand]!
}

enum PortfolioTicketInformationField {
  id
  Id
  Pid
  DateModified
  TicketsCount
  OpenCount
  InProcessCount
  ClosedCount
  OpenAverageAge
  InProcessAverageAge
  ActualHours
  ActualCost
  EstimatedHours
  OpenEstimatedHours
  InProcessEstimatedHours
  OpenAverageAgeWorkDays
  InProcessAverageAgeWorkDays
  ClosedAverageLifeDays
  ClosedAverageLifeWorkDays
}

type PortfolioTicketInformationHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Pid: Int!
  DateCreated: DateTime!
  TicketsCount: Int
  OpenCount: Int
  InProcessCount: Int
  ClosedCount: Int
  OpenAverageAge: Float
  InProcessAverageAge: Float
  ActualHours: Float
  ActualCost: Float
  EstimatedHours: Float
  OpenEstimatedHours: Float
  InProcessEstimatedHours: Float
  OpenAverageAgeWorkDays: Float
  InProcessAverageAgeWorkDays: Float
  ClosedAverageLifeDays: Float
  ClosedAverageLifeWorkDays: Float
}

"""A connection to a list of items."""
type PortfolioTicketInformationHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioTicketInformationHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioTicketInformationHistoryEdge {
  """The item at the end of the edge"""
  node: PortfolioTicketInformationHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioTicketInformationHistoryExpression {
  operator: Operator!
  operands: [PortfolioTicketInformationHistoryOperand]!
}

enum PortfolioTicketInformationHistoryField {
  id
  Id
  Pid
  DateCreated
  TicketsCount
  OpenCount
  InProcessCount
  ClosedCount
  OpenAverageAge
  InProcessAverageAge
  ActualHours
  ActualCost
  EstimatedHours
  OpenEstimatedHours
  InProcessEstimatedHours
  OpenAverageAgeWorkDays
  InProcessAverageAgeWorkDays
  ClosedAverageLifeDays
  ClosedAverageLifeWorkDays
}

input PortfolioTicketInformationHistoryOperand {
  field: PortfolioTicketInformationHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioTicketInformationHistoryExpression
}

input PortfolioTicketInformationHistoryOrderBy {
  field: PortfolioTicketInformationHistoryField
  direction: OrderByDirection = Ascending
}

type PortfolioTicketInformationImport implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  IsImported: Boolean!
  ImportedDate: DateTime
  AsOfDate: DateTime!
  PortfolioId: Int!
  DateCreated: DateTime!
  TicketsCount: Int
  OpenCount: Int
  InProcessCount: Int
  ClosedCount: Int
  OpenAverageAge: Float
  InProcessAverageAge: Float
  ActualHours: Float
  ActualCost: Float
  EstimatedHours: Float
  OpenEstimatedHours: Float
  InProcessEstimatedHours: Float
  OpenAverageAgeWorkDays: Float
  InProcessAverageAgeWorkDays: Float
}

"""A connection to a list of items."""
type PortfolioTicketInformationImportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PortfolioTicketInformationImportEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PortfolioTicketInformationImportEdge {
  """The item at the end of the edge"""
  node: PortfolioTicketInformationImport

  """A cursor for use in pagination"""
  cursor: String!
}

input PortfolioTicketInformationImportExpression {
  operator: Operator!
  operands: [PortfolioTicketInformationImportOperand]!
}

enum PortfolioTicketInformationImportField {
  id
  Id
  Beid
  IsImported
  ImportedDate
  AsOfDate
  PortfolioId
  DateCreated
  TicketsCount
  OpenCount
  InProcessCount
  ClosedCount
  OpenAverageAge
  InProcessAverageAge
  ActualHours
  ActualCost
  EstimatedHours
  OpenEstimatedHours
  InProcessEstimatedHours
  OpenAverageAgeWorkDays
  InProcessAverageAgeWorkDays
}

input PortfolioTicketInformationImportOperand {
  field: PortfolioTicketInformationImportField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioTicketInformationImportExpression
}

input PortfolioTicketInformationImportOrderBy {
  field: PortfolioTicketInformationImportField
  direction: OrderByDirection = Ascending
}

input PortfolioTicketInformationOperand {
  field: PortfolioTicketInformationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PortfolioTicketInformationExpression
}

input PortfolioTicketInformationOrderBy {
  field: PortfolioTicketInformationField
  direction: OrderByDirection = Ascending
}

type PriorityFactor implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  PriorityFactorType: PriorityFactorType!
  PriorityFactorTypeId: Int!
  Name: String!
  Description: String
  Order: Float!
  CreatedUid: ID!
  CreatedDate: DateTime!
  ModifiedUid: ID!
  ModifiedDate: DateTime!
  MyWorkPriorityId: Int
  IsActive: Boolean!
  IsDefault: Boolean!
  NewImpactPriorityFactorOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  NewPriorityPriorityFactorOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  NewUrgencyPriorityFactorOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  ImpactPriorityFactorOnPriorityMatrices(after: String, first: Int, before: String, last: Int, sort: [PriorityMatrixOrderBy], filter: PriorityMatrixExpression): PriorityMatrixConnection!
  PriorityPriorityFactorOnPriorityMatrices(after: String, first: Int, before: String, last: Int, sort: [PriorityMatrixOrderBy], filter: PriorityMatrixExpression): PriorityMatrixConnection!
  UrgencyPriorityFactorOnPriorityMatrices(after: String, first: Int, before: String, last: Int, sort: [PriorityMatrixOrderBy], filter: PriorityMatrixExpression): PriorityMatrixConnection!
  ImpactPriorityFactorOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  PriorityPriorityFactorOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  UrgencyPriorityFactorOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  ImpactPriorityFactorOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  PriorityPriorityFactorOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  UrgencyPriorityFactorOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  PriorityPriorityFactorOnTodos(after: String, first: Int, before: String, last: Int, sort: [TodoOrderBy], filter: TodoExpression): TodoConnection!
  DefaultPriorityPriorityFactorOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
}

"""A connection to a list of items."""
type PriorityFactorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PriorityFactorEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PriorityFactorEdge {
  """The item at the end of the edge"""
  node: PriorityFactor

  """A cursor for use in pagination"""
  cursor: String!
}

input PriorityFactorExpression {
  operator: Operator!
  operands: [PriorityFactorOperand]!
}

enum PriorityFactorField {
  id
  Id
  Beid
  PriorityFactorTypeId
  Name
  Description
  Order
  CreatedUid
  CreatedDate
  ModifiedUid
  ModifiedDate
  MyWorkPriorityId
  IsActive
  IsDefault
}

input PriorityFactorOperand {
  field: PriorityFactorField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PriorityFactorExpression
}

input PriorityFactorOrderBy {
  field: PriorityFactorField
  direction: OrderByDirection = Ascending
}

type PriorityFactorType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  PriorityFactorTypeOnPriorityFactors(after: String, first: Int, before: String, last: Int, sort: [PriorityFactorOrderBy], filter: PriorityFactorExpression): PriorityFactorConnection!
}

"""A connection to a list of items."""
type PriorityFactorTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PriorityFactorTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PriorityFactorTypeEdge {
  """The item at the end of the edge"""
  node: PriorityFactorType

  """A cursor for use in pagination"""
  cursor: String!
}

input PriorityFactorTypeExpression {
  operator: Operator!
  operands: [PriorityFactorTypeOperand]!
}

enum PriorityFactorTypeField {
  id
  Id
  Name
}

input PriorityFactorTypeOperand {
  field: PriorityFactorTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PriorityFactorTypeExpression
}

input PriorityFactorTypeOrderBy {
  field: PriorityFactorTypeField
  direction: OrderByDirection = Ascending
}

type PriorityMatrix implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ImpactPriorityFactor: PriorityFactor!
  ImpactId: Int!
  UrgencyPriorityFactor: PriorityFactor!
  UrgencyId: Int!
  PriorityPriorityFactor: PriorityFactor!
  PriorityId: Int!
}

"""A connection to a list of items."""
type PriorityMatrixConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PriorityMatrixEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PriorityMatrixEdge {
  """The item at the end of the edge"""
  node: PriorityMatrix

  """A cursor for use in pagination"""
  cursor: String!
}

input PriorityMatrixExpression {
  operator: Operator!
  operands: [PriorityMatrixOperand]!
}

enum PriorityMatrixField {
  id
  Id
  Beid
  ImpactId
  UrgencyId
  PriorityId
}

input PriorityMatrixOperand {
  field: PriorityMatrixField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PriorityMatrixExpression
}

input PriorityMatrixOrderBy {
  field: PriorityMatrixField
  direction: OrderByDirection = Ascending
}

type Process implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity
  Beid: ID
  Name: String
  DateCreated: DateTime!
  DateModified: DateTime
  CreatedByUidUser: User
  CreatedByUid: ID
  ModifiedByUidUser: User
  ModifiedByUid: ID
  IsActive: Boolean!
  ProcessOnProjectProcesses(after: String, first: Int, before: String, last: Int, sort: [ProjectProcessOrderBy], filter: ProjectProcessExpression): ProjectProcessConnection!
}

"""A connection to a list of items."""
type ProcessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProcessEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProcessEdge {
  """The item at the end of the edge"""
  node: Process

  """A cursor for use in pagination"""
  cursor: String!
}

input ProcessExpression {
  operator: Operator!
  operands: [ProcessOperand]!
}

enum ProcessField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  CreatedByUid
  ModifiedByUid
  IsActive
}

input ProcessOperand {
  field: ProcessField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProcessExpression
}

input ProcessOrderBy {
  field: ProcessField
  direction: OrderByDirection = Ascending
}

type ProductModel implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  ManufacturerVendor: Vendor!
  ManufacturerId: Int!
  PartNumber: String!
  ProductType: ProductType!
  ProductTypeId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  IsActive: Boolean!
  AppId: Int!
  ProductModelOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
}

"""A connection to a list of items."""
type ProductModelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductModelEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProductModelEdge {
  """The item at the end of the edge"""
  node: ProductModel

  """A cursor for use in pagination"""
  cursor: String!
}

input ProductModelExpression {
  operator: Operator!
  operands: [ProductModelOperand]!
}

enum ProductModelField {
  id
  Id
  Beid
  Name
  Description
  ManufacturerId
  PartNumber
  ProductTypeId
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  IsActive
  AppId
}

input ProductModelOperand {
  field: ProductModelField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProductModelExpression
}

input ProductModelOrderBy {
  field: ProductModelField
  direction: OrderByDirection = Ascending
}

type ProductType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ParTypeProductType: ProductType
  ParTypeId: Int
  Name: String!
  Description: String
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  PathNames: String!
  PathIDs: String!
  Order: Decimal!
  IsActive: Boolean!
  AppId: Int!
  ProductTypeOnProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection!
  ParTypeProductTypeOnProductTypes(after: String, first: Int, before: String, last: Int, sort: [ProductTypeOrderBy], filter: ProductTypeExpression): ProductTypeConnection
}

"""A connection to a list of items."""
type ProductTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProductTypeEdge {
  """The item at the end of the edge"""
  node: ProductType

  """A cursor for use in pagination"""
  cursor: String!
}

input ProductTypeExpression {
  operator: Operator!
  operands: [ProductTypeOperand]!
}

enum ProductTypeField {
  id
  Id
  Beid
  ParTypeId
  Name
  Description
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  PathNames
  PathIDs
  Order
  IsActive
  AppId
}

input ProductTypeOperand {
  field: ProductTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProductTypeExpression
}

input ProductTypeOrderBy {
  field: ProductTypeField
  direction: OrderByDirection = Ascending
}

type Project implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ProjId: Int!
  ProjBeid: ID!
  ProjBeidInt: Int!
  ProjAdmin: ID
  ProjAdmin2: ID
  ProjName: String!
  ProjTypeId: Int
  ProjDesc: String
  ProjDateCreated: DateTime!
  ProjDateModified: DateTime
  ProjPrivate: Int!
  ProjAddContact: Boolean
  ProjActive: Boolean!
  ProjIsGlobal: Boolean
  ProjIsTemplate: Boolean!
  ProjBudget: Decimal
  ProjTimeBudget: Decimal
  ProjExpensesBudget: Decimal
  ProjStartDate: DateTime
  ProjEndDate: DateTime
  ProjApplyMetrics: Boolean
  ProjClientCode: Int
  ProjStatusOverall: Int
  ProjStatusComments: String
  ProjDateStatusModified: DateTime
  ProjDeducts: Decimal!
  ProjUpdateStartEnd: Boolean
  ProjClientContactName: String
  ProjClientContactEmail: String
  ProjClientContactUid: ID
  SponsorProfilePicturePath: String
  ProjEstHours: Float
  ProjPctComp: Int
  ProjInternalTypeId: String
  ProjBenefits: String
  ProjRequirements: String
  ProjStartDateInitial: DateTime
  ProjEndDateInitial: DateTime
  ProjEstHoursInitial: Float
  ProjStatusId: Int
  ProjOnHoldUntil: Date
  ProjHealthId: Int!
  ProjCreatedByUid: ID
  ProjModifiedByUid: ID
  ProjPeriodType: Int
  ProjPeriods: Int
  ProjCost: Decimal
  ProjIncome: Decimal
  ProjNpv: Decimal
  ProjIrr: Float
  ProjDiscountRate: Float
  ProjRoi: Float
  ProjPaybackPeriod: Float
  ProjTimeApprovedByReportsToUid: Boolean!
  ProjStartDateBaseline: DateTime
  ProjEndDateBaseline: DateTime
  ProjBaselineId: Int
  ProjBaselinedDateUtc: DateTime
  ProjBaselinedUid: ID
  ProjEstMinutesBaseline: Int
  ProjTimeBudgetBaseline: Int
  ProjExpensesBudgetBaseline: Int
  ProjRefType: String
  ProjRefId: String
  ProjTimeBudgetInitial: Decimal
  ProjExpensesBudgetInitial: Decimal
  ProjBudgetInitial: Decimal
  ProjScheduleHoursByPlan: Boolean!
  ProjCurrentEvaluatorUid: ID
  ProjPriorityId: Int
  ProjPriorityName: String!
  ProjStatusModifiedByUid: ID
  CategoryId: Int!
  ProjUseMonthlyExpenses: Boolean!
  CategoryName: String!
  ProjIsAlertOnassignedHoursExceededOn: Boolean!
  ProjIsAlertOnEstimatedHoursExceededOn: Boolean!
  RequestWorkflowId: Int
  ProjUseRemainingHours: Boolean!
  ServiceId: Int!
  ProjFormId: Int
  ProjClosedDateUtc: DateTime
  ProjClosedByUid: ID
  ProjScoreCardId: Int
}

type ProjectBenefit implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  BenBenefit: Benefit!
  BenId: Int!
  Year: Int!
  Value: Decimal!
}

"""A connection to a list of items."""
type ProjectBenefitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectBenefitEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectBenefitEdge {
  """The item at the end of the edge"""
  node: ProjectBenefit

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectBenefitExpression {
  operator: Operator!
  operands: [ProjectBenefitOperand]!
}

enum ProjectBenefitField {
  id
  Id
  ProjId
  BenId
  Year
  Value
}

input ProjectBenefitOperand {
  field: ProjectBenefitField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectBenefitExpression
}

input ProjectBenefitOrderBy {
  field: ProjectBenefitField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type ProjectCriterion implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  CrCriterion: Criterion!
  Crid: Int!
  CrcCriteriaChoice: CriteriaChoice!
  Crcid: Int!
}

"""A connection to a list of items."""
type ProjectCriterionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectCriterionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectCriterionEdge {
  """The item at the end of the edge"""
  node: ProjectCriterion

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectCriterionExpression {
  operator: Operator!
  operands: [ProjectCriterionOperand]!
}

enum ProjectCriterionField {
  id
  Id
  ProjId
  Crid
  Crcid
}

input ProjectCriterionOperand {
  field: ProjectCriterionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectCriterionExpression
}

input ProjectCriterionOrderBy {
  field: ProjectCriterionField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge"""
  node: Project

  """A cursor for use in pagination"""
  cursor: String!
}

type ProjectExpenseForecast implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjId: Int!
  Eacid: Int!
  Quantity: Float!
  Cost: Decimal!
  Total: Decimal!
  Comments: String
  Year: Int
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  StartDate: DateTime
  EndDate: DateTime
  ForecastProjectExpenseForecastOnProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection!
}

"""A connection to a list of items."""
type ProjectExpenseForecastConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectExpenseForecastEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectExpenseForecastEdge {
  """The item at the end of the edge"""
  node: ProjectExpenseForecast

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectExpenseForecastExpression {
  operator: Operator!
  operands: [ProjectExpenseForecastOperand]!
}

enum ProjectExpenseForecastField {
  id
  Id
  ProjId
  Eacid
  Quantity
  Cost
  Total
  Comments
  Year
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  StartDate
  EndDate
}

input ProjectExpenseForecastOperand {
  field: ProjectExpenseForecastField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectExpenseForecastExpression
}

input ProjectExpenseForecastOrderBy {
  field: ProjectExpenseForecastField
  direction: OrderByDirection = Ascending
}

type ProjectExpenseSchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ForecastProjectExpenseForecast: ProjectExpenseForecast!
  ForecastId: Int!
  Team: Team!
  TeamId: Int!
  Year: Int!
  Month: Int!
  YearMonth: Int!
  Cost: Decimal!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ProjectExpenseScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectExpenseScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectExpenseScheduleEdge {
  """The item at the end of the edge"""
  node: ProjectExpenseSchedule

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectExpenseScheduleExpression {
  operator: Operator!
  operands: [ProjectExpenseScheduleOperand]!
}

enum ProjectExpenseScheduleField {
  id
  Id
  BeidInt
  ForecastId
  TeamId
  Year
  Month
  YearMonth
  Cost
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ProjectExpenseScheduleOperand {
  field: ProjectExpenseScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectExpenseScheduleExpression
}

input ProjectExpenseScheduleOrderBy {
  field: ProjectExpenseScheduleField
  direction: OrderByDirection = Ascending
}

type ProjectExpenseSchedulesBackup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  ForecastId: Int!
  TeamId: Int!
  Year: Int!
  Month: Int!
  YearMonth: Int!
  Cost: Decimal!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ProjectExpenseSchedulesBackupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectExpenseSchedulesBackupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectExpenseSchedulesBackupEdge {
  """The item at the end of the edge"""
  node: ProjectExpenseSchedulesBackup

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectExpenseSchedulesBackupExpression {
  operator: Operator!
  operands: [ProjectExpenseSchedulesBackupOperand]!
}

enum ProjectExpenseSchedulesBackupField {
  id
  Id
  BeidInt
  ForecastId
  TeamId
  Year
  Month
  YearMonth
  Cost
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ProjectExpenseSchedulesBackupOperand {
  field: ProjectExpenseSchedulesBackupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectExpenseSchedulesBackupExpression
}

input ProjectExpenseSchedulesBackupOrderBy {
  field: ProjectExpenseSchedulesBackupField
  direction: OrderByDirection = Ascending
}

input ProjectExpression {
  operator: Operator!
  operands: [ProjectOperand]!
}

enum ProjectField {
  id
  ProjId
  ProjBeid
  ProjBeidInt
  ProjAdmin
  ProjAdmin2
  ProjName
  ProjTypeId
  ProjDesc
  ProjDateCreated
  ProjDateModified
  ProjPrivate
  ProjAddContact
  ProjActive
  ProjIsGlobal
  ProjIsTemplate
  ProjBudget
  ProjTimeBudget
  ProjExpensesBudget
  ProjStartDate
  ProjEndDate
  ProjApplyMetrics
  ProjClientCode
  ProjStatusOverall
  ProjStatusComments
  ProjDateStatusModified
  ProjDeducts
  ProjUpdateStartEnd
  ProjClientContactName
  ProjClientContactEmail
  ProjClientContactUid
  SponsorProfilePicturePath
  ProjEstHours
  ProjPctComp
  ProjInternalTypeId
  ProjBenefits
  ProjRequirements
  ProjStartDateInitial
  ProjEndDateInitial
  ProjEstHoursInitial
  ProjStatusId
  ProjOnHoldUntil
  ProjHealthId
  ProjCreatedByUid
  ProjModifiedByUid
  ProjPeriodType
  ProjPeriods
  ProjCost
  ProjIncome
  ProjNpv
  ProjIrr
  ProjDiscountRate
  ProjRoi
  ProjPaybackPeriod
  ProjTimeApprovedByReportsToUid
  ProjStartDateBaseline
  ProjEndDateBaseline
  ProjBaselineId
  ProjBaselinedDateUtc
  ProjBaselinedUid
  ProjEstMinutesBaseline
  ProjTimeBudgetBaseline
  ProjExpensesBudgetBaseline
  ProjRefType
  ProjRefId
  ProjTimeBudgetInitial
  ProjExpensesBudgetInitial
  ProjBudgetInitial
  ProjScheduleHoursByPlan
  ProjCurrentEvaluatorUid
  ProjPriorityId
  ProjPriorityName
  ProjStatusModifiedByUid
  CategoryId
  ProjUseMonthlyExpenses
  CategoryName
  ProjIsAlertOnassignedHoursExceededOn
  ProjIsAlertOnEstimatedHoursExceededOn
  RequestWorkflowId
  ProjUseRemainingHours
  ServiceId
  ProjFormId
  ProjClosedDateUtc
  ProjClosedByUid
  ProjScoreCardId
}

type ProjectGoal implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Goal: Goal!
  GoalId: Int!
  ProjTeam: Team!
  ProjId: Int!
  Comments: String
  Uid: ID
  DateCreated: DateTime
}

"""A connection to a list of items."""
type ProjectGoalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectGoalEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectGoalEdge {
  """The item at the end of the edge"""
  node: ProjectGoal

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectGoalExpression {
  operator: Operator!
  operands: [ProjectGoalOperand]!
}

enum ProjectGoalField {
  id
  Id
  GoalId
  ProjId
  Comments
  Uid
  DateCreated
}

input ProjectGoalOperand {
  field: ProjectGoalField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectGoalExpression
}

input ProjectGoalOrderBy {
  field: ProjectGoalField
  direction: OrderByDirection = Ascending
}

type ProjectHealthHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  ProjTeam: Team!
  ProjId: Int!
  OldHealthHealthChoice: HealthChoice!
  OldHealthId: Int!
  NewHealthHealthChoice: HealthChoice!
  NewHealthId: Int!
  ItemUpdateId: Int!
}

"""A connection to a list of items."""
type ProjectHealthHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectHealthHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectHealthHistoryEdge {
  """The item at the end of the edge"""
  node: ProjectHealthHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectHealthHistoryExpression {
  operator: Operator!
  operands: [ProjectHealthHistoryOperand]!
}

enum ProjectHealthHistoryField {
  id
  Id
  BeidInt
  ProjId
  OldHealthId
  NewHealthId
  ItemUpdateId
}

input ProjectHealthHistoryOperand {
  field: ProjectHealthHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectHealthHistoryExpression
}

input ProjectHealthHistoryOrderBy {
  field: ProjectHealthHistoryField
  direction: OrderByDirection = Ascending
}

input ProjectOperand {
  field: ProjectField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectExpression
}

input ProjectOrderBy {
  field: ProjectField
  direction: OrderByDirection = Ascending
}

type ProjectPeriod implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjId: Int!
  Cost: Decimal
  Income: Decimal
  Period: Int!
}

"""A connection to a list of items."""
type ProjectPeriodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectPeriodEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectPeriodEdge {
  """The item at the end of the edge"""
  node: ProjectPeriod

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectPeriodExpression {
  operator: Operator!
  operands: [ProjectPeriodOperand]!
}

enum ProjectPeriodField {
  id
  Id
  ProjId
  Cost
  Income
  Period
}

input ProjectPeriodOperand {
  field: ProjectPeriodField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectPeriodExpression
}

input ProjectPeriodOrderBy {
  field: ProjectPeriodField
  direction: OrderByDirection = Ascending
}

type ProjectProcess implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  Process: Process!
  ProcessId: Int!
  Comments: String
  Uid: ID
  DateCreated: DateTime
}

"""A connection to a list of items."""
type ProjectProcessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectProcessEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectProcessEdge {
  """The item at the end of the edge"""
  node: ProjectProcess

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectProcessExpression {
  operator: Operator!
  operands: [ProjectProcessOperand]!
}

enum ProjectProcessField {
  id
  Id
  ProjId
  ProcessId
  Comments
  Uid
  DateCreated
}

input ProjectProcessOperand {
  field: ProjectProcessField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectProcessExpression
}

input ProjectProcessOrderBy {
  field: ProjectProcessField
  direction: OrderByDirection = Ascending
}

type ProjectRisk implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  Risk: Risk!
  RiskId: Int!
  Value: Int!
  Comments: String
  Uid: ID
  DateCreated: DateTime
  ModifiedUid: ID
  DateModified: DateTime
}

"""A connection to a list of items."""
type ProjectRiskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectRiskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectRiskEdge {
  """The item at the end of the edge"""
  node: ProjectRisk

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectRiskExpression {
  operator: Operator!
  operands: [ProjectRiskOperand]!
}

enum ProjectRiskField {
  id
  Id
  ProjId
  RiskId
  Value
  Comments
  Uid
  DateCreated
  ModifiedUid
  DateModified
}

input ProjectRiskOperand {
  field: ProjectRiskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectRiskExpression
}

input ProjectRiskOrderBy {
  field: ProjectRiskField
  direction: OrderByDirection = Ascending
}

type ProjectsandRequestsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  AccountId: Int
  StartDate: DateTime
  EndDate: DateTime
  ModifiedDate: DateTime
  StatusModifiedDate: DateTime
  SubmittedDate: DateTime
  ProjectName: String!
  Description: String
  Requirements: String
  Budget: Decimal
  ProjectCreatedDate: DateTime!
  EstimatedHours: Float
  ItemType: String
  ItemTypeId: String
  ProjectStatusId: Int
  StatusId: Int
  StatusName: String
  StatusDescription: String
  OnHoldUntilDate: Date
  HealthId: Int!
  HealthName: String
  ClassificationId: Int!
  Classification: String!
  AccountName: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  Score: Float
  ProjectTypeId: Int
  ProjectType: String
  PriorityId: Int
  PriorityName: String
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  SponsorUid: ID
  SponsorName: String
  SponsorEmail: String
  SponsorRefId: Int
  ProjPct: Float
  ActualHours: Decimal!
  BaseEndDate: DateTime
  Active: Boolean
  BaseHours: Float
  BaseStartDate: DateTime
  ManagerUid: ID
  ManagerName: String
  AltManagerUid: ID
  AltManagerName: String
  StatusComments: String
  BudgetUsed: Decimal
  BudgetRemaining: Decimal
  InitialEndDate: DateTime
  InitialHours: Float
  InitialStartDate: DateTime
  InitialBudget: Decimal
  Plans: String
  ActualExpenses: Decimal
  ManagerPct: Int
  ResourceMgmt: String
  CompositeScorePct: Float
  RequestorUid: ID
  RequestorName: String
  EvaluatorUid: ID
  EvaluatorName: String
  WorkflowStepAgeDays: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeWorkDays: Int
  WorkflowTemplateStepId: Int
  Roi: Float
  Npv: Decimal
  Irr: Float
  ProjectRequestStatusId: Int
  ProjectRequestStatusName: String
  CurrentEvaluatorUid: ID
  WorkflowStepId: Int
  WorkflowStepRespNames: String
  OpenInProcessRisksCount: Int
  OpenInProcessRisksCountLink: Int
  PlansCount: Int
  WaterfallCount: Int
  CardWallCount: Int
}

"""A connection to a list of items."""
type ProjectsandRequestsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectsandRequestsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectsandRequestsReportViewEdge {
  """The item at the end of the edge"""
  node: ProjectsandRequestsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectsandRequestsReportViewExpression {
  operator: Operator!
  operands: [ProjectsandRequestsReportViewOperand]!
}

enum ProjectsandRequestsReportViewField {
  id
  Id
  Beid
  AccountId
  StartDate
  EndDate
  ModifiedDate
  StatusModifiedDate
  SubmittedDate
  ProjectName
  Description
  Requirements
  Budget
  ProjectCreatedDate
  EstimatedHours
  ItemType
  ItemTypeId
  ProjectStatusId
  StatusId
  StatusName
  StatusDescription
  OnHoldUntilDate
  HealthId
  HealthName
  ClassificationId
  Classification
  AccountName
  GoalsScore
  RisksScore
  ScorecardScore
  Score
  ProjectTypeId
  ProjectType
  PriorityId
  PriorityName
  ExpensesBudget
  TimeBudget
  SponsorUid
  SponsorName
  SponsorEmail
  SponsorRefId
  ProjPct
  ActualHours
  BaseEndDate
  Active
  BaseHours
  BaseStartDate
  ManagerUid
  ManagerName
  AltManagerUid
  AltManagerName
  StatusComments
  BudgetUsed
  BudgetRemaining
  InitialEndDate
  InitialHours
  InitialStartDate
  InitialBudget
  Plans
  ActualExpenses
  ManagerPct
  ResourceMgmt
  CompositeScorePct
  RequestorUid
  RequestorName
  EvaluatorUid
  EvaluatorName
  WorkflowStepAgeDays
  WorkflowStepStartedDate
  WorkflowStepAgeWorkDays
  WorkflowTemplateStepId
  Roi
  Npv
  Irr
  ProjectRequestStatusId
  ProjectRequestStatusName
  CurrentEvaluatorUid
  WorkflowStepId
  WorkflowStepRespNames
  OpenInProcessRisksCount
  OpenInProcessRisksCountLink
  PlansCount
  WaterfallCount
  CardWallCount
}

input ProjectsandRequestsReportViewOperand {
  field: ProjectsandRequestsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectsandRequestsReportViewExpression
}

input ProjectsandRequestsReportViewOrderBy {
  field: ProjectsandRequestsReportViewField
  direction: OrderByDirection = Ascending
}

type ProjectsAndTicketsView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  Id: Int!
  ComponentId: Int!
  InternalTypeId: String
  Name: String!
  TypeId: Int
  CategoryId: Int
  StatusId: Int
  PriorityId: Int
  AccountId: Int
  AdminUid: ID
  TimeApprovedByReportsTo: Int!
  ScheduleHoursByPlan: Int!
  IsActive: Int!
  AdminFullName: String
  AdminEmail: String
  ServiceId: Int!
}

"""A connection to a list of items."""
type ProjectsAndTicketsViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectsAndTicketsViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectsAndTicketsViewEdge {
  """The item at the end of the edge"""
  node: ProjectsAndTicketsView

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectsAndTicketsViewExpression {
  operator: Operator!
  operands: [ProjectsAndTicketsViewOperand]!
}

enum ProjectsAndTicketsViewField {
  id
  Beid
  Id
  ComponentId
  InternalTypeId
  Name
  TypeId
  CategoryId
  StatusId
  PriorityId
  AccountId
  AdminUid
  TimeApprovedByReportsTo
  ScheduleHoursByPlan
  IsActive
  AdminFullName
  AdminEmail
  ServiceId
}

input ProjectsAndTicketsViewOperand {
  field: ProjectsAndTicketsViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectsAndTicketsViewExpression
}

input ProjectsAndTicketsViewOrderBy {
  field: ProjectsAndTicketsViewField
  direction: OrderByDirection = Ascending
}

type ProjectSection implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Name: String!
  DisplayName: String!
  Order: Float
  PageUrl: String
  DateCreated: DateTime!
  RequiredForRequest: Boolean!
  RequiredForReview: Boolean!
  IsActive: Boolean!
  RequiredForProject: Boolean
}

"""A connection to a list of items."""
type ProjectSectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectSectionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectSectionEdge {
  """The item at the end of the edge"""
  node: ProjectSection

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectSectionExpression {
  operator: Operator!
  operands: [ProjectSectionOperand]!
}

enum ProjectSectionField {
  id
  Id
  Beid
  Name
  DisplayName
  Order
  PageUrl
  DateCreated
  RequiredForRequest
  RequiredForReview
  IsActive
  RequiredForProject
}

input ProjectSectionOperand {
  field: ProjectSectionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectSectionExpression
}

input ProjectSectionOrderBy {
  field: ProjectSectionField
  direction: OrderByDirection = Ascending
}

type ProjectSectionStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  ProjectSection: ProjectSection!
  ProjectSectionId: Int!
  DateCreated: DateTime!
  RequiredForReview: Boolean!
  ReviewIsComplete: Boolean!
  ReviewCompletedByUid: ID
  ReviewDateCompleted: DateTime
  RequiredForRequest: Boolean!
  RequestIsComplete: Boolean!
  RequestCompletedByUid: ID
  RequestDateCompleted: DateTime
  RequiredForProject: Boolean
}

"""A connection to a list of items."""
type ProjectSectionStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectSectionStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectSectionStatusEdge {
  """The item at the end of the edge"""
  node: ProjectSectionStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectSectionStatusExpression {
  operator: Operator!
  operands: [ProjectSectionStatusOperand]!
}

enum ProjectSectionStatusField {
  id
  Id
  ProjId
  ProjectSectionId
  DateCreated
  RequiredForReview
  ReviewIsComplete
  ReviewCompletedByUid
  ReviewDateCompleted
  RequiredForRequest
  RequestIsComplete
  RequestCompletedByUid
  RequestDateCompleted
  RequiredForProject
}

input ProjectSectionStatusOperand {
  field: ProjectSectionStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectSectionStatusExpression
}

input ProjectSectionStatusOrderBy {
  field: ProjectSectionStatusField
  direction: OrderByDirection = Ascending
}

type ProjectServiceLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  DateCreated: DateTime!
  Text: String!
}

"""A connection to a list of items."""
type ProjectServiceLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectServiceLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectServiceLogEdge {
  """The item at the end of the edge"""
  node: ProjectServiceLog

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectServiceLogExpression {
  operator: Operator!
  operands: [ProjectServiceLogOperand]!
}

enum ProjectServiceLogField {
  id
  Id
  Beid
  DateCreated
  Text
}

input ProjectServiceLogOperand {
  field: ProjectServiceLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectServiceLogExpression
}

input ProjectServiceLogOrderBy {
  field: ProjectServiceLogField
  direction: OrderByDirection = Ascending
}

type ProjectsExt implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Team: Team!
  Id: Int!
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  CompositeScore: Float
  CompositeScorePct: Float
  DateScored: DateTime
  Bac: Decimal
  Pv: Float
  Ev: Float
  Ac: Float
  Atd: Float
  Etc: Float
  Pwp: Float
  Ewp: Float
  KpiCoreDate: DateTime
  Eac: Float
  Cpi: Float
  Spi: Float
  Sv: Float
  Cv: Float
  Pedv: Float
  Vac: Float
  Setc: Float
  Seac: Float
  Svac: Float
  Cspi: Float
  Wei: Float
  Pvc: Float
  AllowProjectTime: Boolean!
  Cvi: Float
  AllocationEditMode: Int!
  IsPublic: Boolean!
  IsPublished: Boolean!
  Pvcb: Float
  Eacb: Float
  Atdb: Float
  Etcb: Float
}

"""A connection to a list of items."""
type ProjectsExtConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectsExtEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectsExtEdge {
  """The item at the end of the edge"""
  node: ProjectsExt

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectsExtExpression {
  operator: Operator!
  operands: [ProjectsExtOperand]!
}

enum ProjectsExtField {
  id
  Id
  GoalsScore
  RisksScore
  ScorecardScore
  CompositeScore
  CompositeScorePct
  DateScored
  Bac
  Pv
  Ev
  Ac
  Atd
  Etc
  Pwp
  Ewp
  KpiCoreDate
  Eac
  Cpi
  Spi
  Sv
  Cv
  Pedv
  Vac
  Setc
  Seac
  Svac
  Cspi
  Wei
  Pvc
  AllowProjectTime
  Cvi
  AllocationEditMode
  IsPublic
  IsPublished
  Pvcb
  Eacb
  Atdb
  Etcb
}

input ProjectsExtOperand {
  field: ProjectsExtField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectsExtExpression
}

input ProjectsExtOrderBy {
  field: ProjectsExtField
  direction: OrderByDirection = Ascending
}

type ProjectsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjectId: Int!
  Beid: ID!
  ItemTypeName: String
  Name: String!
  Description: String
  Requirements: String
  Budget: Decimal
  Active: Boolean!
  DateCreated: DateTime!
  CreatedByUid: ID
  CreatedByFullName: String
  SubmittedDate: DateTime
  StartDate: DateTime
  EndDate: DateTime
  StatusId: Int
  StatusName: String
  StatusDescription: String
  OnHoldUntilDate: Date
  HealthId: Int!
  HealthName: String!
  Expenses: Decimal!
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  EstimatedHours: Float
  ProjectOpen: Int!
  CreatedFromProjectRequest: Boolean
  BudgetUsedAmount: Decimal
  RemaningBudgetAmount: Decimal
  ActualHours: Decimal!
  PctCompActEst: Float
  PctComp: Decimal
  StartDateInitial: DateTime
  EndDateInitial: DateTime
  EstHoursInitial: Float
  BudgetInitial: Decimal
  StartDateBaseline: DateTime
  EndDateBaseline: DateTime
  HoursBaseline: Float
  TimeBudgetBaseline: Int
  ExpenseBudgetBaseline: Int
  DateStatusModified: DateTime
  ClosedDateUtc: DateTime
  SponsorName: String
  SponsorEmail: String
  SponsorRefId: Int
  PriorityId: Int
  ResourceMgmt: String!
  PriorityName: String
  PriorityOrder: Float
  ManagerUid: ID
  AltManagerUid: ID
  Manager: String
  AltManager: String
  ProjectTypeId: Int
  ProjectType: String
  ProjectTypeCategoryId: Int
  ProjectTypeCategoryName: String
  Account: String
  AccountId: Int
  AccountCode: String
  StatusComments: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  CompositeScore: Float
  CompositeScorePct: Float
  Bac: Decimal
  Pv: Float
  Ev: Float
  Ac: Float
  Atd: Float
  Atdb: Float
  Etc: Float
  Etcb: Float
  Pwp: Float
  Ewp: Float
  Eac: Float
  Eacb: Float
  Cpi: Float
  Spi: Float
  Sv: Float
  Cv: Float
  Pedv: Float
  Vac: Float
  Setc: Float
  Seac: Float
  Svac: Float
  Cspi: Float
  Wei: Float
  Pvc: Float
  Pvcb: Float
  Cvi: Float
  IsPublic: Boolean
  IsPublished: Boolean
  MilestonesCount: Int
  Mode: String!
  IsAgile: Int!
  Plans: String!
  CategoryId: Int!
  CategoryName: String!
  IndustryId: Int
  IndustryName: String
  ServiceId: Int!
  ServiceName: String!
  ServiceCategoryId: Int!
  ServiceCategoryName: String!
  OpenInProcessIssuesCount: Int
  OpenInProcessIssuesCountLink: Int
  OpenInProcessRisksCount: Int
  OpenInProcessRisksCountLink: Int
  PlansCount: Int
  WaterfallCount: Int
  CardWallCount: Int
}

"""A connection to a list of items."""
type ProjectsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectsReportViewEdge {
  """The item at the end of the edge"""
  node: ProjectsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectsReportViewExpression {
  operator: Operator!
  operands: [ProjectsReportViewOperand]!
}

enum ProjectsReportViewField {
  id
  Id
  ProjectId
  Beid
  ItemTypeName
  Name
  Description
  Requirements
  Budget
  Active
  DateCreated
  CreatedByUid
  CreatedByFullName
  SubmittedDate
  StartDate
  EndDate
  StatusId
  StatusName
  StatusDescription
  OnHoldUntilDate
  HealthId
  HealthName
  Expenses
  ExpensesBudget
  TimeBudget
  EstimatedHours
  ProjectOpen
  CreatedFromProjectRequest
  BudgetUsedAmount
  RemaningBudgetAmount
  ActualHours
  PctCompActEst
  PctComp
  StartDateInitial
  EndDateInitial
  EstHoursInitial
  BudgetInitial
  StartDateBaseline
  EndDateBaseline
  HoursBaseline
  TimeBudgetBaseline
  ExpenseBudgetBaseline
  DateStatusModified
  ClosedDateUtc
  SponsorName
  SponsorEmail
  SponsorRefId
  PriorityId
  ResourceMgmt
  PriorityName
  PriorityOrder
  ManagerUid
  AltManagerUid
  Manager
  AltManager
  ProjectTypeId
  ProjectType
  ProjectTypeCategoryId
  ProjectTypeCategoryName
  Account
  AccountId
  AccountCode
  StatusComments
  GoalsScore
  RisksScore
  ScorecardScore
  CompositeScore
  CompositeScorePct
  Bac
  Pv
  Ev
  Ac
  Atd
  Atdb
  Etc
  Etcb
  Pwp
  Ewp
  Eac
  Eacb
  Cpi
  Spi
  Sv
  Cv
  Pedv
  Vac
  Setc
  Seac
  Svac
  Cspi
  Wei
  Pvc
  Pvcb
  Cvi
  IsPublic
  IsPublished
  MilestonesCount
  Mode
  IsAgile
  Plans
  CategoryId
  CategoryName
  IndustryId
  IndustryName
  ServiceId
  ServiceName
  ServiceCategoryId
  ServiceCategoryName
  OpenInProcessIssuesCount
  OpenInProcessIssuesCountLink
  OpenInProcessRisksCount
  OpenInProcessRisksCountLink
  PlansCount
  WaterfallCount
  CardWallCount
}

input ProjectsReportViewOperand {
  field: ProjectsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectsReportViewExpression
}

input ProjectsReportViewOrderBy {
  field: ProjectsReportViewField
  direction: OrderByDirection = Ascending
}

type ProjectStakeholder implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  Stake: String!
  DateCreated: DateTime!
  CreatedByUid: ID
  DateModified: DateTime
  ModifiedByUid: ID!
  IsResponsible: Boolean!
  IsAccountable: Boolean!
  IsConsulted: Boolean!
  IsInformed: Boolean!
  UidUser: User!
  Uid: ID!
}

"""A connection to a list of items."""
type ProjectStakeholderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectStakeholderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectStakeholderEdge {
  """The item at the end of the edge"""
  node: ProjectStakeholder

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectStakeholderExpression {
  operator: Operator!
  operands: [ProjectStakeholderOperand]!
}

enum ProjectStakeholderField {
  id
  Id
  ProjId
  Stake
  DateCreated
  CreatedByUid
  DateModified
  ModifiedByUid
  IsResponsible
  IsAccountable
  IsConsulted
  IsInformed
  Uid
}

input ProjectStakeholderOperand {
  field: ProjectStakeholderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectStakeholderExpression
}

input ProjectStakeholderOrderBy {
  field: ProjectStakeholderField
  direction: OrderByDirection = Ascending
}

type ProjectSystem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  SysSystem: System!
  SysId: Int!
  Comments: String
  Uid: ID
  DateCreated: DateTime
}

"""A connection to a list of items."""
type ProjectSystemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectSystemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectSystemEdge {
  """The item at the end of the edge"""
  node: ProjectSystem

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectSystemExpression {
  operator: Operator!
  operands: [ProjectSystemOperand]!
}

enum ProjectSystemField {
  id
  Id
  ProjId
  SysId
  Comments
  Uid
  DateCreated
}

input ProjectSystemOperand {
  field: ProjectSystemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectSystemExpression
}

input ProjectSystemOrderBy {
  field: ProjectSystemField
  direction: OrderByDirection = Ascending
}

type ProjectTimeForecast implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjId: Int!
  Frid: Int!
  StartDate: DateTime!
  EndDate: DateTime!
  Hours: Float!
  Cost: Decimal!
  Total: Decimal!
  WorkDays: Int!
  PtfProjectTimeForecastOnSchedulesRequests(after: String, first: Int, before: String, last: Int, sort: [SchedulesRequestOrderBy], filter: SchedulesRequestExpression): SchedulesRequestConnection!
}

"""A connection to a list of items."""
type ProjectTimeForecastConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectTimeForecastEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectTimeForecastEdge {
  """The item at the end of the edge"""
  node: ProjectTimeForecast

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectTimeForecastExpression {
  operator: Operator!
  operands: [ProjectTimeForecastOperand]!
}

enum ProjectTimeForecastField {
  id
  Id
  ProjId
  Frid
  StartDate
  EndDate
  Hours
  Cost
  Total
  WorkDays
}

input ProjectTimeForecastOperand {
  field: ProjectTimeForecastField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectTimeForecastExpression
}

input ProjectTimeForecastOrderBy {
  field: ProjectTimeForecastField
  direction: OrderByDirection = Ascending
}

type ProjectType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  PtId: Int!
  PtAppId: Int
  PtBeid: ID!
  PtName: String!
  PtDateCreated: DateTime!
  PtDateModified: DateTime!
  PtCreatedByUid: ID
  PtModifiedByUid: ID
  PtPrimaryUid: ID
  PtComponentId: Int!
  PtSendAlert: Boolean!
  PtOtherEmailAddresses: String
  PtCategoryId: Int!
  PtDescription: String
  PtUseMonthlySchedules: Boolean!
  AllowGroups: Boolean!
  DefaultSlaid: Int!
  IsActive: Boolean!
  WorkspaceId: Int!
  ReviewingGroupId: Int!
  ReviewingGroupName: String!
  DefaultSlaName: String!
  DefaultSlaIsActive: Boolean!
}

"""A connection to a list of items."""
type ProjectTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ProjectTypeEdge {
  """The item at the end of the edge"""
  node: ProjectType

  """A cursor for use in pagination"""
  cursor: String!
}

input ProjectTypeExpression {
  operator: Operator!
  operands: [ProjectTypeOperand]!
}

enum ProjectTypeField {
  id
  PtId
  PtAppId
  PtBeid
  PtName
  PtDateCreated
  PtDateModified
  PtCreatedByUid
  PtModifiedByUid
  PtPrimaryUid
  PtComponentId
  PtSendAlert
  PtOtherEmailAddresses
  PtCategoryId
  PtDescription
  PtUseMonthlySchedules
  AllowGroups
  DefaultSlaid
  IsActive
  WorkspaceId
  ReviewingGroupId
  ReviewingGroupName
  DefaultSlaName
  DefaultSlaIsActive
}

input ProjectTypeOperand {
  field: ProjectTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ProjectTypeExpression
}

input ProjectTypeOrderBy {
  field: ProjectTypeField
  direction: OrderByDirection = Ascending
}

type PublishedItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  PublishContext: String!
  Component: Component!
  ComponentId: Int!
  ItemId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type PublishedItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PublishedItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type PublishedItemEdge {
  """The item at the end of the edge"""
  node: PublishedItem

  """A cursor for use in pagination"""
  cursor: String!
}

input PublishedItemExpression {
  operator: Operator!
  operands: [PublishedItemOperand]!
}

enum PublishedItemField {
  id
  Id
  Beid
  PublishContext
  ComponentId
  ItemId
  CreatedUid
  CreatedDateUtc
}

input PublishedItemOperand {
  field: PublishedItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: PublishedItemExpression
}

input PublishedItemOrderBy {
  field: PublishedItemField
  direction: OrderByDirection = Ascending
}

"""Query Types generated by Simplicity."""
type Query {
  Images(after: String, first: Int, before: String, last: Int, sort: [ImageOrderBy], filter: ImageExpression): ImageConnection
  AccountsReportViews(after: String, first: Int, before: String, last: Int, sort: [AccountsReportViewOrderBy], filter: AccountsReportViewExpression): AccountsReportViewConnection
  ActualHoursByWeeks(after: String, first: Int, before: String, last: Int, sort: [ActualHoursByWeekOrderBy], filter: ActualHoursByWeekExpression): ActualHoursByWeekConnection
  ActualHoursReportViews(after: String, first: Int, before: String, last: Int, sort: [ActualHoursReportViewOrderBy], filter: ActualHoursReportViewExpression): ActualHoursReportViewConnection
  ActualHoursViews(after: String, first: Int, before: String, last: Int, sort: [ActualHoursViewOrderBy], filter: ActualHoursViewExpression): ActualHoursViewConnection
  Adjustments(after: String, first: Int, before: String, last: Int, sort: [AdjustmentOrderBy], filter: AdjustmentExpression): AdjustmentConnection
  AdminLogs(after: String, first: Int, before: String, last: Int, sort: [AdminLogOrderBy], filter: AdminLogExpression): AdminLogConnection
  Alerts(after: String, first: Int, before: String, last: Int, sort: [AlertOrderBy], filter: AlertExpression): AlertConnection
  AnnouncementHistories(after: String, first: Int, before: String, last: Int, sort: [AnnouncementHistoryOrderBy], filter: AnnouncementHistoryExpression): AnnouncementHistoryConnection
  Announcements(after: String, first: Int, before: String, last: Int, sort: [AnnouncementOrderBy], filter: AnnouncementExpression): AnnouncementConnection
  AnnouncementsTus(after: String, first: Int, before: String, last: Int, sort: [AnnouncementsTuOrderBy], filter: AnnouncementsTuExpression): AnnouncementsTuConnection
  AppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection
  ApplicationPurposes(after: String, first: Int, before: String, last: Int, sort: [ApplicationPurposeOrderBy], filter: ApplicationPurposeExpression): ApplicationPurposeConnection
  Applications(after: String, first: Int, before: String, last: Int, sort: [ApplicationOrderBy], filter: ApplicationExpression): ApplicationConnection
  AssetFormSettings(after: String, first: Int, before: String, last: Int, sort: [AssetFormSettingOrderBy], filter: AssetFormSettingExpression): AssetFormSettingConnection
  Assets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  AssetsContracts(after: String, first: Int, before: String, last: Int, sort: [AssetsContractOrderBy], filter: AssetsContractExpression): AssetsContractConnection
  AssetsDepartments(after: String, first: Int, before: String, last: Int, sort: [AssetsDepartmentOrderBy], filter: AssetsDepartmentExpression): AssetsDepartmentConnection
  AssetsReportViews(after: String, first: Int, before: String, last: Int, sort: [AssetsReportViewOrderBy], filter: AssetsReportViewExpression): AssetsReportViewConnection
  AssetStatuses(after: String, first: Int, before: String, last: Int, sort: [AssetStatusOrderBy], filter: AssetStatusExpression): AssetStatusConnection
  AssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection
  AssetsUsers(after: String, first: Int, before: String, last: Int, sort: [AssetsUserOrderBy], filter: AssetsUserExpression): AssetsUserConnection
  AssignedHoursViews(after: String, first: Int, before: String, last: Int, sort: [AssignedHoursViewOrderBy], filter: AssignedHoursViewExpression): AssignedHoursViewConnection
  AssignmentsViews(after: String, first: Int, before: String, last: Int, sort: [AssignmentsViewOrderBy], filter: AssignmentsViewExpression): AssignmentsViewConnection
  Attachments(after: String, first: Int, before: String, last: Int, sort: [AttachmentOrderBy], filter: AttachmentExpression): AttachmentConnection
  AttributeChoices(after: String, first: Int, before: String, last: Int, sort: [AttributeChoiceOrderBy], filter: AttributeChoiceExpression): AttributeChoiceConnection
  AttributeDependencies(after: String, first: Int, before: String, last: Int, sort: [AttributeDependencyOrderBy], filter: AttributeDependencyExpression): AttributeDependencyConnection
  AttributeProtectionAccessLogs(after: String, first: Int, before: String, last: Int, sort: [AttributeProtectionAccessLogOrderBy], filter: AttributeProtectionAccessLogExpression): AttributeProtectionAccessLogConnection
  AttributeProtectionConfigurations(after: String, first: Int, before: String, last: Int, sort: [AttributeProtectionConfigurationOrderBy], filter: AttributeProtectionConfigurationExpression): AttributeProtectionConfigurationConnection
  AttributeProtectionConfigurationLogs(after: String, first: Int, before: String, last: Int, sort: [AttributeProtectionConfigurationLogOrderBy], filter: AttributeProtectionConfigurationLogExpression): AttributeProtectionConfigurationLogConnection
  Attributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
  AttributeSections(after: String, first: Int, before: String, last: Int, sort: [AttributeSectionOrderBy], filter: AttributeSectionExpression): AttributeSectionConnection
  AttributesItems(after: String, first: Int, before: String, last: Int, sort: [AttributesItemOrderBy], filter: AttributesItemExpression): AttributesItemConnection
  AttributeValues(after: String, first: Int, before: String, last: Int, sort: [AttributeValueOrderBy], filter: AttributeValueExpression): AttributeValueConnection
  AuthenticationTypes(after: String, first: Int, before: String, last: Int, sort: [AuthenticationTypeOrderBy], filter: AuthenticationTypeExpression): AuthenticationTypeConnection
  AuthProviders(after: String, first: Int, before: String, last: Int, sort: [AuthProviderOrderBy], filter: AuthProviderExpression): AuthProviderConnection
  AutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  BeAdmins(after: String, first: Int, before: String, last: Int, sort: [BeAdminOrderBy], filter: BeAdminExpression): BeAdminConnection
  BeCustomStyles(after: String, first: Int, before: String, last: Int, sort: [BeCustomStyleOrderBy], filter: BeCustomStyleExpression): BeCustomStyleConnection
  BeDaysOffs(after: String, first: Int, before: String, last: Int, sort: [BeDaysOffOrderBy], filter: BeDaysOffExpression): BeDaysOffConnection
  Benefits(after: String, first: Int, before: String, last: Int, sort: [BenefitOrderBy], filter: BenefitExpression): BenefitConnection
  BillableEntities(after: String, first: Int, before: String, last: Int, sort: [BillableEntityOrderBy], filter: BillableEntityExpression): BillableEntityConnection
  BostonCollegeProjectsandRequests(after: String, first: Int, before: String, last: Int, sort: [BostonCollegeProjectsandRequestOrderBy], filter: BostonCollegeProjectsandRequestExpression): BostonCollegeProjectsandRequestConnection
  BostonCollegeTimeReportsReportViews(after: String, first: Int, before: String, last: Int, sort: [BostonCollegeTimeReportsReportViewOrderBy], filter: BostonCollegeTimeReportsReportViewExpression): BostonCollegeTimeReportsReportViewConnection
  CampaignActions(after: String, first: Int, before: String, last: Int, sort: [CampaignActionOrderBy], filter: CampaignActionExpression): CampaignActionConnection
  Categories(after: String, first: Int, before: String, last: Int, sort: [CategoryOrderBy], filter: CategoryExpression): CategoryConnection
  CincinnatiActualHoursReportViews(after: String, first: Int, before: String, last: Int, sort: [CincinnatiActualHoursReportViewOrderBy], filter: CincinnatiActualHoursReportViewExpression): CincinnatiActualHoursReportViewConnection
  ClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ClientAcctCodeOrderBy], filter: ClientAcctCodeExpression): ClientAcctCodeConnection
  ColoradoSystemTaskAssignmentReportViews(after: String, first: Int, before: String, last: Int, sort: [ColoradoSystemTaskAssignmentReportViewOrderBy], filter: ColoradoSystemTaskAssignmentReportViewExpression): ColoradoSystemTaskAssignmentReportViewConnection
  ComponentLogs(after: String, first: Int, before: String, last: Int, sort: [ComponentLogOrderBy], filter: ComponentLogExpression): ComponentLogConnection
  Components(after: String, first: Int, before: String, last: Int, sort: [ComponentOrderBy], filter: ComponentExpression): ComponentConnection
  ConfigurationItemExternalSrcs(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemExternalSrcOrderBy], filter: ConfigurationItemExternalSrcExpression): ConfigurationItemExternalSrcConnection
  ConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection
  ConfigurationItemsReportViews(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemsReportViewOrderBy], filter: ConfigurationItemsReportViewExpression): ConfigurationItemsReportViewConnection
  ConfigurationItemTickets(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketOrderBy], filter: ConfigurationItemTicketExpression): ConfigurationItemTicketConnection
  ConfigurationItemTicketTasks(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketTaskOrderBy], filter: ConfigurationItemTicketTaskExpression): ConfigurationItemTicketTaskConnection
  ConfigurationItemTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTypeOrderBy], filter: ConfigurationItemTypeExpression): ConfigurationItemTypeConnection
  ConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection
  ConfigurationRelationshipTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipTypeOrderBy], filter: ConfigurationRelationshipTypeExpression): ConfigurationRelationshipTypeConnection
  ContactInformations(after: String, first: Int, before: String, last: Int, sort: [ContactInformationOrderBy], filter: ContactInformationExpression): ContactInformationConnection
  Contracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection
  ContractsReportViews(after: String, first: Int, before: String, last: Int, sort: [ContractsReportViewOrderBy], filter: ContractsReportViewExpression): ContractsReportViewConnection
  CriteriaChoices(after: String, first: Int, before: String, last: Int, sort: [CriteriaChoiceOrderBy], filter: CriteriaChoiceExpression): CriteriaChoiceConnection
  Criteria(after: String, first: Int, before: String, last: Int, sort: [CriterionOrderBy], filter: CriterionExpression): CriterionConnection
  CustomOperators(after: String, first: Int, before: String, last: Int, sort: [CustomOperatorOrderBy], filter: CustomOperatorExpression): CustomOperatorConnection
  CustomPages(after: String, first: Int, before: String, last: Int, sort: [CustomPageOrderBy], filter: CustomPageExpression): CustomPageConnection
  DeletedConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [DeletedConfigurationItemOrderBy], filter: DeletedConfigurationItemExpression): DeletedConfigurationItemConnection
  DeletedFiles(after: String, first: Int, before: String, last: Int, sort: [DeletedFileOrderBy], filter: DeletedFileExpression): DeletedFileConnection
  DeletedItems(after: String, first: Int, before: String, last: Int, sort: [DeletedItemOrderBy], filter: DeletedItemExpression): DeletedItemConnection
  DesktopLayouts(after: String, first: Int, before: String, last: Int, sort: [DesktopLayoutOrderBy], filter: DesktopLayoutExpression): DesktopLayoutConnection
  DesktopModules(after: String, first: Int, before: String, last: Int, sort: [DesktopModuleOrderBy], filter: DesktopModuleExpression): DesktopModuleConnection
  DesktopModulesBackups(after: String, first: Int, before: String, last: Int, sort: [DesktopModulesBackupOrderBy], filter: DesktopModulesBackupExpression): DesktopModulesBackupConnection
  Desktops(after: String, first: Int, before: String, last: Int, sort: [DesktopOrderBy], filter: DesktopExpression): DesktopConnection
  DownloadApplications(after: String, first: Int, before: String, last: Int, sort: [DownloadApplicationOrderBy], filter: DownloadApplicationExpression): DownloadApplicationConnection
  Downloads(after: String, first: Int, before: String, last: Int, sort: [DownloadOrderBy], filter: DownloadExpression): DownloadConnection
  DwTeamStatusMonths(after: String, first: Int, before: String, last: Int, sort: [DwTeamStatusMonthOrderBy], filter: DwTeamStatusMonthExpression): DwTeamStatusMonthConnection
  DwTeamStatusWeeks(after: String, first: Int, before: String, last: Int, sort: [DwTeamStatusWeekOrderBy], filter: DwTeamStatusWeekExpression): DwTeamStatusWeekConnection
  DwTimeTeamMonths(after: String, first: Int, before: String, last: Int, sort: [DwTimeTeamMonthOrderBy], filter: DwTimeTeamMonthExpression): DwTimeTeamMonthConnection
  DwTimeTeamWeeks(after: String, first: Int, before: String, last: Int, sort: [DwTimeTeamWeekOrderBy], filter: DwTimeTeamWeekExpression): DwTimeTeamWeekConnection
  EmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
  EventAttendees(after: String, first: Int, before: String, last: Int, sort: [EventAttendeeOrderBy], filter: EventAttendeeExpression): EventAttendeeConnection
  Events(after: String, first: Int, before: String, last: Int, sort: [EventOrderBy], filter: EventExpression): EventConnection
  EventUserAlerts(after: String, first: Int, before: String, last: Int, sort: [EventUserAlertOrderBy], filter: EventUserAlertExpression): EventUserAlertConnection
  Exceptions(after: String, first: Int, before: String, last: Int, sort: [ExceptionOrderBy], filter: ExceptionExpression): ExceptionConnection
  ExceptionsViews(after: String, first: Int, before: String, last: Int, sort: [ExceptionsViewOrderBy], filter: ExceptionsViewExpression): ExceptionsViewConnection
  ExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ExpenseAcctCodeOrderBy], filter: ExpenseAcctCodeExpression): ExpenseAcctCodeConnection
  Expenses(after: String, first: Int, before: String, last: Int, sort: [ExpenseOrderBy], filter: ExpenseExpression): ExpenseConnection
  ExpensesReportViews(after: String, first: Int, before: String, last: Int, sort: [ExpensesReportViewOrderBy], filter: ExpensesReportViewExpression): ExpensesReportViewConnection
  FailedEmailDeliveries(after: String, first: Int, before: String, last: Int, sort: [FailedEmailDeliveryOrderBy], filter: FailedEmailDeliveryExpression): FailedEmailDeliveryConnection
  Feedbacks(after: String, first: Int, before: String, last: Int, sort: [FeedbackOrderBy], filter: FeedbackExpression): FeedbackConnection
  FileReferences(after: String, first: Int, before: String, last: Int, sort: [FileReferenceOrderBy], filter: FileReferenceExpression): FileReferenceConnection
  Files(after: String, first: Int, before: String, last: Int, sort: [FileOrderBy], filter: FileExpression): FileConnection
  FileSources(after: String, first: Int, before: String, last: Int, sort: [FileSourceOrderBy], filter: FileSourceExpression): FileSourceConnection
  FileTexts(after: String, first: Int, before: String, last: Int, sort: [FileTextOrderBy], filter: FileTextExpression): FileTextConnection
  Flags(after: String, first: Int, before: String, last: Int, sort: [FlagOrderBy], filter: FlagExpression): FlagConnection
  Folders(after: String, first: Int, before: String, last: Int, sort: [FolderOrderBy], filter: FolderExpression): FolderConnection
  FoldersFilesViews(after: String, first: Int, before: String, last: Int, sort: [FoldersFilesViewOrderBy], filter: FoldersFilesViewExpression): FoldersFilesViewConnection
  ForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection
  ForForums(after: String, first: Int, before: String, last: Int, sort: [ForForumOrderBy], filter: ForForumExpression): ForForumConnection
  ForNotifications(after: String, first: Int, before: String, last: Int, sort: [ForNotificationOrderBy], filter: ForNotificationExpression): ForNotificationConnection
  ForPosts(after: String, first: Int, before: String, last: Int, sort: [ForPostOrderBy], filter: ForPostExpression): ForPostConnection
  Forms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection
  FunctionalRoles(after: String, first: Int, before: String, last: Int, sort: [FunctionalRoleOrderBy], filter: FunctionalRoleExpression): FunctionalRoleConnection
  FunctionalRolesUsers(after: String, first: Int, before: String, last: Int, sort: [FunctionalRolesUserOrderBy], filter: FunctionalRolesUserExpression): FunctionalRolesUserConnection
  Goals(after: String, first: Int, before: String, last: Int, sort: [GoalOrderBy], filter: GoalExpression): GoalConnection
  GroupItems(after: String, first: Int, before: String, last: Int, sort: [GroupItemOrderBy], filter: GroupItemExpression): GroupItemConnection
  Groups(after: String, first: Int, before: String, last: Int, sort: [GroupOrderBy], filter: GroupExpression): GroupConnection
  HealthChoices(after: String, first: Int, before: String, last: Int, sort: [HealthChoiceOrderBy], filter: HealthChoiceExpression): HealthChoiceConnection
  ImMessages(after: String, first: Int, before: String, last: Int, sort: [ImMessageOrderBy], filter: ImMessageExpression): ImMessageConnection
  ImportTasks(after: String, first: Int, before: String, last: Int, sort: [ImportTaskOrderBy], filter: ImportTaskExpression): ImportTaskConnection
  Industries(after: String, first: Int, before: String, last: Int, sort: [IndustryOrderBy], filter: IndustryExpression): IndustryConnection
  Integrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection
  IntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection
  IntegrationTypes(after: String, first: Int, before: String, last: Int, sort: [IntegrationTypeOrderBy], filter: IntegrationTypeExpression): IntegrationTypeConnection
  InternalTypes(after: String, first: Int, before: String, last: Int, sort: [InternalTypeOrderBy], filter: InternalTypeExpression): InternalTypeConnection
  InvoiceHeaders(after: String, first: Int, before: String, last: Int, sort: [InvoiceHeaderOrderBy], filter: InvoiceHeaderExpression): InvoiceHeaderConnection
  InvoiceSettings(after: String, first: Int, before: String, last: Int, sort: [InvoiceSettingOrderBy], filter: InvoiceSettingExpression): InvoiceSettingConnection
  IowaActualHoursReportViews(after: String, first: Int, before: String, last: Int, sort: [IowaActualHoursReportViewOrderBy], filter: IowaActualHoursReportViewExpression): IowaActualHoursReportViewConnection
  IowaUsersByTeamReportViews(after: String, first: Int, before: String, last: Int, sort: [IowaUsersByTeamReportViewOrderBy], filter: IowaUsersByTeamReportViewExpression): IowaUsersByTeamReportViewConnection
  Issues(after: String, first: Int, before: String, last: Int, sort: [IssueOrderBy], filter: IssueExpression): IssueConnection
  IssueCategories(after: String, first: Int, before: String, last: Int, sort: [IssueCategoryOrderBy], filter: IssueCategoryExpression): IssueCategoryConnection
  IssuePriorities(after: String, first: Int, before: String, last: Int, sort: [IssuePriorityOrderBy], filter: IssuePriorityExpression): IssuePriorityConnection
  IssuesReportViews(after: String, first: Int, before: String, last: Int, sort: [IssuesReportViewOrderBy], filter: IssuesReportViewExpression): IssuesReportViewConnection
  IssueUserAlerts(after: String, first: Int, before: String, last: Int, sort: [IssueUserAlertOrderBy], filter: IssueUserAlertExpression): IssueUserAlertConnection
  ItemArticles(after: String, first: Int, before: String, last: Int, sort: [ItemArticleOrderBy], filter: ItemArticleExpression): ItemArticleConnection
  ItemContacts(after: String, first: Int, before: String, last: Int, sort: [ItemContactOrderBy], filter: ItemContactExpression): ItemContactConnection
  ItemConversionHistories(after: String, first: Int, before: String, last: Int, sort: [ItemConversionHistoryOrderBy], filter: ItemConversionHistoryExpression): ItemConversionHistoryConnection
  ItemImages(after: String, first: Int, before: String, last: Int, sort: [ItemImageOrderBy], filter: ItemImageExpression): ItemImageConnection
  ItemTags(after: String, first: Int, before: String, last: Int, sort: [ItemTagOrderBy], filter: ItemTagExpression): ItemTagConnection
  ItemTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateCategoryOrderBy], filter: ItemTemplateCategoryExpression): ItemTemplateCategoryConnection
  ItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection
  ItemTimeAccounts(after: String, first: Int, before: String, last: Int, sort: [ItemTimeAccountOrderBy], filter: ItemTimeAccountExpression): ItemTimeAccountConnection
  ItemUpdateComments(after: String, first: Int, before: String, last: Int, sort: [ItemUpdateCommentOrderBy], filter: ItemUpdateCommentExpression): ItemUpdateCommentConnection
  ItemUpdateLikes(after: String, first: Int, before: String, last: Int, sort: [ItemUpdateLikeOrderBy], filter: ItemUpdateLikeExpression): ItemUpdateLikeConnection
  ItemUpdates(after: String, first: Int, before: String, last: Int, sort: [ItemUpdateOrderBy], filter: ItemUpdateExpression): ItemUpdateConnection
  ItemUpdateTypes(after: String, first: Int, before: String, last: Int, sort: [ItemUpdateTypeOrderBy], filter: ItemUpdateTypeExpression): ItemUpdateTypeConnection
  ItemUserPermissions(after: String, first: Int, before: String, last: Int, sort: [ItemUserPermissionOrderBy], filter: ItemUserPermissionExpression): ItemUserPermissionConnection
  ItemViews(after: String, first: Int, before: String, last: Int, sort: [ItemViewOrderBy], filter: ItemViewExpression): ItemViewConnection
  ItemViewsRollings(after: String, first: Int, before: String, last: Int, sort: [ItemViewsRollingOrderBy], filter: ItemViewsRollingExpression): ItemViewsRollingConnection
  ItemViewsWarehouses(after: String, first: Int, before: String, last: Int, sort: [ItemViewsWarehouseOrderBy], filter: ItemViewsWarehouseExpression): ItemViewsWarehouseConnection
  ItemViewTrackingCodes(after: String, first: Int, before: String, last: Int, sort: [ItemViewTrackingCodeOrderBy], filter: ItemViewTrackingCodeExpression): ItemViewTrackingCodeConnection
  JobHistories(after: String, first: Int, before: String, last: Int, sort: [JobHistoryOrderBy], filter: JobHistoryExpression): JobHistoryConnection
  Jobs(after: String, first: Int, before: String, last: Int, sort: [JobOrderBy], filter: JobExpression): JobConnection
  KmFilesUserStatuses(after: String, first: Int, before: String, last: Int, sort: [KmFilesUserStatusOrderBy], filter: KmFilesUserStatusExpression): KmFilesUserStatusConnection
  KnowledgeBaseArticlesReportViews(after: String, first: Int, before: String, last: Int, sort: [KnowledgeBaseArticlesReportViewOrderBy], filter: KnowledgeBaseArticlesReportViewExpression): KnowledgeBaseArticlesReportViewConnection
  LicenseTypePermissions(after: String, first: Int, before: String, last: Int, sort: [LicenseTypePermissionOrderBy], filter: LicenseTypePermissionExpression): LicenseTypePermissionConnection
  LicenseTypes(after: String, first: Int, before: String, last: Int, sort: [LicenseTypeOrderBy], filter: LicenseTypeExpression): LicenseTypeConnection
  Links(after: String, first: Int, before: String, last: Int, sort: [LinkOrderBy], filter: LinkExpression): LinkConnection
  LinksCategories(after: String, first: Int, before: String, last: Int, sort: [LinksCategoryOrderBy], filter: LinksCategoryExpression): LinksCategoryConnection
  LocationRooms(after: String, first: Int, before: String, last: Int, sort: [LocationRoomOrderBy], filter: LocationRoomExpression): LocationRoomConnection
  Locations(after: String, first: Int, before: String, last: Int, sort: [LocationOrderBy], filter: LocationExpression): LocationConnection
  AllocationEditModes(after: String, first: Int, before: String, last: Int, sort: [AllocationEditModeOrderBy], filter: AllocationEditModeExpression): AllocationEditModeConnection
  AttributeTypes(after: String, first: Int, before: String, last: Int, sort: [AttributeTypeOrderBy], filter: AttributeTypeExpression): AttributeTypeConnection
  ComponentLogTypes(after: String, first: Int, before: String, last: Int, sort: [ComponentLogTypeOrderBy], filter: ComponentLogTypeExpression): ComponentLogTypeConnection
  ContractTypes(after: String, first: Int, before: String, last: Int, sort: [ContractTypeOrderBy], filter: ContractTypeExpression): ContractTypeConnection
  EmailFields(after: String, first: Int, before: String, last: Int, sort: [EmailFieldOrderBy], filter: EmailFieldExpression): EmailFieldConnection
  EmailMonitorTypes(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorTypeOrderBy], filter: EmailMonitorTypeExpression): EmailMonitorTypeConnection
  LogLevels(after: String, first: Int, before: String, last: Int, sort: [LogLevelOrderBy], filter: LogLevelExpression): LogLevelConnection
  MyWorkPriorities(after: String, first: Int, before: String, last: Int, sort: [MyWorkPriorityOrderBy], filter: MyWorkPriorityExpression): MyWorkPriorityConnection
  NotificationEventTypes(after: String, first: Int, before: String, last: Int, sort: [NotificationEventTypeOrderBy], filter: NotificationEventTypeExpression): NotificationEventTypeConnection
  PriorityFactorTypes(after: String, first: Int, before: String, last: Int, sort: [PriorityFactorTypeOrderBy], filter: PriorityFactorTypeExpression): PriorityFactorTypeConnection
  ProjectSections(after: String, first: Int, before: String, last: Int, sort: [ProjectSectionOrderBy], filter: ProjectSectionExpression): ProjectSectionConnection
  ReportDeliveryFormats(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryFormatOrderBy], filter: ReportDeliveryFormatExpression): ReportDeliveryFormatConnection
  ReportDeliveryIntervals(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryIntervalOrderBy], filter: ReportDeliveryIntervalExpression): ReportDeliveryIntervalConnection
  ReportPaperSizes(after: String, first: Int, before: String, last: Int, sort: [ReportPaperSizeOrderBy], filter: ReportPaperSizeExpression): ReportPaperSizeConnection
  ServiceLevelAgreementTypes(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementTypeOrderBy], filter: ServiceLevelAgreementTypeExpression): ServiceLevelAgreementTypeConnection
  SolutionStatuses(after: String, first: Int, before: String, last: Int, sort: [SolutionStatusOrderBy], filter: SolutionStatusExpression): SolutionStatusConnection
  ssoAttributes(after: String, first: Int, before: String, last: Int, sort: [ssoAttributeOrderBy], filter: ssoAttributeExpression): ssoAttributeConnection
  UserTypes(after: String, first: Int, before: String, last: Int, sort: [UserTypeOrderBy], filter: UserTypeExpression): UserTypeConnection
  ValidationTypes(after: String, first: Int, before: String, last: Int, sort: [ValidationTypeOrderBy], filter: ValidationTypeExpression): ValidationTypeConnection
  WebhookSubscriptionComponents(after: String, first: Int, before: String, last: Int, sort: [WebhookSubscriptionComponentOrderBy], filter: WebhookSubscriptionComponentExpression): WebhookSubscriptionComponentConnection
  WebhookSubscriptionEventTypes(after: String, first: Int, before: String, last: Int, sort: [WebhookSubscriptionEventTypeOrderBy], filter: WebhookSubscriptionEventTypeExpression): WebhookSubscriptionEventTypeConnection
  MailServers(after: String, first: Int, before: String, last: Int, sort: [MailServerOrderBy], filter: MailServerExpression): MailServerConnection
  MaintenanceConflictTypes(after: String, first: Int, before: String, last: Int, sort: [MaintenanceConflictTypeOrderBy], filter: MaintenanceConflictTypeExpression): MaintenanceConflictTypeConnection
  Messages(after: String, first: Int, before: String, last: Int, sort: [MessageOrderBy], filter: MessageExpression): MessageConnection
  MettlerToledoPendingTimeApprovalViews(after: String, first: Int, before: String, last: Int, sort: [MettlerToledoPendingTimeApprovalViewOrderBy], filter: MettlerToledoPendingTimeApprovalViewExpression): MettlerToledoPendingTimeApprovalViewConnection
  MobileNotificationPlayers(after: String, first: Int, before: String, last: Int, sort: [MobileNotificationPlayerOrderBy], filter: MobileNotificationPlayerExpression): MobileNotificationPlayerConnection
  Modules(after: String, first: Int, before: String, last: Int, sort: [ModuleOrderBy], filter: ModuleExpression): ModuleConnection
  MyAccomplishments(after: String, first: Int, before: String, last: Int, sort: [MyAccomplishmentOrderBy], filter: MyAccomplishmentExpression): MyAccomplishmentConnection
  MyWorks(after: String, first: Int, before: String, last: Int, sort: [MyWorkOrderBy], filter: MyWorkExpression): MyWorkConnection
  NotificationAttachments(after: String, first: Int, before: String, last: Int, sort: [NotificationAttachmentOrderBy], filter: NotificationAttachmentExpression): NotificationAttachmentConnection
  NotificationFooters(after: String, first: Int, before: String, last: Int, sort: [NotificationFooterOrderBy], filter: NotificationFooterExpression): NotificationFooterConnection
  NotificationHistories(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryOrderBy], filter: NotificationHistoryExpression): NotificationHistoryConnection
  NotificationHistoryArchives(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryArchiveOrderBy], filter: NotificationHistoryArchiveExpression): NotificationHistoryArchiveConnection
  NotificationStatuses(after: String, first: Int, before: String, last: Int, sort: [NotificationStatusOrderBy], filter: NotificationStatusExpression): NotificationStatusConnection
  NotificationTemplates(after: String, first: Int, before: String, last: Int, sort: [NotificationTemplateOrderBy], filter: NotificationTemplateExpression): NotificationTemplateConnection
  OppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection
  PaymentTypes(after: String, first: Int, before: String, last: Int, sort: [PaymentTypeOrderBy], filter: PaymentTypeExpression): PaymentTypeConnection
  PendingTimeReportUsers(after: String, first: Int, before: String, last: Int, sort: [PendingTimeReportUserOrderBy], filter: PendingTimeReportUserExpression): PendingTimeReportUserConnection
  PeopleReportViews(after: String, first: Int, before: String, last: Int, sort: [PeopleReportViewOrderBy], filter: PeopleReportViewExpression): PeopleReportViewConnection
  Permissions(after: String, first: Int, before: String, last: Int, sort: [PermissionOrderBy], filter: PermissionExpression): PermissionConnection
  PinSettings(after: String, first: Int, before: String, last: Int, sort: [PinSettingOrderBy], filter: PinSettingExpression): PinSettingConnection
  PlanBackups(after: String, first: Int, before: String, last: Int, sort: [PlanBackupOrderBy], filter: PlanBackupExpression): PlanBackupConnection
  PlanDrafts(after: String, first: Int, before: String, last: Int, sort: [PlanDraftOrderBy], filter: PlanDraftExpression): PlanDraftConnection
  PlanHistories(after: String, first: Int, before: String, last: Int, sort: [PlanHistoryOrderBy], filter: PlanHistoryExpression): PlanHistoryConnection
  PlanLimits(after: String, first: Int, before: String, last: Int, sort: [PlanLimitOrderBy], filter: PlanLimitExpression): PlanLimitConnection
  PlansReportViews(after: String, first: Int, before: String, last: Int, sort: [PlansReportViewOrderBy], filter: PlansReportViewExpression): PlansReportViewConnection
  PlanTypes(after: String, first: Int, before: String, last: Int, sort: [PlanTypeOrderBy], filter: PlanTypeExpression): PlanTypeConnection
  PortfolioProjectInformations(after: String, first: Int, before: String, last: Int, sort: [PortfolioProjectInformationOrderBy], filter: PortfolioProjectInformationExpression): PortfolioProjectInformationConnection
  PortfolioProjectInformationHistories(after: String, first: Int, before: String, last: Int, sort: [PortfolioProjectInformationHistoryOrderBy], filter: PortfolioProjectInformationHistoryExpression): PortfolioProjectInformationHistoryConnection
  Portfolios(after: String, first: Int, before: String, last: Int, sort: [PortfolioOrderBy], filter: PortfolioExpression): PortfolioConnection
  PortfolioSettings(after: String, first: Int, before: String, last: Int, sort: [PortfolioSettingOrderBy], filter: PortfolioSettingExpression): PortfolioSettingConnection
  PortfoliosProjects(after: String, first: Int, before: String, last: Int, sort: [PortfoliosProjectOrderBy], filter: PortfoliosProjectExpression): PortfoliosProjectConnection
  PortfoliosReportViews(after: String, first: Int, before: String, last: Int, sort: [PortfoliosReportViewOrderBy], filter: PortfoliosReportViewExpression): PortfoliosReportViewConnection
  PortfolioTicketInformations(after: String, first: Int, before: String, last: Int, sort: [PortfolioTicketInformationOrderBy], filter: PortfolioTicketInformationExpression): PortfolioTicketInformationConnection
  PortfolioTicketInformationHistories(after: String, first: Int, before: String, last: Int, sort: [PortfolioTicketInformationHistoryOrderBy], filter: PortfolioTicketInformationHistoryExpression): PortfolioTicketInformationHistoryConnection
  PortfolioTicketInformationImports(after: String, first: Int, before: String, last: Int, sort: [PortfolioTicketInformationImportOrderBy], filter: PortfolioTicketInformationImportExpression): PortfolioTicketInformationImportConnection
  PriorityFactors(after: String, first: Int, before: String, last: Int, sort: [PriorityFactorOrderBy], filter: PriorityFactorExpression): PriorityFactorConnection
  PriorityMatrices(after: String, first: Int, before: String, last: Int, sort: [PriorityMatrixOrderBy], filter: PriorityMatrixExpression): PriorityMatrixConnection
  Processes(after: String, first: Int, before: String, last: Int, sort: [ProcessOrderBy], filter: ProcessExpression): ProcessConnection
  ProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection
  ProductTypes(after: String, first: Int, before: String, last: Int, sort: [ProductTypeOrderBy], filter: ProductTypeExpression): ProductTypeConnection
  ProjectBenefits(after: String, first: Int, before: String, last: Int, sort: [ProjectBenefitOrderBy], filter: ProjectBenefitExpression): ProjectBenefitConnection
  ProjectCriteria(after: String, first: Int, before: String, last: Int, sort: [ProjectCriterionOrderBy], filter: ProjectCriterionExpression): ProjectCriterionConnection
  ProjectExpenseForecasts(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseForecastOrderBy], filter: ProjectExpenseForecastExpression): ProjectExpenseForecastConnection
  ProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection
  ProjectExpenseSchedulesBackups(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseSchedulesBackupOrderBy], filter: ProjectExpenseSchedulesBackupExpression): ProjectExpenseSchedulesBackupConnection
  ProjectGoals(after: String, first: Int, before: String, last: Int, sort: [ProjectGoalOrderBy], filter: ProjectGoalExpression): ProjectGoalConnection
  ProjectHealthHistories(after: String, first: Int, before: String, last: Int, sort: [ProjectHealthHistoryOrderBy], filter: ProjectHealthHistoryExpression): ProjectHealthHistoryConnection
  ProjectPeriods(after: String, first: Int, before: String, last: Int, sort: [ProjectPeriodOrderBy], filter: ProjectPeriodExpression): ProjectPeriodConnection
  ProjectProcesses(after: String, first: Int, before: String, last: Int, sort: [ProjectProcessOrderBy], filter: ProjectProcessExpression): ProjectProcessConnection
  ProjectRisks(after: String, first: Int, before: String, last: Int, sort: [ProjectRiskOrderBy], filter: ProjectRiskExpression): ProjectRiskConnection
  Projects(after: String, first: Int, before: String, last: Int, sort: [ProjectOrderBy], filter: ProjectExpression): ProjectConnection
  ProjectsandRequestsReportViews(after: String, first: Int, before: String, last: Int, sort: [ProjectsandRequestsReportViewOrderBy], filter: ProjectsandRequestsReportViewExpression): ProjectsandRequestsReportViewConnection
  ProjectsAndTicketsViews(after: String, first: Int, before: String, last: Int, sort: [ProjectsAndTicketsViewOrderBy], filter: ProjectsAndTicketsViewExpression): ProjectsAndTicketsViewConnection
  ProjectSectionStatuses(after: String, first: Int, before: String, last: Int, sort: [ProjectSectionStatusOrderBy], filter: ProjectSectionStatusExpression): ProjectSectionStatusConnection
  ProjectServiceLogs(after: String, first: Int, before: String, last: Int, sort: [ProjectServiceLogOrderBy], filter: ProjectServiceLogExpression): ProjectServiceLogConnection
  ProjectsExts(after: String, first: Int, before: String, last: Int, sort: [ProjectsExtOrderBy], filter: ProjectsExtExpression): ProjectsExtConnection
  ProjectsReportViews(after: String, first: Int, before: String, last: Int, sort: [ProjectsReportViewOrderBy], filter: ProjectsReportViewExpression): ProjectsReportViewConnection
  ProjectStakeholders(after: String, first: Int, before: String, last: Int, sort: [ProjectStakeholderOrderBy], filter: ProjectStakeholderExpression): ProjectStakeholderConnection
  ProjectSystems(after: String, first: Int, before: String, last: Int, sort: [ProjectSystemOrderBy], filter: ProjectSystemExpression): ProjectSystemConnection
  ProjectTimeForecasts(after: String, first: Int, before: String, last: Int, sort: [ProjectTimeForecastOrderBy], filter: ProjectTimeForecastExpression): ProjectTimeForecastConnection
  ProjectTypes(after: String, first: Int, before: String, last: Int, sort: [ProjectTypeOrderBy], filter: ProjectTypeExpression): ProjectTypeConnection
  PublishedItems(after: String, first: Int, before: String, last: Int, sort: [PublishedItemOrderBy], filter: PublishedItemExpression): PublishedItemConnection
  QuestionsReportViews(after: String, first: Int, before: String, last: Int, sort: [QuestionsReportViewOrderBy], filter: QuestionsReportViewExpression): QuestionsReportViewConnection
  RecurringScheduleEntries(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleEntryOrderBy], filter: RecurringScheduleEntryExpression): RecurringScheduleEntryConnection
  RecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection
  RecurringScheduleTypes(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleTypeOrderBy], filter: RecurringScheduleTypeExpression): RecurringScheduleTypeConnection
  ReportDeliveryRecipients(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryRecipientOrderBy], filter: ReportDeliveryRecipientExpression): ReportDeliveryRecipientConnection
  ReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection
  ReportFolders(after: String, first: Int, before: String, last: Int, sort: [ReportFolderOrderBy], filter: ReportFolderExpression): ReportFolderConnection
  ReportSourceFilterTypes(after: String, first: Int, before: String, last: Int, sort: [ReportSourceFilterTypeOrderBy], filter: ReportSourceFilterTypeExpression): ReportSourceFilterTypeConnection
  ReportSources(after: String, first: Int, before: String, last: Int, sort: [ReportSourceOrderBy], filter: ReportSourceExpression): ReportSourceConnection
  ReportSourcesApplications(after: String, first: Int, before: String, last: Int, sort: [ReportSourcesApplicationOrderBy], filter: ReportSourcesApplicationExpression): ReportSourcesApplicationConnection
  ReportSourcesAttributeExtensions(after: String, first: Int, before: String, last: Int, sort: [ReportSourcesAttributeExtensionOrderBy], filter: ReportSourcesAttributeExtensionExpression): ReportSourcesAttributeExtensionConnection
  RequestsExts(after: String, first: Int, before: String, last: Int, sort: [RequestsExtOrderBy], filter: RequestsExtExpression): RequestsExtConnection
  RequestsReportViews(after: String, first: Int, before: String, last: Int, sort: [RequestsReportViewOrderBy], filter: RequestsReportViewExpression): RequestsReportViewConnection
  RequestWorkflowHistories(after: String, first: Int, before: String, last: Int, sort: [RequestWorkflowHistoryOrderBy], filter: RequestWorkflowHistoryExpression): RequestWorkflowHistoryConnection
  ResourceHoursFacts(after: String, first: Int, before: String, last: Int, sort: [ResourceHoursFactOrderBy], filter: ResourceHoursFactExpression): ResourceHoursFactConnection
  ResourcePoolManagers(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolManagerOrderBy], filter: ResourcePoolManagerExpression): ResourcePoolManagerConnection
  ResourcePools(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolOrderBy], filter: ResourcePoolExpression): ResourcePoolConnection
  ResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection
  ResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection
  ResourceRequestSchedules(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestScheduleOrderBy], filter: ResourceRequestScheduleExpression): ResourceRequestScheduleConnection
  ResourceRequestStatuses(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestStatusOrderBy], filter: ResourceRequestStatusExpression): ResourceRequestStatusConnection
  ResponseStrategies(after: String, first: Int, before: String, last: Int, sort: [ResponseStrategyOrderBy], filter: ResponseStrategyExpression): ResponseStrategyConnection
  ResponseTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateCategoryOrderBy], filter: ResponseTemplateCategoryExpression): ResponseTemplateCategoryConnection
  ResponseTemplates(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateOrderBy], filter: ResponseTemplateExpression): ResponseTemplateConnection
  RevUserStatuses(after: String, first: Int, before: String, last: Int, sort: [RevUserStatusOrderBy], filter: RevUserStatusExpression): RevUserStatusConnection
  Revs(after: String, first: Int, before: String, last: Int, sort: [RevOrderBy], filter: RevExpression): RevConnection
  Risks(after: String, first: Int, before: String, last: Int, sort: [RiskOrderBy], filter: RiskExpression): RiskConnection
  RisksReportViews(after: String, first: Int, before: String, last: Int, sort: [RisksReportViewOrderBy], filter: RisksReportViewExpression): RisksReportViewConnection
  RolePermissions(after: String, first: Int, before: String, last: Int, sort: [RolePermissionOrderBy], filter: RolePermissionExpression): RolePermissionConnection
  Roles(after: String, first: Int, before: String, last: Int, sort: [RoleOrderBy], filter: RoleExpression): RoleConnection
  ScheduledActualHours(after: String, first: Int, before: String, last: Int, sort: [ScheduledActualHourOrderBy], filter: ScheduledActualHourExpression): ScheduledActualHourConnection
  ScheduledEvents(after: String, first: Int, before: String, last: Int, sort: [ScheduledEventOrderBy], filter: ScheduledEventExpression): ScheduledEventConnection
  ScheduledVsActualByProjectReportViews(after: String, first: Int, before: String, last: Int, sort: [ScheduledVsActualByProjectReportViewOrderBy], filter: ScheduledVsActualByProjectReportViewExpression): ScheduledVsActualByProjectReportViewConnection
  ScheduleRequestsViews(after: String, first: Int, before: String, last: Int, sort: [ScheduleRequestsViewOrderBy], filter: ScheduleRequestsViewExpression): ScheduleRequestsViewConnection
  Schedules(after: String, first: Int, before: String, last: Int, sort: [ScheduleOrderBy], filter: ScheduleExpression): ScheduleConnection
  SchedulesRequests(after: String, first: Int, before: String, last: Int, sort: [SchedulesRequestOrderBy], filter: SchedulesRequestExpression): SchedulesRequestConnection
  ScheduleTypes(after: String, first: Int, before: String, last: Int, sort: [ScheduleTypeOrderBy], filter: ScheduleTypeExpression): ScheduleTypeConnection
  ScheduleViews(after: String, first: Int, before: String, last: Int, sort: [ScheduleViewOrderBy], filter: ScheduleViewExpression): ScheduleViewConnection
  ScheduleView3S(after: String, first: Int, before: String, last: Int, sort: [ScheduleView3OrderBy], filter: ScheduleView3Expression): ScheduleView3Connection
  ScoreCardCriteria(after: String, first: Int, before: String, last: Int, sort: [ScoreCardCriterionOrderBy], filter: ScoreCardCriterionExpression): ScoreCardCriterionConnection
  ScoreCards(after: String, first: Int, before: String, last: Int, sort: [ScoreCardOrderBy], filter: ScoreCardExpression): ScoreCardConnection
  SearchData(after: String, first: Int, before: String, last: Int, sort: [SearchDatumOrderBy], filter: SearchDatumExpression): SearchDatumConnection
  SearchDetails(after: String, first: Int, before: String, last: Int, sort: [SearchDetailOrderBy], filter: SearchDetailExpression): SearchDetailConnection
  SearchDetailsBackups(after: String, first: Int, before: String, last: Int, sort: [SearchDetailsBackupOrderBy], filter: SearchDetailsBackupExpression): SearchDetailsBackupConnection
  Searches(after: String, first: Int, before: String, last: Int, sort: [SearchOrderBy], filter: SearchExpression): SearchConnection
  SearchHistories(after: String, first: Int, before: String, last: Int, sort: [SearchHistoryOrderBy], filter: SearchHistoryExpression): SearchHistoryConnection
  SecretKeys(after: String, first: Int, before: String, last: Int, sort: [SecretKeyOrderBy], filter: SecretKeyExpression): SecretKeyConnection
  SelfRegistrationMappings(after: String, first: Int, before: String, last: Int, sort: [SelfRegistrationMappingOrderBy], filter: SelfRegistrationMappingExpression): SelfRegistrationMappingConnection
  ServiceAnnouncements(after: String, first: Int, before: String, last: Int, sort: [ServiceAnnouncementOrderBy], filter: ServiceAnnouncementExpression): ServiceAnnouncementConnection
  ServiceCategories(after: String, first: Int, before: String, last: Int, sort: [ServiceCategoryOrderBy], filter: ServiceCategoryExpression): ServiceCategoryConnection
  ServiceFormSettings(after: String, first: Int, before: String, last: Int, sort: [ServiceFormSettingOrderBy], filter: ServiceFormSettingExpression): ServiceFormSettingConnection
  ServiceLevelAgreements(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementOrderBy], filter: ServiceLevelAgreementExpression): ServiceLevelAgreementConnection
  Services(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection
  ShibSpErrors(after: String, first: Int, before: String, last: Int, sort: [ShibSpErrorOrderBy], filter: ShibSpErrorExpression): ShibSpErrorConnection
  Shortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection
  SlaHistories(after: String, first: Int, before: String, last: Int, sort: [SlaHistoryOrderBy], filter: SlaHistoryExpression): SlaHistoryConnection
  SolutionCategories(after: String, first: Int, before: String, last: Int, sort: [SolutionCategoryOrderBy], filter: SolutionCategoryExpression): SolutionCategoryConnection
  SolutionRevisions(after: String, first: Int, before: String, last: Int, sort: [SolutionRevisionOrderBy], filter: SolutionRevisionExpression): SolutionRevisionConnection
  Solutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection
  SourceControlEvents(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventOrderBy], filter: SourceControlEventExpression): SourceControlEventConnection
  SourceControlEventTypes(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventTypeOrderBy], filter: SourceControlEventTypeExpression): SourceControlEventTypeConnection
  SourceControlProviders(after: String, first: Int, before: String, last: Int, sort: [SourceControlProviderOrderBy], filter: SourceControlProviderExpression): SourceControlProviderConnection
  SourceControlUsernames(after: String, first: Int, before: String, last: Int, sort: [SourceControlUsernameOrderBy], filter: SourceControlUsernameExpression): SourceControlUsernameConnection
  SourceControlWorkItems(after: String, first: Int, before: String, last: Int, sort: [SourceControlWorkItemOrderBy], filter: SourceControlWorkItemExpression): SourceControlWorkItemConnection
  Sources(after: String, first: Int, before: String, last: Int, sort: [SourceOrderBy], filter: SourceExpression): SourceConnection
  SsrsCategories(after: String, first: Int, before: String, last: Int, sort: [SsrsCategoryOrderBy], filter: SsrsCategoryExpression): SsrsCategoryConnection
  SsrsReportLinks(after: String, first: Int, before: String, last: Int, sort: [SsrsReportLinkOrderBy], filter: SsrsReportLinkExpression): SsrsReportLinkConnection
  StandardReportCategories(after: String, first: Int, before: String, last: Int, sort: [StandardReportCategoryOrderBy], filter: StandardReportCategoryExpression): StandardReportCategoryConnection
  StandardReports(after: String, first: Int, before: String, last: Int, sort: [StandardReportOrderBy], filter: StandardReportExpression): StandardReportConnection
  States(after: String, first: Int, before: String, last: Int, sort: [StateOrderBy], filter: StateExpression): StateConnection
  Statuses(after: String, first: Int, before: String, last: Int, sort: [StatusOrderBy], filter: StatusExpression): StatusConnection
  StatusTypes(after: String, first: Int, before: String, last: Int, sort: [StatusTypeOrderBy], filter: StatusTypeExpression): StatusTypeConnection
  SurveyQuestions(after: String, first: Int, before: String, last: Int, sort: [SurveyQuestionOrderBy], filter: SurveyQuestionExpression): SurveyQuestionConnection
  SurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  SurveyResponsesReportViews(after: String, first: Int, before: String, last: Int, sort: [SurveyResponsesReportViewOrderBy], filter: SurveyResponsesReportViewExpression): SurveyResponsesReportViewConnection
  Surveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection
  SurveyTicketEvaluations(after: String, first: Int, before: String, last: Int, sort: [SurveyTicketEvaluationOrderBy], filter: SurveyTicketEvaluationExpression): SurveyTicketEvaluationConnection
  Sysdiagrams(after: String, first: Int, before: String, last: Int, sort: [SysdiagramOrderBy], filter: SysdiagramExpression): SysdiagramConnection
  SystemEventHandlers(after: String, first: Int, before: String, last: Int, sort: [SystemEventHandlerOrderBy], filter: SystemEventHandlerExpression): SystemEventHandlerConnection
  SystemEventTypes(after: String, first: Int, before: String, last: Int, sort: [SystemEventTypeOrderBy], filter: SystemEventTypeExpression): SystemEventTypeConnection
  Systems(after: String, first: Int, before: String, last: Int, sort: [SystemOrderBy], filter: SystemExpression): SystemConnection
  Tags(after: String, first: Int, before: String, last: Int, sort: [TagOrderBy], filter: TagExpression): TagConnection
  TaskAssigneds(after: String, first: Int, before: String, last: Int, sort: [TaskAssignedOrderBy], filter: TaskAssignedExpression): TaskAssignedConnection
  TaskPriorities(after: String, first: Int, before: String, last: Int, sort: [TaskPriorityOrderBy], filter: TaskPriorityExpression): TaskPriorityConnection
  TaskBaselines(after: String, first: Int, before: String, last: Int, sort: [TaskBaselineOrderBy], filter: TaskBaselineExpression): TaskBaselineConnection
  TaskColumns(after: String, first: Int, before: String, last: Int, sort: [TaskColumnOrderBy], filter: TaskColumnExpression): TaskColumnConnection
  TaskRelationships(after: String, first: Int, before: String, last: Int, sort: [TaskRelationshipOrderBy], filter: TaskRelationshipExpression): TaskRelationshipConnection
  Tasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection
  TasksIssues(after: String, first: Int, before: String, last: Int, sort: [TasksIssueOrderBy], filter: TasksIssueExpression): TasksIssueConnection
  TasksReportViews(after: String, first: Int, before: String, last: Int, sort: [TasksReportViewOrderBy], filter: TasksReportViewExpression): TasksReportViewConnection
  TaskUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TaskUserAlertOrderBy], filter: TaskUserAlertExpression): TaskUserAlertConnection
  TdInfoDemosReportViews(after: String, first: Int, before: String, last: Int, sort: [TdInfoDemosReportViewOrderBy], filter: TdInfoDemosReportViewExpression): TdInfoDemosReportViewConnection
  TeamUsers(after: String, first: Int, before: String, last: Int, sort: [TeamUserOrderBy], filter: TeamUserExpression): TeamUserConnection
  TeamExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TeamExpenseAcctCodeOrderBy], filter: TeamExpenseAcctCodeExpression): TeamExpenseAcctCodeConnection
  Teams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection
  TeamScheduleDates(after: String, first: Int, before: String, last: Int, sort: [TeamScheduleDateOrderBy], filter: TeamScheduleDateExpression): TeamScheduleDateConnection
  TeamScheduleMonths(after: String, first: Int, before: String, last: Int, sort: [TeamScheduleMonthOrderBy], filter: TeamScheduleMonthExpression): TeamScheduleMonthConnection
  TeamsComponents(after: String, first: Int, before: String, last: Int, sort: [TeamsComponentOrderBy], filter: TeamsComponentExpression): TeamsComponentConnection
  TeamUpdateSchedules(after: String, first: Int, before: String, last: Int, sort: [TeamUpdateScheduleOrderBy], filter: TeamUpdateScheduleExpression): TeamUpdateScheduleConnection
  TicketApplicationSettings(after: String, first: Int, before: String, last: Int, sort: [TicketApplicationSettingOrderBy], filter: TicketApplicationSettingExpression): TicketApplicationSettingConnection
  TicketArchiveProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketArchiveProfileOrderBy], filter: TicketArchiveProfileExpression): TicketArchiveProfileConnection
  TicketAssignmentHistories(after: String, first: Int, before: String, last: Int, sort: [TicketAssignmentHistoryOrderBy], filter: TicketAssignmentHistoryExpression): TicketAssignmentHistoryConnection
  TicketContacts(after: String, first: Int, before: String, last: Int, sort: [TicketContactOrderBy], filter: TicketContactExpression): TicketContactConnection
  TicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  TicketCreationScheduleHistories(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleHistoryOrderBy], filter: TicketCreationScheduleHistoryExpression): TicketCreationScheduleHistoryConnection
  TicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection
  TicketExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TicketExpenseAcctCodeOrderBy], filter: TicketExpenseAcctCodeExpression): TicketExpenseAcctCodeConnection
  TicketMetrics(after: String, first: Int, before: String, last: Int, sort: [TicketMetricOrderBy], filter: TicketMetricExpression): TicketMetricConnection
  Tickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  TicketsArchives(after: String, first: Int, before: String, last: Int, sort: [TicketsArchiveOrderBy], filter: TicketsArchiveExpression): TicketsArchiveConnection
  TicketStatuses(after: String, first: Int, before: String, last: Int, sort: [TicketStatusOrderBy], filter: TicketStatusExpression): TicketStatusConnection
  TicketStatusHistories(after: String, first: Int, before: String, last: Int, sort: [TicketStatusHistoryOrderBy], filter: TicketStatusHistoryExpression): TicketStatusHistoryConnection
  TicketsViews(after: String, first: Int, before: String, last: Int, sort: [TicketsViewOrderBy], filter: TicketsViewExpression): TicketsViewConnection
  TicketTaskConversions(after: String, first: Int, before: String, last: Int, sort: [TicketTaskConversionOrderBy], filter: TicketTaskConversionExpression): TicketTaskConversionConnection
  TicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  TicketTasksArchives(after: String, first: Int, before: String, last: Int, sort: [TicketTasksArchiveOrderBy], filter: TicketTasksArchiveExpression): TicketTasksArchiveConnection
  TicketTasksReportViews(after: String, first: Int, before: String, last: Int, sort: [TicketTasksReportViewOrderBy], filter: TicketTasksReportViewExpression): TicketTasksReportViewConnection
  TicketTaskTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTemplateOrderBy], filter: TicketTaskTemplateExpression): TicketTaskTemplateConnection
  TicketTaskTypes(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTypeOrderBy], filter: TicketTaskTypeExpression): TicketTaskTypeConnection
  TicketTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTemplateOrderBy], filter: TicketTemplateExpression): TicketTemplateConnection
  TicketUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TicketUserAlertOrderBy], filter: TicketUserAlertExpression): TicketUserAlertConnection
  TimeEntries(after: String, first: Int, before: String, last: Int, sort: [TimeEntryOrderBy], filter: TimeEntryExpression): TimeEntryConnection
  TimeAcctCodeLimits(after: String, first: Int, before: String, last: Int, sort: [TimeAcctCodeLimitOrderBy], filter: TimeAcctCodeLimitExpression): TimeAcctCodeLimitConnection
  TimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TimeAcctCodeOrderBy], filter: TimeAcctCodeExpression): TimeAcctCodeConnection
  TimeAndExpenseEntries(after: String, first: Int, before: String, last: Int, sort: [TimeAndExpenseEntryOrderBy], filter: TimeAndExpenseEntryExpression): TimeAndExpenseEntryConnection
  TimeExpenseStatuses(after: String, first: Int, before: String, last: Int, sort: [TimeExpenseStatusOrderBy], filter: TimeExpenseStatusExpression): TimeExpenseStatusConnection
  TimeLockPeriods(after: String, first: Int, before: String, last: Int, sort: [TimeLockPeriodOrderBy], filter: TimeLockPeriodExpression): TimeLockPeriodConnection
  TimeReportAlerts(after: String, first: Int, before: String, last: Int, sort: [TimeReportAlertOrderBy], filter: TimeReportAlertExpression): TimeReportAlertConnection
  TimeReportHistories(after: String, first: Int, before: String, last: Int, sort: [TimeReportHistoryOrderBy], filter: TimeReportHistoryExpression): TimeReportHistoryConnection
  TimeReports(after: String, first: Int, before: String, last: Int, sort: [TimeReportOrderBy], filter: TimeReportExpression): TimeReportConnection
  TimeReportsReportViews(after: String, first: Int, before: String, last: Int, sort: [TimeReportsReportViewOrderBy], filter: TimeReportsReportViewExpression): TimeReportsReportViewConnection
  TimeReportStatuses(after: String, first: Int, before: String, last: Int, sort: [TimeReportStatusOrderBy], filter: TimeReportStatusExpression): TimeReportStatusConnection
  TimeSheetAlerts(after: String, first: Int, before: String, last: Int, sort: [TimeSheetAlertOrderBy], filter: TimeSheetAlertExpression): TimeSheetAlertConnection
  TimeSheetAlertsBes(after: String, first: Int, before: String, last: Int, sort: [TimeSheetAlertsBeOrderBy], filter: TimeSheetAlertsBeExpression): TimeSheetAlertsBeConnection
  TimeZones(after: String, first: Int, before: String, last: Int, sort: [TimeZoneOrderBy], filter: TimeZoneExpression): TimeZoneConnection
  TmpCutoverForms(after: String, first: Int, before: String, last: Int, sort: [TmpCutoverFormOrderBy], filter: TmpCutoverFormExpression): TmpCutoverFormConnection
  TmpFlags(after: String, first: Int, before: String, last: Int, sort: [TmpFlagOrderBy], filter: TmpFlagExpression): TmpFlagConnection
  Todos(after: String, first: Int, before: String, last: Int, sort: [TodoOrderBy], filter: TodoExpression): TodoConnection
  TypeCategories(after: String, first: Int, before: String, last: Int, sort: [TypeCategoryOrderBy], filter: TypeCategoryExpression): TypeCategoryConnection
  TypeFields(after: String, first: Int, before: String, last: Int, sort: [TypeFieldOrderBy], filter: TypeFieldExpression): TypeFieldConnection
  TypeIDS(after: String, first: Int, before: String, last: Int, sort: [TypeIDOrderBy], filter: TypeIDExpression): TypeIDConnection
  TypesExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesExpenseAcctCodeOrderBy], filter: TypesExpenseAcctCodeExpression): TypesExpenseAcctCodeConnection
  TypesGroups(after: String, first: Int, before: String, last: Int, sort: [TypesGroupOrderBy], filter: TypesGroupExpression): TypesGroupConnection
  TypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection
  TypesTimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesTimeAcctCodeOrderBy], filter: TypesTimeAcctCodeExpression): TypesTimeAcctCodeConnection
  UMassActHrsRptWithProjectCustAttributesReportViews(after: String, first: Int, before: String, last: Int, sort: [UMassActHrsRptWithProjectCustAttributesReportViewOrderBy], filter: UMassActHrsRptWithProjectCustAttributesReportViewExpression): UMassActHrsRptWithProjectCustAttributesReportViewConnection
  UmasspoProjectRequestWorkflows(after: String, first: Int, before: String, last: Int, sort: [UmasspoProjectRequestWorkflowOrderBy], filter: UmasspoProjectRequestWorkflowExpression): UmasspoProjectRequestWorkflowConnection
  UmasspoProjectsandRequests(after: String, first: Int, before: String, last: Int, sort: [UmasspoProjectsandRequestOrderBy], filter: UmasspoProjectsandRequestExpression): UmasspoProjectsandRequestConnection
  UnprocessedNotifications(after: String, first: Int, before: String, last: Int, sort: [UnprocessedNotificationOrderBy], filter: UnprocessedNotificationExpression): UnprocessedNotificationConnection
  UnsentNotifications(after: String, first: Int, before: String, last: Int, sort: [UnsentNotificationOrderBy], filter: UnsentNotificationExpression): UnsentNotificationConnection
  UntspoProjectsandRequests(after: String, first: Int, before: String, last: Int, sort: [UntspoProjectsandRequestOrderBy], filter: UntspoProjectsandRequestExpression): UntspoProjectsandRequestConnection
  UserActivationLogs(after: String, first: Int, before: String, last: Int, sort: [UserActivationLogOrderBy], filter: UserActivationLogExpression): UserActivationLogConnection
  UserAgents(after: String, first: Int, before: String, last: Int, sort: [UserAgentOrderBy], filter: UserAgentExpression): UserAgentConnection
  UserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection
  UserCapacityViews(after: String, first: Int, before: String, last: Int, sort: [UserCapacityViewOrderBy], filter: UserCapacityViewExpression): UserCapacityViewConnection
  UserCapacityViewMonths(after: String, first: Int, before: String, last: Int, sort: [UserCapacityViewMonthOrderBy], filter: UserCapacityViewMonthExpression): UserCapacityViewMonthConnection
  UserCapacityViewWeeks(after: String, first: Int, before: String, last: Int, sort: [UserCapacityViewWeekOrderBy], filter: UserCapacityViewWeekExpression): UserCapacityViewWeekConnection
  UserDownloads(after: String, first: Int, before: String, last: Int, sort: [UserDownloadOrderBy], filter: UserDownloadExpression): UserDownloadConnection
  UserGroups(after: String, first: Int, before: String, last: Int, sort: [UserGroupOrderBy], filter: UserGroupExpression): UserGroupConnection
  UserGroupsLogs(after: String, first: Int, before: String, last: Int, sort: [UserGroupsLogOrderBy], filter: UserGroupsLogExpression): UserGroupsLogConnection
  UserIntegrationSettings(after: String, first: Int, before: String, last: Int, sort: [UserIntegrationSettingOrderBy], filter: UserIntegrationSettingExpression): UserIntegrationSettingConnection
  UserLoginHistories(after: String, first: Int, before: String, last: Int, sort: [UserLoginHistoryOrderBy], filter: UserLoginHistoryExpression): UserLoginHistoryConnection
  Usernames(after: String, first: Int, before: String, last: Int, sort: [UsernameOrderBy], filter: UsernameExpression): UsernameConnection
  UserPhoneNumbers(after: String, first: Int, before: String, last: Int, sort: [UserPhoneNumberOrderBy], filter: UserPhoneNumberExpression): UserPhoneNumberConnection
  UserPinEntryFailures(after: String, first: Int, before: String, last: Int, sort: [UserPinEntryFailureOrderBy], filter: UserPinEntryFailureExpression): UserPinEntryFailureConnection
  UserPins(after: String, first: Int, before: String, last: Int, sort: [UserPinOrderBy], filter: UserPinExpression): UserPinConnection
  UserRegistrationProfiles(after: String, first: Int, before: String, last: Int, sort: [UserRegistrationProfileOrderBy], filter: UserRegistrationProfileExpression): UserRegistrationProfileConnection
  UserReports(after: String, first: Int, before: String, last: Int, sort: [UserReportOrderBy], filter: UserReportExpression): UserReportConnection
  Users(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection
  UsersClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [UsersClientAcctCodeOrderBy], filter: UsersClientAcctCodeExpression): UsersClientAcctCodeConnection
  UsersLastActivities(after: String, first: Int, before: String, last: Int, sort: [UsersLastActivityOrderBy], filter: UsersLastActivityExpression): UsersLastActivityConnection
  UserStatuses(after: String, first: Int, before: String, last: Int, sort: [UserStatusOrderBy], filter: UserStatusExpression): UserStatusConnection
  Vendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection
  VersionHistories(after: String, first: Int, before: String, last: Int, sort: [VersionHistoryOrderBy], filter: VersionHistoryExpression): VersionHistoryConnection
  WebhookCalls(after: String, first: Int, before: String, last: Int, sort: [WebhookCallOrderBy], filter: WebhookCallExpression): WebhookCallConnection
  WebhookComponentEvents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentEventOrderBy], filter: WebhookComponentEventExpression): WebhookComponentEventConnection
  WebhookComponents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentOrderBy], filter: WebhookComponentExpression): WebhookComponentConnection
  Webhooks(after: String, first: Int, before: String, last: Int, sort: [WebhookOrderBy], filter: WebhookExpression): WebhookConnection
  WebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection
  WebServiceAccountTypes(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountTypeOrderBy], filter: WebServiceAccountTypeExpression): WebServiceAccountTypeConnection
  WebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection
  WebServiceMethods(after: String, first: Int, before: String, last: Int, sort: [WebServiceMethodOrderBy], filter: WebServiceMethodExpression): WebServiceMethodConnection
  WebServices(after: String, first: Int, before: String, last: Int, sort: [WebServiceOrderBy], filter: WebServiceExpression): WebServiceConnection
  WorkableHoursByWeeks(after: String, first: Int, before: String, last: Int, sort: [WorkableHoursByWeekOrderBy], filter: WorkableHoursByWeekExpression): WorkableHoursByWeekConnection
  WorkflowAssignmentsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowAssignmentsNewOrderBy], filter: WorkflowAssignmentsNewExpression): WorkflowAssignmentsNewConnection
  WorkflowDrafts(after: String, first: Int, before: String, last: Int, sort: [WorkflowDraftOrderBy], filter: WorkflowDraftExpression): WorkflowDraftConnection
  WorkflowHistoryNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowHistoryNewOrderBy], filter: WorkflowHistoryNewExpression): WorkflowHistoryNewConnection
  Workflows(after: String, first: Int, before: String, last: Int, sort: [WorkflowOrderBy], filter: WorkflowExpression): WorkflowConnection
  WorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection
  WorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection
  WorkflowStageStatuses(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageStatusOrderBy], filter: WorkflowStageStatusExpression): WorkflowStageStatusConnection
  WorkflowStatuses(after: String, first: Int, before: String, last: Int, sort: [WorkflowStatusOrderBy], filter: WorkflowStatusExpression): WorkflowStatusConnection
  WorkflowStepAssignments(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepAssignmentOrderBy], filter: WorkflowStepAssignmentExpression): WorkflowStepAssignmentConnection
  WorkflowSteps(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepOrderBy], filter: WorkflowStepExpression): WorkflowStepConnection
  WorkflowStepSections(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepSectionOrderBy], filter: WorkflowStepSectionExpression): WorkflowStepSectionConnection
  WorkflowStepsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepsNewOrderBy], filter: WorkflowStepsNewExpression): WorkflowStepsNewConnection
  WorkflowTemplateSteps(after: String, first: Int, before: String, last: Int, sort: [WorkflowTemplateStepOrderBy], filter: WorkflowTemplateStepExpression): WorkflowTemplateStepConnection
  WorkflowTypes(after: String, first: Int, before: String, last: Int, sort: [WorkflowTypeOrderBy], filter: WorkflowTypeExpression): WorkflowTypeConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Query that returns the list of _SimplicityType(s)."""
  _SimplicityTypes(type: String, schema: String, name: String): [_SimplicityType]
}

type QuestionsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  QuestionId: Int!
  Title: String
  Description: String
  Beid: ID
  CategoryId: Int
  CategoryName: String
  CreatedUid: ID
  CreatedFullName: String
  CreatedDate: DateTime
  AskedByUid: ID
  AskedByFullName: String
  ModifiedDate: DateTime
  ModifiedUid: ID
  LastPostDate: DateTime
  LastPostUid: ID
  RepliesCount: Int
  HasAnswer: Boolean
  LastActivity: DateTime
  IsPublic: Boolean!
  IsPublished: Boolean
  HasAcceptedAnswer: Boolean
  AcceptedAnswerId: Int
  AcceptedAnswerCreatedUid: ID
  AcceptedAnswerCreatedFullName: String
  AcceptedAnswerCreatedDate: DateTime
}

"""A connection to a list of items."""
type QuestionsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type QuestionsReportViewEdge {
  """The item at the end of the edge"""
  node: QuestionsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input QuestionsReportViewExpression {
  operator: Operator!
  operands: [QuestionsReportViewOperand]!
}

enum QuestionsReportViewField {
  id
  QuestionId
  Title
  Description
  Beid
  CategoryId
  CategoryName
  CreatedUid
  CreatedFullName
  CreatedDate
  AskedByUid
  AskedByFullName
  ModifiedDate
  ModifiedUid
  LastPostDate
  LastPostUid
  RepliesCount
  HasAnswer
  LastActivity
  IsPublic
  IsPublished
  HasAcceptedAnswer
  AcceptedAnswerId
  AcceptedAnswerCreatedUid
  AcceptedAnswerCreatedFullName
  AcceptedAnswerCreatedDate
}

input QuestionsReportViewOperand {
  field: QuestionsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: QuestionsReportViewExpression
}

input QuestionsReportViewOrderBy {
  field: QuestionsReportViewField
  direction: OrderByDirection = Ascending
}

type RecurringSchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String!
  TypeRecurringScheduleType: RecurringScheduleType!
  TypeId: Int!
  TimeZone: TimeZone!
  TimeZoneId: Int!
  IsActive: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  AppApplication: Application!
  AppId: Int!
  MaintScheduleRecurringScheduleOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  RsRecurringScheduleOnRecurringScheduleEntries(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleEntryOrderBy], filter: RecurringScheduleEntryExpression): RecurringScheduleEntryConnection!
}

"""A connection to a list of items."""
type RecurringScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecurringScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RecurringScheduleEdge {
  """The item at the end of the edge"""
  node: RecurringSchedule

  """A cursor for use in pagination"""
  cursor: String!
}

type RecurringScheduleEntry implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  RsRecurringSchedule: RecurringSchedule!
  Rsid: Int!
  Name: String!
  StartTime: Time!
  EndTime: Time!
  IsAllDay: Boolean!
  IntervalReportDeliveryInterval: ReportDeliveryInterval!
  IntervalId: Int!
  IntervalArgument: Int!
  IntervalArgument2: Int!
  RecurrenceStartDate: Date
  RecurrenceEndDate: Date
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type RecurringScheduleEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecurringScheduleEntryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RecurringScheduleEntryEdge {
  """The item at the end of the edge"""
  node: RecurringScheduleEntry

  """A cursor for use in pagination"""
  cursor: String!
}

input RecurringScheduleEntryExpression {
  operator: Operator!
  operands: [RecurringScheduleEntryOperand]!
}

enum RecurringScheduleEntryField {
  id
  Id
  Rsid
  Name
  StartTime
  EndTime
  IsAllDay
  IntervalId
  IntervalArgument
  IntervalArgument2
  RecurrenceStartDate
  RecurrenceEndDate
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input RecurringScheduleEntryOperand {
  field: RecurringScheduleEntryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RecurringScheduleEntryExpression
}

input RecurringScheduleEntryOrderBy {
  field: RecurringScheduleEntryField
  direction: OrderByDirection = Ascending
}

input RecurringScheduleExpression {
  operator: Operator!
  operands: [RecurringScheduleOperand]!
}

enum RecurringScheduleField {
  id
  Id
  Beid
  Name
  Description
  TypeId
  TimeZoneId
  IsActive
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  AppId
}

input RecurringScheduleOperand {
  field: RecurringScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RecurringScheduleExpression
}

input RecurringScheduleOrderBy {
  field: RecurringScheduleField
  direction: OrderByDirection = Ascending
}

type RecurringScheduleType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeRecurringScheduleTypeOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
}

"""A connection to a list of items."""
type RecurringScheduleTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecurringScheduleTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RecurringScheduleTypeEdge {
  """The item at the end of the edge"""
  node: RecurringScheduleType

  """A cursor for use in pagination"""
  cursor: String!
}

input RecurringScheduleTypeExpression {
  operator: Operator!
  operands: [RecurringScheduleTypeOperand]!
}

enum RecurringScheduleTypeField {
  id
  Id
  Name
}

input RecurringScheduleTypeOperand {
  field: RecurringScheduleTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RecurringScheduleTypeExpression
}

input RecurringScheduleTypeOrderBy {
  field: RecurringScheduleTypeField
  direction: OrderByDirection = Ascending
}

type ReportDeliveryFormat implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  FormatReportDeliveryFormatOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
}

"""A connection to a list of items."""
type ReportDeliveryFormatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportDeliveryFormatEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportDeliveryFormatEdge {
  """The item at the end of the edge"""
  node: ReportDeliveryFormat

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportDeliveryFormatExpression {
  operator: Operator!
  operands: [ReportDeliveryFormatOperand]!
}

enum ReportDeliveryFormatField {
  id
  Id
  Name
}

input ReportDeliveryFormatOperand {
  field: ReportDeliveryFormatField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportDeliveryFormatExpression
}

input ReportDeliveryFormatOrderBy {
  field: ReportDeliveryFormatField
  direction: OrderByDirection = Ascending
}

type ReportDeliveryInterval implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  IntervalReportDeliveryIntervalOnRecurringScheduleEntries(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleEntryOrderBy], filter: RecurringScheduleEntryExpression): RecurringScheduleEntryConnection!
  IntervalReportDeliveryIntervalOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
  IntervalReportDeliveryIntervalOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
}

"""A connection to a list of items."""
type ReportDeliveryIntervalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportDeliveryIntervalEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportDeliveryIntervalEdge {
  """The item at the end of the edge"""
  node: ReportDeliveryInterval

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportDeliveryIntervalExpression {
  operator: Operator!
  operands: [ReportDeliveryIntervalOperand]!
}

enum ReportDeliveryIntervalField {
  id
  Id
  Name
}

input ReportDeliveryIntervalOperand {
  field: ReportDeliveryIntervalField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportDeliveryIntervalExpression
}

input ReportDeliveryIntervalOrderBy {
  field: ReportDeliveryIntervalField
  direction: OrderByDirection = Ascending
}

type ReportDeliveryRecipient implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  RdsReportDeliverySchedule: ReportDeliverySchedule!
  Rdsid: Int!
  UidUser: User!
  Uid: ID!
}

"""A connection to a list of items."""
type ReportDeliveryRecipientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportDeliveryRecipientEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportDeliveryRecipientEdge {
  """The item at the end of the edge"""
  node: ReportDeliveryRecipient

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportDeliveryRecipientExpression {
  operator: Operator!
  operands: [ReportDeliveryRecipientOperand]!
}

enum ReportDeliveryRecipientField {
  id
  Id
  Rdsid
  Uid
}

input ReportDeliveryRecipientOperand {
  field: ReportDeliveryRecipientField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportDeliveryRecipientExpression
}

input ReportDeliveryRecipientOrderBy {
  field: ReportDeliveryRecipientField
  direction: OrderByDirection = Ascending
}

type ReportDeliverySchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ReportSearch: Search!
  ReportId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  FormatReportDeliveryFormat: ReportDeliveryFormat!
  FormatId: Int!
  IntervalReportDeliveryInterval: ReportDeliveryInterval!
  IntervalId: Int!
  IntervalParam: Int
  IntervalTime: String!
  IsActive: Boolean!
  NextAttemptDateUtc: DateTime!
  LastAttemptDateUtc: DateTime
  FailedAttemptCount: Int!
  IsLandscape: Boolean!
  PaperSizeReportPaperSize: ReportPaperSize!
  PaperSizeId: Int!
  ShouldSendIfEmpty: Boolean!
  RdsReportDeliveryScheduleOnReportDeliveryRecipients(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryRecipientOrderBy], filter: ReportDeliveryRecipientExpression): ReportDeliveryRecipientConnection!
}

"""A connection to a list of items."""
type ReportDeliveryScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportDeliveryScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportDeliveryScheduleEdge {
  """The item at the end of the edge"""
  node: ReportDeliverySchedule

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportDeliveryScheduleExpression {
  operator: Operator!
  operands: [ReportDeliveryScheduleOperand]!
}

enum ReportDeliveryScheduleField {
  id
  Id
  ReportId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  FormatId
  IntervalId
  IntervalParam
  IntervalTime
  IsActive
  NextAttemptDateUtc
  LastAttemptDateUtc
  FailedAttemptCount
  IsLandscape
  PaperSizeId
  ShouldSendIfEmpty
}

input ReportDeliveryScheduleOperand {
  field: ReportDeliveryScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportDeliveryScheduleExpression
}

input ReportDeliveryScheduleOrderBy {
  field: ReportDeliveryScheduleField
  direction: OrderByDirection = Ascending
}

type ReportFolder implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Description: String
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
  Order: Float!
  FolderVisibility: Int!
  Application: String!
  AppId: Int
  ReportFolderOnSearches(after: String, first: Int, before: String, last: Int, sort: [SearchOrderBy], filter: SearchExpression): SearchConnection
}

"""A connection to a list of items."""
type ReportFolderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportFolderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportFolderEdge {
  """The item at the end of the edge"""
  node: ReportFolder

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportFolderExpression {
  operator: Operator!
  operands: [ReportFolderOperand]!
}

enum ReportFolderField {
  id
  Id
  Name
  BeidInt
  Description
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  Order
  FolderVisibility
  Application
  AppId
}

input ReportFolderOperand {
  field: ReportFolderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportFolderExpression
}

input ReportFolderOrderBy {
  field: ReportFolderField
  direction: OrderByDirection = Ascending
}

type ReportPaperSize implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  PaperSizeReportPaperSizeOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
}

"""A connection to a list of items."""
type ReportPaperSizeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportPaperSizeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportPaperSizeEdge {
  """The item at the end of the edge"""
  node: ReportPaperSize

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportPaperSizeExpression {
  operator: Operator!
  operands: [ReportPaperSizeOperand]!
}

enum ReportPaperSizeField {
  id
  Id
  Name
}

input ReportPaperSizeOperand {
  field: ReportPaperSizeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportPaperSizeExpression
}

input ReportPaperSizeOrderBy {
  field: ReportPaperSizeField
  direction: OrderByDirection = Ascending
}

type ReportSource implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID
  Name: String!
  Description: String
  SourceName: String!
  ItemIdColumn: String
  ItemComponent: Int
  BeidColumn: String
  AccountIdColumn: String
  CreatedDate: DateTime!
  CreatedUid: ID
  ModifiedDate: DateTime!
  ModifiedUid: ID
  IsActive: Boolean!
  BeidIntColumn: String
  AppIdColumn: String
  ProjectIdColumn: String
  DefaultCustomSectionName: String!
  EnableOptionRecompile: Boolean!
  ReportSourceOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
  RsReportSourceOnReportSourcesApplications(after: String, first: Int, before: String, last: Int, sort: [ReportSourcesApplicationOrderBy], filter: ReportSourcesApplicationExpression): ReportSourcesApplicationConnection!
  ReportSourceOnReportSourcesAttributeExtensions(after: String, first: Int, before: String, last: Int, sort: [ReportSourcesAttributeExtensionOrderBy], filter: ReportSourcesAttributeExtensionExpression): ReportSourcesAttributeExtensionConnection!
  ReportSourceOnSearches(after: String, first: Int, before: String, last: Int, sort: [SearchOrderBy], filter: SearchExpression): SearchConnection
}

"""A connection to a list of items."""
type ReportSourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportSourceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportSourceEdge {
  """The item at the end of the edge"""
  node: ReportSource

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportSourceExpression {
  operator: Operator!
  operands: [ReportSourceOperand]!
}

enum ReportSourceField {
  id
  Id
  Beid
  Name
  Description
  SourceName
  ItemIdColumn
  ItemComponent
  BeidColumn
  AccountIdColumn
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  IsActive
  BeidIntColumn
  AppIdColumn
  ProjectIdColumn
  DefaultCustomSectionName
  EnableOptionRecompile
}

type ReportSourceFilterType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Type: String!
  Settings: String
  ReportSourceFilterTypeOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection
}

"""A connection to a list of items."""
type ReportSourceFilterTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportSourceFilterTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportSourceFilterTypeEdge {
  """The item at the end of the edge"""
  node: ReportSourceFilterType

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportSourceFilterTypeExpression {
  operator: Operator!
  operands: [ReportSourceFilterTypeOperand]!
}

enum ReportSourceFilterTypeField {
  id
  Id
  Name
  Type
  Settings
}

input ReportSourceFilterTypeOperand {
  field: ReportSourceFilterTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportSourceFilterTypeExpression
}

input ReportSourceFilterTypeOrderBy {
  field: ReportSourceFilterTypeField
  direction: OrderByDirection = Ascending
}

input ReportSourceOperand {
  field: ReportSourceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportSourceExpression
}

input ReportSourceOrderBy {
  field: ReportSourceField
  direction: OrderByDirection = Ascending
}

type ReportSourcesApplication implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  RsReportSource: ReportSource!
  Rsid: Int!
  ApplicationName: String!
  PermissionName: String
}

"""A connection to a list of items."""
type ReportSourcesApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportSourcesApplicationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportSourcesApplicationEdge {
  """The item at the end of the edge"""
  node: ReportSourcesApplication

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportSourcesApplicationExpression {
  operator: Operator!
  operands: [ReportSourcesApplicationOperand]!
}

enum ReportSourcesApplicationField {
  id
  Id
  Rsid
  ApplicationName
  PermissionName
}

input ReportSourcesApplicationOperand {
  field: ReportSourcesApplicationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportSourcesApplicationExpression
}

input ReportSourcesApplicationOrderBy {
  field: ReportSourcesApplicationField
  direction: OrderByDirection = Ascending
}

type ReportSourcesAttributeExtension implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ReportSource: ReportSource!
  ReportSourceId: Int!
  SectionName: String!
  SectionOrder: Float!
  ItemIdColumn: String!
  Component: Component!
  ComponentId: Int!
  AppRestriction: String
}

"""A connection to a list of items."""
type ReportSourcesAttributeExtensionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportSourcesAttributeExtensionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ReportSourcesAttributeExtensionEdge {
  """The item at the end of the edge"""
  node: ReportSourcesAttributeExtension

  """A cursor for use in pagination"""
  cursor: String!
}

input ReportSourcesAttributeExtensionExpression {
  operator: Operator!
  operands: [ReportSourcesAttributeExtensionOperand]!
}

enum ReportSourcesAttributeExtensionField {
  id
  Id
  ReportSourceId
  SectionName
  SectionOrder
  ItemIdColumn
  ComponentId
  AppRestriction
}

input ReportSourcesAttributeExtensionOperand {
  field: ReportSourcesAttributeExtensionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ReportSourcesAttributeExtensionExpression
}

input ReportSourcesAttributeExtensionOrderBy {
  field: ReportSourcesAttributeExtensionField
  direction: OrderByDirection = Ascending
}

type RequestsExt implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Team: Team!
  Id: Int!
  Workflow: Workflow
  WorkflowId: Int
  WorkflowStep: WorkflowStep
  WorkflowStepId: Int
  WorkflowAssignedDate: DateTime
  WorkflowAssignedByUid: ID
  IsSubmitted: Boolean!
  SubmittedDate: DateTime
  IsDeclined: Boolean!
  DeclinedDate: DateTime
  DeclinedByUid: ID
  IsApproved: Boolean!
  ApprovedDate: DateTime
  ApprovedByUid: ID
  IsReadyForReporting: Boolean!
  IsStaffed: Boolean!
  StaffedDate: DateTime
  StaffedByUid: ID
  WorkflowStepStartedDate: DateTime
}

"""A connection to a list of items."""
type RequestsExtConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestsExtEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RequestsExtEdge {
  """The item at the end of the edge"""
  node: RequestsExt

  """A cursor for use in pagination"""
  cursor: String!
}

input RequestsExtExpression {
  operator: Operator!
  operands: [RequestsExtOperand]!
}

enum RequestsExtField {
  id
  Id
  WorkflowId
  WorkflowStepId
  WorkflowAssignedDate
  WorkflowAssignedByUid
  IsSubmitted
  SubmittedDate
  IsDeclined
  DeclinedDate
  DeclinedByUid
  IsApproved
  ApprovedDate
  ApprovedByUid
  IsReadyForReporting
  IsStaffed
  StaffedDate
  StaffedByUid
  WorkflowStepStartedDate
}

input RequestsExtOperand {
  field: RequestsExtField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RequestsExtExpression
}

input RequestsExtOrderBy {
  field: RequestsExtField
  direction: OrderByDirection = Ascending
}

type RequestsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  RequestId: Int!
  Beid: ID!
  Name: String!
  Description: String
  Requirements: String
  RequestorUid: ID
  RequestorFullName: String
  DateCreated: DateTime!
  DateModified: DateTime
  DateApproved: DateTime
  DateSubmitted: DateTime
  LastStatusComments: String
  StatusModified: DateTime
  AccountId: Int
  PriorityId: Int
  PriorityName: String
  PriorityOrder: Float
  AccountName: String
  TypeId: Int
  TypeName: String!
  TypeCategoryId: Int!
  TypeCategoryName: String
  StatusId: Int
  StatusName: String
  WorkflowTemplateStepId: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeDays: Int
  WorkflowStepAgeWorkDays: Int
  PrimaryReviewerUid: ID
  PrimaryReviewerFullName: String
  StatusDesc: String
  CompositeScore: Float
  RisksScore: Float
  GoalsScore: Float
  CompositeScorePct: Float
  ScorecardScore: Float
  SponsorName: String
  SponsorEmail: String
  SponsorRefId: Int
  TotalBudget: Decimal
  TimeBudget: Decimal
  ExpensesBudget: Decimal
  EstimatedHours: Float
  StartDate: DateTime
  EndDate: DateTime
  Roi: Float
  Npv: Decimal
  Irr: Float
  CategoryId: Int!
  CategoryName: String!
  CurrentEvaluatorUid: ID
  WorkflowId: Int
  WorkflowName: String
  WorkflowStepId: Int
  WorkflowStepRespNames: String
  WorkflowStepRespUiDs: String
  IndustryId: Int
  IndustryName: String
  ServiceId: Int!
  ServiceName: String!
  ServiceCategoryId: Int!
  ServiceCategoryName: String!
  ActualHours: Decimal!
  OpenInProcessRisksCount: Int
  OpenInProcessRisksCountLink: Int
  PlansCount: Int
}

"""A connection to a list of items."""
type RequestsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RequestsReportViewEdge {
  """The item at the end of the edge"""
  node: RequestsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input RequestsReportViewExpression {
  operator: Operator!
  operands: [RequestsReportViewOperand]!
}

enum RequestsReportViewField {
  id
  Id
  RequestId
  Beid
  Name
  Description
  Requirements
  RequestorUid
  RequestorFullName
  DateCreated
  DateModified
  DateApproved
  DateSubmitted
  LastStatusComments
  StatusModified
  AccountId
  PriorityId
  PriorityName
  PriorityOrder
  AccountName
  TypeId
  TypeName
  TypeCategoryId
  TypeCategoryName
  StatusId
  StatusName
  WorkflowTemplateStepId
  WorkflowStepStartedDate
  WorkflowStepAgeDays
  WorkflowStepAgeWorkDays
  PrimaryReviewerUid
  PrimaryReviewerFullName
  StatusDesc
  CompositeScore
  RisksScore
  GoalsScore
  CompositeScorePct
  ScorecardScore
  SponsorName
  SponsorEmail
  SponsorRefId
  TotalBudget
  TimeBudget
  ExpensesBudget
  EstimatedHours
  StartDate
  EndDate
  Roi
  Npv
  Irr
  CategoryId
  CategoryName
  CurrentEvaluatorUid
  WorkflowId
  WorkflowName
  WorkflowStepId
  WorkflowStepRespNames
  WorkflowStepRespUiDs
  IndustryId
  IndustryName
  ServiceId
  ServiceName
  ServiceCategoryId
  ServiceCategoryName
  ActualHours
  OpenInProcessRisksCount
  OpenInProcessRisksCountLink
  PlansCount
}

input RequestsReportViewOperand {
  field: RequestsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RequestsReportViewExpression
}

input RequestsReportViewOrderBy {
  field: RequestsReportViewField
  direction: OrderByDirection = Ascending
}

type RequestWorkflowHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ReqId: Int!
  WorkflowStepId: Int!
  StartedUidUser: User
  StartedUid: ID
  StartedDate: DateTime
  CompletedUidUser: User
  CompletedUid: ID
  CompletedDate: DateTime
}

"""A connection to a list of items."""
type RequestWorkflowHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestWorkflowHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RequestWorkflowHistoryEdge {
  """The item at the end of the edge"""
  node: RequestWorkflowHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input RequestWorkflowHistoryExpression {
  operator: Operator!
  operands: [RequestWorkflowHistoryOperand]!
}

enum RequestWorkflowHistoryField {
  id
  Id
  ReqId
  WorkflowStepId
  StartedUid
  StartedDate
  CompletedUid
  CompletedDate
}

input RequestWorkflowHistoryOperand {
  field: RequestWorkflowHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RequestWorkflowHistoryExpression
}

input RequestWorkflowHistoryOrderBy {
  field: RequestWorkflowHistoryField
  direction: OrderByDirection = Ascending
}

type ResourceHoursFact implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  CreatedDate: DateTime!
  ItemId: Int!
  ScheduleTypeId: Int!
  ResourceUid: ID!
  IsEmployee: Boolean!
  YearMonth: Int!
  YearWeek: Int!
  ScheduledHours: Decimal!
  ApprovedHours: Decimal!
  AssignedHours: Decimal!
  ActualHours: Decimal!
}

"""A connection to a list of items."""
type ResourceHoursFactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceHoursFactEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourceHoursFactEdge {
  """The item at the end of the edge"""
  node: ResourceHoursFact

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceHoursFactExpression {
  operator: Operator!
  operands: [ResourceHoursFactOperand]!
}

enum ResourceHoursFactField {
  id
  Id
  Beid
  CreatedDate
  ItemId
  ScheduleTypeId
  ResourceUid
  IsEmployee
  YearMonth
  YearWeek
  ScheduledHours
  ApprovedHours
  AssignedHours
  ActualHours
}

input ResourceHoursFactOperand {
  field: ResourceHoursFactField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourceHoursFactExpression
}

input ResourceHoursFactOrderBy {
  field: ResourceHoursFactField
  direction: OrderByDirection = Ascending
}

type ResourcePool implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  DateCreated: DateTime!
  DateModified: DateTime!
  ManagerUidUser: User
  ManagerUid: ID
  IsActive: Boolean!
  RequiresApproval: Boolean!
  NotifyOnAssignment: Boolean!
  ResourcePoolOnResourcePoolManagers(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolManagerOrderBy], filter: ResourcePoolManagerExpression): ResourcePoolManagerConnection!
}

"""A connection to a list of items."""
type ResourcePoolConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourcePoolEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourcePoolEdge {
  """The item at the end of the edge"""
  node: ResourcePool

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourcePoolExpression {
  operator: Operator!
  operands: [ResourcePoolOperand]!
}

enum ResourcePoolField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  ManagerUid
  IsActive
  RequiresApproval
  NotifyOnAssignment
}

type ResourcePoolManager implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ResourcePool: ResourcePool!
  ResourcePoolId: Int!
  BeidInt: Int!
  UidUser: User!
  Uid: ID!
  IsPrimary: Boolean!
  ReceivesNotifications: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type ResourcePoolManagerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourcePoolManagerEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourcePoolManagerEdge {
  """The item at the end of the edge"""
  node: ResourcePoolManager

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourcePoolManagerExpression {
  operator: Operator!
  operands: [ResourcePoolManagerOperand]!
}

enum ResourcePoolManagerField {
  id
  ResourcePoolId
  BeidInt
  Uid
  IsPrimary
  ReceivesNotifications
  CreatedUid
  ModifiedUid
  CreatedDateUtc
  ModifiedDateUtc
}

input ResourcePoolManagerOperand {
  field: ResourcePoolManagerField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourcePoolManagerExpression
}

input ResourcePoolManagerOrderBy {
  field: ResourcePoolManagerField
  direction: OrderByDirection = Ascending
}

input ResourcePoolOperand {
  field: ResourcePoolField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourcePoolExpression
}

input ResourcePoolOrderBy {
  field: ResourcePoolField
  direction: OrderByDirection = Ascending
}

type ResourceRequest implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ProjTeam: Team!
  ProjId: Int!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  DateCreated: DateTime!
  StatusResourceRequestStatus: ResourceRequestStatus!
  StatusId: Int!
  StatusDate: DateTime
  StatusUid: ID
  RequestedFrFunctionalRole: FunctionalRole!
  RequestedFrid: Int!
  RequestedUidUser: User
  RequestedUid: ID
  DaysOld: Int
  SelectedUid: ID!
  Description: String
  IsFromPoolManager: Boolean!
  RrResourceRequestOnResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection!
  RrResourceRequestOnResourceRequestSchedules(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestScheduleOrderBy], filter: ResourceRequestScheduleExpression): ResourceRequestScheduleConnection!
}

"""A connection to a list of items."""
type ResourceRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceRequestEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourceRequestEdge {
  """The item at the end of the edge"""
  node: ResourceRequest

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceRequestExpression {
  operator: Operator!
  operands: [ResourceRequestOperand]!
}

enum ResourceRequestField {
  id
  Id
  ProjId
  CreatedByUid
  DateCreated
  StatusId
  StatusDate
  StatusUid
  RequestedFrid
  RequestedUid
  DaysOld
  SelectedUid
  Description
  IsFromPoolManager
}

type ResourceRequestHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ResourceRequestHistory: ResourceRequestHistory!
  Id: Int!
  RrResourceRequest: ResourceRequest!
  Rrid: Int!
  UidUser: User!
  Uid: ID!
  OldStatusResourceRequestStatus: ResourceRequestStatus!
  OldStatus: Int!
  NewStatusResourceRequestStatus: ResourceRequestStatus!
  NewStatus: Int!
  Comments: String!
  DateCreated: DateTime!
  Notified: String
  ResourceRequestHistoryOnResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection!
}

"""A connection to a list of items."""
type ResourceRequestHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceRequestHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourceRequestHistoryEdge {
  """The item at the end of the edge"""
  node: ResourceRequestHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceRequestHistoryExpression {
  operator: Operator!
  operands: [ResourceRequestHistoryOperand]!
}

enum ResourceRequestHistoryField {
  id
  Id
  Rrid
  Uid
  OldStatus
  NewStatus
  Comments
  DateCreated
  Notified
}

input ResourceRequestHistoryOperand {
  field: ResourceRequestHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourceRequestHistoryExpression
}

input ResourceRequestHistoryOrderBy {
  field: ResourceRequestHistoryField
  direction: OrderByDirection = Ascending
}

input ResourceRequestOperand {
  field: ResourceRequestField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourceRequestExpression
}

input ResourceRequestOrderBy {
  field: ResourceRequestField
  direction: OrderByDirection = Ascending
}

type ResourceRequestSchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  RrResourceRequest: ResourceRequest!
  Rrid: Int!
  Year: Int!
  Month: Int!
  Week: Int!
  YearMonth: Int!
  YearWeek: Int!
  Hours: Float!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type ResourceRequestScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceRequestScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourceRequestScheduleEdge {
  """The item at the end of the edge"""
  node: ResourceRequestSchedule

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceRequestScheduleExpression {
  operator: Operator!
  operands: [ResourceRequestScheduleOperand]!
}

enum ResourceRequestScheduleField {
  id
  Id
  Rrid
  Year
  Month
  Week
  YearMonth
  YearWeek
  Hours
  DateCreated
}

input ResourceRequestScheduleOperand {
  field: ResourceRequestScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourceRequestScheduleExpression
}

input ResourceRequestScheduleOrderBy {
  field: ResourceRequestScheduleField
  direction: OrderByDirection = Ascending
}

type ResourceRequestStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  OldStatusResourceRequestStatusOnResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection!
  NewStatusResourceRequestStatusOnResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection!
  StatusResourceRequestStatusOnResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection!
}

"""A connection to a list of items."""
type ResourceRequestStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceRequestStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResourceRequestStatusEdge {
  """The item at the end of the edge"""
  node: ResourceRequestStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input ResourceRequestStatusExpression {
  operator: Operator!
  operands: [ResourceRequestStatusOperand]!
}

enum ResourceRequestStatusField {
  id
  Id
  Name
}

input ResourceRequestStatusOperand {
  field: ResourceRequestStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResourceRequestStatusExpression
}

input ResourceRequestStatusOrderBy {
  field: ResourceRequestStatusField
  direction: OrderByDirection = Ascending
}

type ResponseStrategy implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Title: String!
  ForOpportunity: Boolean!
  Description: String!
  Order: Int!
  ResponseStrategyOnIssues(after: String, first: Int, before: String, last: Int, sort: [IssueOrderBy], filter: IssueExpression): IssueConnection
}

"""A connection to a list of items."""
type ResponseStrategyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResponseStrategyEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResponseStrategyEdge {
  """The item at the end of the edge"""
  node: ResponseStrategy

  """A cursor for use in pagination"""
  cursor: String!
}

input ResponseStrategyExpression {
  operator: Operator!
  operands: [ResponseStrategyOperand]!
}

enum ResponseStrategyField {
  id
  Id
  BeidInt
  Title
  ForOpportunity
  Description
  Order
}

input ResponseStrategyOperand {
  field: ResponseStrategyField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResponseStrategyExpression
}

input ResponseStrategyOrderBy {
  field: ResponseStrategyField
  direction: OrderByDirection = Ascending
}

type ResponseTemplate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  Description: String!
  Comments: String!
  CategoryResponseTemplateCategory: ResponseTemplateCategory!
  CategoryId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  AppApplication: Application!
  AppId: Int!
}

type ResponseTemplateCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  AppApplication: Application!
  AppId: Int!
  CategoryResponseTemplateCategoryOnResponseTemplates(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateOrderBy], filter: ResponseTemplateExpression): ResponseTemplateConnection!
}

"""A connection to a list of items."""
type ResponseTemplateCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResponseTemplateCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResponseTemplateCategoryEdge {
  """The item at the end of the edge"""
  node: ResponseTemplateCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input ResponseTemplateCategoryExpression {
  operator: Operator!
  operands: [ResponseTemplateCategoryOperand]!
}

enum ResponseTemplateCategoryField {
  id
  Id
  Beid
  Name
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  AppId
}

input ResponseTemplateCategoryOperand {
  field: ResponseTemplateCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResponseTemplateCategoryExpression
}

input ResponseTemplateCategoryOrderBy {
  field: ResponseTemplateCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ResponseTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResponseTemplateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ResponseTemplateEdge {
  """The item at the end of the edge"""
  node: ResponseTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input ResponseTemplateExpression {
  operator: Operator!
  operands: [ResponseTemplateOperand]!
}

enum ResponseTemplateField {
  id
  Id
  Beid
  Name
  Description
  Comments
  CategoryId
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  AppId
}

input ResponseTemplateOperand {
  field: ResponseTemplateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ResponseTemplateExpression
}

input ResponseTemplateOrderBy {
  field: ResponseTemplateField
  direction: OrderByDirection = Ascending
}

type Rev implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  Uid: ID!
  Tid: Int!
  File: File!
  FileId: ID!
  No: Int
  Name: String!
  Desc: String
  Size: String
  Ext: String
  DateCreated: DateTime!
  RevisionRevOnFileTexts(after: String, first: Int, before: String, last: Int, sort: [FileTextOrderBy], filter: FileTextExpression): FileTextConnection!
  RevOnRevUserStatuses(after: String, first: Int, before: String, last: Int, sort: [RevUserStatusOrderBy], filter: RevUserStatusExpression): RevUserStatusConnection!
}

"""A connection to a list of items."""
type RevConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RevEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RevEdge {
  """The item at the end of the edge"""
  node: Rev

  """A cursor for use in pagination"""
  cursor: String!
}

input RevExpression {
  operator: Operator!
  operands: [RevOperand]!
}

enum RevField {
  id
  Id
  Uid
  Tid
  FileId
  No
  Name
  Desc
  Size
  Ext
  DateCreated
}

input RevOperand {
  field: RevField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RevExpression
}

input RevOrderBy {
  field: RevField
  direction: OrderByDirection = Ascending
}

type RevUserStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Rev: Rev!
  RevId: ID!
  Uid: ID!
  Tid: Int!
  Read: Boolean!
  DateRead: DateTime!
}

"""A connection to a list of items."""
type RevUserStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RevUserStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RevUserStatusEdge {
  """The item at the end of the edge"""
  node: RevUserStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input RevUserStatusExpression {
  operator: Operator!
  operands: [RevUserStatusOperand]!
}

enum RevUserStatusField {
  id
  Id
  RevId
  Uid
  Tid
  Read
  DateRead
}

input RevUserStatusOperand {
  field: RevUserStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RevUserStatusExpression
}

input RevUserStatusOrderBy {
  field: RevUserStatusField
  direction: OrderByDirection = Ascending
}

type Risk implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String
  CreatedByUidUser: User
  CreatedByUid: ID
  DateCreated: DateTime!
  DateModified: DateTime
  ModifiedByUidUser: User
  ModifiedByUid: ID
  Description: String
  IsActive: Boolean!
  RiskOnProjectRisks(after: String, first: Int, before: String, last: Int, sort: [ProjectRiskOrderBy], filter: ProjectRiskExpression): ProjectRiskConnection!
}

"""A connection to a list of items."""
type RiskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RiskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RiskEdge {
  """The item at the end of the edge"""
  node: Risk

  """A cursor for use in pagination"""
  cursor: String!
}

input RiskExpression {
  operator: Operator!
  operands: [RiskOperand]!
}

enum RiskField {
  id
  Id
  Beid
  Name
  CreatedByUid
  DateCreated
  DateModified
  ModifiedByUid
  Description
  IsActive
}

input RiskOperand {
  field: RiskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RiskExpression
}

input RiskOrderBy {
  field: RiskField
  direction: OrderByDirection = Ascending
}

type RisksReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  RiskId: Int!
  Id: Int!
  ModuleTag: Int!
  Beid: ID!
  Subject: String
  Description: String
  CategoryName: String
  DateCreated: DateTime
  CreatedByUid: ID!
  CreatedByFullName: String
  DateModified: DateTime
  ModifiedByUid: ID
  ModifiedByFullName: String
  CompletedDate: DateTime
  CompletedUid: ID
  CompletedFullName: String
  LastUpdateText: String
  LastUpdateDate: DateTime
  LastUpdateUid: ID
  LastUpdateFullName: String
  StartDate: DateTime
  DueDate: DateTime
  DaysOld: Int
  ActHours: Decimal
  EstHours: Float
  ResponsibleUid: ID
  ResponsibleFullName: String!
  IsUnassigned: Boolean
  IsOpportunity: Boolean!
  Classification: String
  Probability: Decimal
  ProbabilityName: String
  Urgency: Decimal
  UrgencyName: String
  Impact: Decimal
  ImpactName: String
  IssueCount: Int
  OpenIssueCount: Int
  ResponseStrategyId: Int
  ResponseStrategyName: String
  ResponseStrategyDescription: String
  StatusName: String!
  StatusId: Int!
  TaskId: Int
  PlanId: Int
  TaskName: String
  TeamIsActive: Boolean!
  SponsorName: String
  SponsorEmail: String
  ProjectId: Int!
  ProjectName: String!
  ProjectActive: Boolean!
  ProjectDateCreated: DateTime!
  TeamInternalTypeId: String
  ProjectStatusId: Int!
  ProjectStatusName: String!
  ProjectStatusDescription: String
  HealthId: Int!
  ProjectDateStatusModified: DateTime
  ProjectTypeId: Int
  ProjectType: String
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
  AccountId: Int
  ProjectAccountId: Int
  ProjectAccount: String
  ProjectSponsorName: String
  ProjectSponsorEmail: String
  ProjectPriorityId: Int
  ProjectPriorityName: String
  ProjectPriorityOrder: Float
}

"""A connection to a list of items."""
type RisksReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RisksReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RisksReportViewEdge {
  """The item at the end of the edge"""
  node: RisksReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input RisksReportViewExpression {
  operator: Operator!
  operands: [RisksReportViewOperand]!
}

enum RisksReportViewField {
  id
  RiskId
  Id
  ModuleTag
  Beid
  Subject
  Description
  CategoryName
  DateCreated
  CreatedByUid
  CreatedByFullName
  DateModified
  ModifiedByUid
  ModifiedByFullName
  CompletedDate
  CompletedUid
  CompletedFullName
  LastUpdateText
  LastUpdateDate
  LastUpdateUid
  LastUpdateFullName
  StartDate
  DueDate
  DaysOld
  ActHours
  EstHours
  ResponsibleUid
  ResponsibleFullName
  IsUnassigned
  IsOpportunity
  Classification
  Probability
  ProbabilityName
  Urgency
  UrgencyName
  Impact
  ImpactName
  IssueCount
  OpenIssueCount
  ResponseStrategyId
  ResponseStrategyName
  ResponseStrategyDescription
  StatusName
  StatusId
  TaskId
  PlanId
  TaskName
  TeamIsActive
  SponsorName
  SponsorEmail
  ProjectId
  ProjectName
  ProjectActive
  ProjectDateCreated
  TeamInternalTypeId
  ProjectStatusId
  ProjectStatusName
  ProjectStatusDescription
  HealthId
  ProjectDateStatusModified
  ProjectTypeId
  ProjectType
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
  AccountId
  ProjectAccountId
  ProjectAccount
  ProjectSponsorName
  ProjectSponsorEmail
  ProjectPriorityId
  ProjectPriorityName
  ProjectPriorityOrder
}

input RisksReportViewOperand {
  field: RisksReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RisksReportViewExpression
}

input RisksReportViewOrderBy {
  field: RisksReportViewField
  direction: OrderByDirection = Ascending
}

type Role implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  Name: String!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  DateCreated: DateTime!
  DateModified: DateTime
  LicenseType: LicenseType
  LicenseTypeId: Int
  AppId: Int
  RoleOnRolePermissions(after: String, first: Int, before: String, last: Int, sort: [RolePermissionOrderBy], filter: RolePermissionExpression): RolePermissionConnection!
  SecurityRoleRoleOnUserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection
  RoleOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge"""
  node: Role

  """A cursor for use in pagination"""
  cursor: String!
}

input RoleExpression {
  operator: Operator!
  operands: [RoleOperand]!
}

enum RoleField {
  id
  Id
  Name
  Beid
  DateCreated
  DateModified
  LicenseTypeId
  AppId
}

input RoleOperand {
  field: RoleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RoleExpression
}

input RoleOrderBy {
  field: RoleField
  direction: OrderByDirection = Ascending
}

type RolePermission implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Role: Role!
  RoleId: ID!
  PermPermission: Permission!
  PermId: Int!
  HasPermission: Boolean!
}

"""A connection to a list of items."""
type RolePermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RolePermissionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type RolePermissionEdge {
  """The item at the end of the edge"""
  node: RolePermission

  """A cursor for use in pagination"""
  cursor: String!
}

input RolePermissionExpression {
  operator: Operator!
  operands: [RolePermissionOperand]!
}

enum RolePermissionField {
  id
  Id
  RoleId
  PermId
  HasPermission
}

input RolePermissionOperand {
  field: RolePermissionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: RolePermissionExpression
}

input RolePermissionOrderBy {
  field: RolePermissionField
  direction: OrderByDirection = Ascending
}

type Schedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Year: Int!
  Month: Int!
  Week: Int!
  YearMonth: Int!
  YearWeek: Int!
  DateCreated: DateTime!
  Hours: Float!
  Uid: ID!
  Beid: ID!
  ItemId: Int!
  FunctionalRoleId: Int
  RequestedFunctionalRoleId: Int
  SchTypeId: Int!
}

"""A connection to a list of items."""
type ScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type ScheduledActualHour implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Uid: ID!
  Year: Int!
  Month: Int!
  Week: Int!
  YearMonth: Int!
  YearWeek: Int!
  ScheduledHours: Decimal!
  SchTypeId: Int!
  ActualHours: Decimal!
  ProjectId: Int!
  FunctionalRoleId: Int!
  ResourcePoolId: Int
  ReportsToUid: ID
  ProjectAdminUid: ID
  ProjectAdmin2Uid: ID
}

"""A connection to a list of items."""
type ScheduledActualHourConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledActualHourEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduledActualHourEdge {
  """The item at the end of the edge"""
  node: ScheduledActualHour

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduledActualHourExpression {
  operator: Operator!
  operands: [ScheduledActualHourOperand]!
}

enum ScheduledActualHourField {
  id
  Id
  Beid
  Uid
  Year
  Month
  Week
  YearMonth
  YearWeek
  ScheduledHours
  SchTypeId
  ActualHours
  ProjectId
  FunctionalRoleId
  ResourcePoolId
  ReportsToUid
  ProjectAdminUid
  ProjectAdmin2Uid
}

input ScheduledActualHourOperand {
  field: ScheduledActualHourField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduledActualHourExpression
}

input ScheduledActualHourOrderBy {
  field: ScheduledActualHourField
  direction: OrderByDirection = Ascending
}

type ScheduledEvent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  EventDateUtc: DateTime!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  Args: Xml
}

"""A connection to a list of items."""
type ScheduledEventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledEventEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduledEventEdge {
  """The item at the end of the edge"""
  node: ScheduledEvent

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduledEventExpression {
  operator: Operator!
  operands: [ScheduledEventOperand]!
}

enum ScheduledEventField {
  id
  Id
  Beid
  EventDateUtc
  ItemId
  ComponentId
  Args
}

input ScheduledEventOperand {
  field: ScheduledEventField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduledEventExpression
}

input ScheduledEventOrderBy {
  field: ScheduledEventField
  direction: OrderByDirection = Ascending
}

type ScheduledVsActualByProjectReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ResourceFullName: String
  ProjectName: String!
  YearWeek: Int!
  ScheduledHours: Decimal!
  ActualHours: Decimal!
  Beid: ID!
  Uid: ID!
  ResourceManagerUid: ID
  ResourceManagerFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ReportsToUid: ID
  ReportsToFullName: String
  Year: Int!
  Month: Int!
  Week: Int!
  MonthDate: DateTime
  WeekDate: DateTime
  YearMonth: Int!
  ProjectId: Int!
  ProjectManagerUid: ID
  ProjectManagerFullName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerFullName: String
  ResourceIsActive: Boolean!
  ProjectIsActive: Boolean!
  ProjectTypeId: Int
  ProjectType: String
  AccountId: Int
  AccountName: String
  FunctionalRoleId: Int
  FunctionalRoleName: String
}

"""A connection to a list of items."""
type ScheduledVsActualByProjectReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledVsActualByProjectReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduledVsActualByProjectReportViewEdge {
  """The item at the end of the edge"""
  node: ScheduledVsActualByProjectReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduledVsActualByProjectReportViewExpression {
  operator: Operator!
  operands: [ScheduledVsActualByProjectReportViewOperand]!
}

enum ScheduledVsActualByProjectReportViewField {
  id
  ResourceFullName
  ProjectName
  YearWeek
  ScheduledHours
  ActualHours
  Beid
  Uid
  ResourceManagerUid
  ResourceManagerFullName
  ResourcePoolId
  ResourcePoolName
  ReportsToUid
  ReportsToFullName
  Year
  Month
  Week
  MonthDate
  WeekDate
  YearMonth
  ProjectId
  ProjectManagerUid
  ProjectManagerFullName
  ProjectAltManagerUid
  ProjectAltManagerFullName
  ResourceIsActive
  ProjectIsActive
  ProjectTypeId
  ProjectType
  AccountId
  AccountName
  FunctionalRoleId
  FunctionalRoleName
}

input ScheduledVsActualByProjectReportViewOperand {
  field: ScheduledVsActualByProjectReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduledVsActualByProjectReportViewExpression
}

input ScheduledVsActualByProjectReportViewOrderBy {
  field: ScheduledVsActualByProjectReportViewField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type ScheduleEdge {
  """The item at the end of the edge"""
  node: Schedule

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduleExpression {
  operator: Operator!
  operands: [ScheduleOperand]!
}

enum ScheduleField {
  id
  Id
  Year
  Month
  Week
  YearMonth
  YearWeek
  DateCreated
  Hours
  Uid
  Beid
  ItemId
  FunctionalRoleId
  RequestedFunctionalRoleId
  SchTypeId
}

input ScheduleOperand {
  field: ScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduleExpression
}

input ScheduleOrderBy {
  field: ScheduleField
  direction: OrderByDirection = Ascending
}

type ScheduleRequestsView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  ProjectId: Int!
  ProjectName: String!
  StatusId: Int
  InternalTypeId: String
  PriorityId: Int
  CompositeScore: Float!
  CompositeScorePct: Float!
  AccountId: Int!
  AccountName: String!
  TypeId: Int!
  TypeName: String!
  FunctionalRoleId: Int!
  FunctionalRoleName: String!
  FunctionalRoleBillRate: Decimal!
  SchYearMonth: Int!
  SchMonth: Int!
  SchYear: Int!
  SrHours: Float!
}

"""A connection to a list of items."""
type ScheduleRequestsViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleRequestsViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduleRequestsViewEdge {
  """The item at the end of the edge"""
  node: ScheduleRequestsView

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduleRequestsViewExpression {
  operator: Operator!
  operands: [ScheduleRequestsViewOperand]!
}

enum ScheduleRequestsViewField {
  id
  Beid
  ProjectId
  ProjectName
  StatusId
  InternalTypeId
  PriorityId
  CompositeScore
  CompositeScorePct
  AccountId
  AccountName
  TypeId
  TypeName
  FunctionalRoleId
  FunctionalRoleName
  FunctionalRoleBillRate
  SchYearMonth
  SchMonth
  SchYear
  SrHours
}

input ScheduleRequestsViewOperand {
  field: ScheduleRequestsViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduleRequestsViewExpression
}

input ScheduleRequestsViewOrderBy {
  field: ScheduleRequestsViewField
  direction: OrderByDirection = Ascending
}

type SchedulesRequest implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  PtfProjectTimeForecast: ProjectTimeForecast!
  Ptfid: Int!
  Year: Int!
  Month: Int!
  Week: Int!
  YearMonth: Int!
  YearWeek: Int!
  DateCreated: DateTime!
  Hours: Float!
  Beid: ID!
  ProjId: Int!
  FunctionalRoleId: Int
}

"""A connection to a list of items."""
type SchedulesRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SchedulesRequestEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SchedulesRequestEdge {
  """The item at the end of the edge"""
  node: SchedulesRequest

  """A cursor for use in pagination"""
  cursor: String!
}

input SchedulesRequestExpression {
  operator: Operator!
  operands: [SchedulesRequestOperand]!
}

enum SchedulesRequestField {
  id
  Id
  Ptfid
  Year
  Month
  Week
  YearMonth
  YearWeek
  DateCreated
  Hours
  Beid
  ProjId
  FunctionalRoleId
}

input SchedulesRequestOperand {
  field: SchedulesRequestField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SchedulesRequestExpression
}

input SchedulesRequestOrderBy {
  field: SchedulesRequestField
  direction: OrderByDirection = Ascending
}

type ScheduleType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type ScheduleTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduleTypeEdge {
  """The item at the end of the edge"""
  node: ScheduleType

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduleTypeExpression {
  operator: Operator!
  operands: [ScheduleTypeOperand]!
}

enum ScheduleTypeField {
  id
  Id
  Name
}

input ScheduleTypeOperand {
  field: ScheduleTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduleTypeExpression
}

input ScheduleTypeOrderBy {
  field: ScheduleTypeField
  direction: OrderByDirection = Ascending
}

type ScheduleView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  ProjectId: Int!
  ProjectName: String!
  IsActive: Boolean!
  StatusId: Int
  InternalTypeId: String
  PriorityId: Int
  ManagerUid: ID
  AltManagerUid: ID
  ManagerName: String
  CompositeScore: Float
  CompositeScorePct: Float
  AccountId: Int
  AccountName: String
  TypeId: Int
  TypeName: String
  FunctionalRoleId: Int!
  FunctionalRoleName: String!
  SchYearMonth: Int!
  SchMonth: Int!
  SchYear: Int!
  UserUid: ID!
  UserFullName: String
  UserIsEmployee: Boolean
  SchHours: Float!
  UserIsActive: Boolean!
  UserEndDate: Date
  UserStartDate: DateTime
  UserIsCapacityManaged: Boolean!
}

type ScheduleView3 implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TeamsId: Int!
  TeamsName: String!
  ProjectStartDate: DateTime
  ProjectEndDate: DateTime
  TeamsBeid: ID!
  TeamsInternalTypeId: String
  ResourceUid: ID!
  ResourceName: String!
  TYear: Int
  TMonth: Int
  TotalHours: Float
  ProjectLines: Int
}

"""A connection to a list of items."""
type ScheduleView3Connection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleView3Edge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduleView3Edge {
  """The item at the end of the edge"""
  node: ScheduleView3

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduleView3Expression {
  operator: Operator!
  operands: [ScheduleView3Operand]!
}

enum ScheduleView3Field {
  id
  TeamsId
  TeamsName
  ProjectStartDate
  ProjectEndDate
  TeamsBeid
  TeamsInternalTypeId
  ResourceUid
  ResourceName
  TYear
  TMonth
  TotalHours
  ProjectLines
}

input ScheduleView3Operand {
  field: ScheduleView3Field
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduleView3Expression
}

input ScheduleView3OrderBy {
  field: ScheduleView3Field
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ScheduleViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduleViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScheduleViewEdge {
  """The item at the end of the edge"""
  node: ScheduleView

  """A cursor for use in pagination"""
  cursor: String!
}

input ScheduleViewExpression {
  operator: Operator!
  operands: [ScheduleViewOperand]!
}

enum ScheduleViewField {
  id
  Beid
  ProjectId
  ProjectName
  IsActive
  StatusId
  InternalTypeId
  PriorityId
  ManagerUid
  AltManagerUid
  ManagerName
  CompositeScore
  CompositeScorePct
  AccountId
  AccountName
  TypeId
  TypeName
  FunctionalRoleId
  FunctionalRoleName
  SchYearMonth
  SchMonth
  SchYear
  UserUid
  UserFullName
  UserIsEmployee
  SchHours
  UserIsActive
  UserEndDate
  UserStartDate
  UserIsCapacityManaged
}

input ScheduleViewOperand {
  field: ScheduleViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScheduleViewExpression
}

input ScheduleViewOrderBy {
  field: ScheduleViewField
  direction: OrderByDirection = Ascending
}

type ScoreCard implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Name: String!
  Description: String
  IsActive: Boolean!
  IsDefault: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  ScoreCardOnScoreCardCriteria(after: String, first: Int, before: String, last: Int, sort: [ScoreCardCriterionOrderBy], filter: ScoreCardCriterionExpression): ScoreCardCriterionConnection!
}

"""A connection to a list of items."""
type ScoreCardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoreCardEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type ScoreCardCriterion implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ScoreCard: ScoreCard!
  ScoreCardId: Int!
  CriteriaCriterion: Criterion!
  CriteriaId: Int!
  Order: Float!
}

"""A connection to a list of items."""
type ScoreCardCriterionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoreCardCriterionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ScoreCardCriterionEdge {
  """The item at the end of the edge"""
  node: ScoreCardCriterion

  """A cursor for use in pagination"""
  cursor: String!
}

input ScoreCardCriterionExpression {
  operator: Operator!
  operands: [ScoreCardCriterionOperand]!
}

enum ScoreCardCriterionField {
  id
  Id
  BeidInt
  ScoreCardId
  CriteriaId
  Order
}

input ScoreCardCriterionOperand {
  field: ScoreCardCriterionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScoreCardCriterionExpression
}

input ScoreCardCriterionOrderBy {
  field: ScoreCardCriterionField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type ScoreCardEdge {
  """The item at the end of the edge"""
  node: ScoreCard

  """A cursor for use in pagination"""
  cursor: String!
}

input ScoreCardExpression {
  operator: Operator!
  operands: [ScoreCardOperand]!
}

enum ScoreCardField {
  id
  Id
  BeidInt
  Name
  Description
  IsActive
  IsDefault
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input ScoreCardOperand {
  field: ScoreCardField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ScoreCardExpression
}

input ScoreCardOrderBy {
  field: ScoreCardField
  direction: OrderByDirection = Ascending
}

type Search implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ComponentId: Int
  UidUser: User!
  Uid: ID!
  Name: String!
  DateCreated: DateTime!
  IsGlobal: Boolean
  Beid: ID
  Version: Float
  SearchXml: Xml
  Application: String
  ReportSource: ReportSource
  ReportSourceId: Int
  IsLegacyReport: Boolean!
  Visibility: Int!
  IsPublished: Boolean!
  AppId: Int!
  Description: String
  LastRunDateUtc: DateTime
  LastRunByUidUser: User
  LastRunByUid: ID
  ModifiedDateUtc: DateTime
  ReportFolder: ReportFolder
  ReportFolderId: Int
  ReportSearchOnModules(after: String, first: Int, before: String, last: Int, sort: [ModuleOrderBy], filter: ModuleExpression): ModuleConnection!
  ReportSearchOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
  SSearchOnSearchDetails(after: String, first: Int, before: String, last: Int, sort: [SearchDetailOrderBy], filter: SearchDetailExpression): SearchDetailConnection!
}

"""A connection to a list of items."""
type SearchConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type SearchDatum implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ItemId: Int!
  Component: Component!
  ComponentId: Int!
  Title: String!
  Data: String!
  TagNames: String
  Description: String!
  IsPublic: Boolean
}

"""A connection to a list of items."""
type SearchDatumConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchDatumEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SearchDatumEdge {
  """The item at the end of the edge"""
  node: SearchDatum

  """A cursor for use in pagination"""
  cursor: String!
}

input SearchDatumExpression {
  operator: Operator!
  operands: [SearchDatumOperand]!
}

enum SearchDatumField {
  id
  Id
  BeidInt
  ItemId
  ComponentId
  Title
  Data
  TagNames
  Description
  IsPublic
}

input SearchDatumOperand {
  field: SearchDatumField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SearchDatumExpression
}

input SearchDatumOrderBy {
  field: SearchDatumField
  direction: OrderByDirection = Ascending
}

type SearchDetail implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SSearch: Search!
  Sid: Int!
  FieldName: String
  FieldValue: String
}

"""A connection to a list of items."""
type SearchDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchDetailEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SearchDetailEdge {
  """The item at the end of the edge"""
  node: SearchDetail

  """A cursor for use in pagination"""
  cursor: String!
}

input SearchDetailExpression {
  operator: Operator!
  operands: [SearchDetailOperand]!
}

enum SearchDetailField {
  id
  Id
  Sid
  FieldName
  FieldValue
}

input SearchDetailOperand {
  field: SearchDetailField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SearchDetailExpression
}

input SearchDetailOrderBy {
  field: SearchDetailField
  direction: OrderByDirection = Ascending
}

type SearchDetailsBackup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Sid: Int!
  FieldName: String
  FieldValue: String
}

"""A connection to a list of items."""
type SearchDetailsBackupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchDetailsBackupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SearchDetailsBackupEdge {
  """The item at the end of the edge"""
  node: SearchDetailsBackup

  """A cursor for use in pagination"""
  cursor: String!
}

input SearchDetailsBackupExpression {
  operator: Operator!
  operands: [SearchDetailsBackupOperand]!
}

enum SearchDetailsBackupField {
  id
  Id
  Sid
  FieldName
  FieldValue
}

input SearchDetailsBackupOperand {
  field: SearchDetailsBackupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SearchDetailsBackupExpression
}

input SearchDetailsBackupOrderBy {
  field: SearchDetailsBackupField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type SearchEdge {
  """The item at the end of the edge"""
  node: Search

  """A cursor for use in pagination"""
  cursor: String!
}

input SearchExpression {
  operator: Operator!
  operands: [SearchOperand]!
}

enum SearchField {
  id
  Id
  ComponentId
  Uid
  Name
  DateCreated
  IsGlobal
  Beid
  Version
  SearchXml
  Application
  ReportSourceId
  IsLegacyReport
  Visibility
  IsPublished
  AppId
  Description
  LastRunDateUtc
  LastRunByUid
  ModifiedDateUtc
  ReportFolderId
}

type SearchHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Component: Component
  ComponentId: Int
  SearchPhrase: String!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  UidUser: User!
  Uid: ID!
  NumberOfResults: Int!
  SearchDateUtc: DateTime!
}

"""A connection to a list of items."""
type SearchHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SearchHistoryEdge {
  """The item at the end of the edge"""
  node: SearchHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input SearchHistoryExpression {
  operator: Operator!
  operands: [SearchHistoryOperand]!
}

enum SearchHistoryField {
  id
  Id
  ComponentId
  SearchPhrase
  Beid
  Uid
  NumberOfResults
  SearchDateUtc
}

input SearchHistoryOperand {
  field: SearchHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SearchHistoryExpression
}

input SearchHistoryOrderBy {
  field: SearchHistoryField
  direction: OrderByDirection = Ascending
}

input SearchOperand {
  field: SearchField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SearchExpression
}

input SearchOrderBy {
  field: SearchField
  direction: OrderByDirection = Ascending
}

type SecretKey implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Name: String!
  Value: ID!
}

"""A connection to a list of items."""
type SecretKeyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecretKeyEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SecretKeyEdge {
  """The item at the end of the edge"""
  node: SecretKey

  """A cursor for use in pagination"""
  cursor: String!
}

input SecretKeyExpression {
  operator: Operator!
  operands: [SecretKeyOperand]!
}

enum SecretKeyField {
  id
  Id
  BeidInt
  Name
  Value
}

input SecretKeyOperand {
  field: SecretKeyField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SecretKeyExpression
}

input SecretKeyOrderBy {
  field: SecretKeyField
  direction: OrderByDirection = Ascending
}

type SelfRegistrationMapping implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AuthProvider: AuthProvider
  AuthProviderId: Int
  FirstNameAttribute: String
  LastNameAttribute: String
  NickNameAttribute: String
  EmailAttribute: String
  TitleAttribute: String
  OrganizationAttribute: String
  WorkPhoneAttribute: String
  MobilePhoneAttribute: String
  HomePhoneAttribute: String
  PagerAttribute: String
  FaxAttribute: String
  OtherPhoneAttribute: String
  WorkAddressAttribute: String
  WorkCityAttribute: String
  WorkStateAttribute: String
  WorkZipAttribute: String
  WorkCountryAttribute: String
  OrganizationalIdAttribute: String
  AlternateIdAttribute: String
  AcctDeptNameAttribute: String
}

"""A connection to a list of items."""
type SelfRegistrationMappingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SelfRegistrationMappingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SelfRegistrationMappingEdge {
  """The item at the end of the edge"""
  node: SelfRegistrationMapping

  """A cursor for use in pagination"""
  cursor: String!
}

input SelfRegistrationMappingExpression {
  operator: Operator!
  operands: [SelfRegistrationMappingOperand]!
}

enum SelfRegistrationMappingField {
  id
  Id
  BeidInt
  AuthProviderId
  FirstNameAttribute
  LastNameAttribute
  NickNameAttribute
  EmailAttribute
  TitleAttribute
  OrganizationAttribute
  WorkPhoneAttribute
  MobilePhoneAttribute
  HomePhoneAttribute
  PagerAttribute
  FaxAttribute
  OtherPhoneAttribute
  WorkAddressAttribute
  WorkCityAttribute
  WorkStateAttribute
  WorkZipAttribute
  WorkCountryAttribute
  OrganizationalIdAttribute
  AlternateIdAttribute
  AcctDeptNameAttribute
}

input SelfRegistrationMappingOperand {
  field: SelfRegistrationMappingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SelfRegistrationMappingExpression
}

input SelfRegistrationMappingOrderBy {
  field: SelfRegistrationMappingField
  direction: OrderByDirection = Ascending
}

type Service implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  CategoryServiceCategory: ServiceCategory!
  CategoryId: Int!
  Name: String!
  ShortDescription: String!
  LongDescription: String!
  Order: Float!
  IsActive: Boolean!
  ManagerUid: ID!
  ManagingGroupId: Int!
  RequestTypeOppType: OppType
  RequestTypeId: Int
  Form: Form!
  FormId: Int!
  AllowGroups: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  WorkflowWorkflowsNew: WorkflowsNew
  WorkflowId: Int
  IsPublic: Boolean!
  ShouldNotifyResp: Boolean!
  Url: String
  RequestText: String
  ShouldNotifyRequestor: Boolean!
  InheritPermissions: Boolean!
  ServiceOnServiceFormSettings(after: String, first: Int, before: String, last: Int, sort: [ServiceFormSettingOrderBy], filter: ServiceFormSettingExpression): ServiceFormSettingConnection!
  ServiceOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection!
  ServiceOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection!
  ServiceOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  ServiceOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
}

type ServiceAnnouncement implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Subject: String!
  Description: String
  ServiceDate: DateTime!
  DateExpires: DateTime!
  DateCreated: DateTime!
  DateModified: DateTime!
}

"""A connection to a list of items."""
type ServiceAnnouncementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceAnnouncementEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceAnnouncementEdge {
  """The item at the end of the edge"""
  node: ServiceAnnouncement

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceAnnouncementExpression {
  operator: Operator!
  operands: [ServiceAnnouncementOperand]!
}

enum ServiceAnnouncementField {
  id
  Id
  Subject
  Description
  ServiceDate
  DateExpires
  DateCreated
  DateModified
}

input ServiceAnnouncementOperand {
  field: ServiceAnnouncementField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceAnnouncementExpression
}

input ServiceAnnouncementOrderBy {
  field: ServiceAnnouncementField
  direction: OrderByDirection = Ascending
}

type ServiceCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ParentServiceCategory: ServiceCategory
  ParentId: Int
  Name: String!
  Description: String!
  Order: Float!
  IsActive: Boolean!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  PathNames: String!
  PathIDs: String!
  IsPublic: Boolean!
  IconCharCode: Int
  AllowGroups: Boolean!
  InheritPermissions: Boolean!
  ParentServiceCategoryOnServiceCategories(after: String, first: Int, before: String, last: Int, sort: [ServiceCategoryOrderBy], filter: ServiceCategoryExpression): ServiceCategoryConnection
  CategoryServiceCategoryOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection!
}

"""A connection to a list of items."""
type ServiceCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceCategoryEdge {
  """The item at the end of the edge"""
  node: ServiceCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceCategoryExpression {
  operator: Operator!
  operands: [ServiceCategoryOperand]!
}

enum ServiceCategoryField {
  id
  Id
  Beid
  ParentId
  Name
  Description
  Order
  IsActive
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  PathNames
  PathIDs
  IsPublic
  IconCharCode
  AllowGroups
  InheritPermissions
}

input ServiceCategoryOperand {
  field: ServiceCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceCategoryExpression
}

input ServiceCategoryOrderBy {
  field: ServiceCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type ServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceEdge {
  """The item at the end of the edge"""
  node: Service

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceExpression {
  operator: Operator!
  operands: [ServiceOperand]!
}

enum ServiceField {
  id
  Id
  Beid
  CategoryId
  Name
  ShortDescription
  LongDescription
  Order
  IsActive
  ManagerUid
  ManagingGroupId
  RequestTypeId
  FormId
  AllowGroups
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  WorkflowId
  IsPublic
  ShouldNotifyResp
  Url
  RequestText
  ShouldNotifyRequestor
  InheritPermissions
}

type ServiceFormSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Service: Service!
  ServiceId: Int!
  Form: Form!
  FormId: Int!
  PublicRequestsEnabled: Boolean!
  IdentificationMode: Int!
  AccountClientAcctCode: ClientAcctCode!
  AccountId: Int!
  IncludeRequestorPhoneNumber: Boolean!
  IncludeRequestorCaptcha: Boolean!
}

"""A connection to a list of items."""
type ServiceFormSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceFormSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceFormSettingEdge {
  """The item at the end of the edge"""
  node: ServiceFormSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceFormSettingExpression {
  operator: Operator!
  operands: [ServiceFormSettingOperand]!
}

enum ServiceFormSettingField {
  id
  Id
  BeidInt
  ServiceId
  FormId
  PublicRequestsEnabled
  IdentificationMode
  AccountId
  IncludeRequestorPhoneNumber
  IncludeRequestorCaptcha
}

input ServiceFormSettingOperand {
  field: ServiceFormSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceFormSettingExpression
}

input ServiceFormSettingOrderBy {
  field: ServiceFormSettingField
  direction: OrderByDirection = Ascending
}

type ServiceLevelAgreement implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  IsActive: Boolean!
  ResponseDate: DateTime
  ResolutionDate: DateTime
  ShouldUseOperationalHours: Boolean!
  CreatedDate: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedDate: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
  AppApplication: Application!
  AppId: Int!
  NewSlaServiceLevelAgreementOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  DefaultSlaServiceLevelAgreementOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection!
  SlaServiceLevelAgreementOnSlaHistories(after: String, first: Int, before: String, last: Int, sort: [SlaHistoryOrderBy], filter: SlaHistoryExpression): SlaHistoryConnection!
  SlaServiceLevelAgreementOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  SlaServiceLevelAgreementOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
}

"""A connection to a list of items."""
type ServiceLevelAgreementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceLevelAgreementEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceLevelAgreementEdge {
  """The item at the end of the edge"""
  node: ServiceLevelAgreement

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceLevelAgreementExpression {
  operator: Operator!
  operands: [ServiceLevelAgreementOperand]!
}

enum ServiceLevelAgreementField {
  id
  Id
  Beid
  Name
  Description
  IsActive
  ResponseDate
  ResolutionDate
  ShouldUseOperationalHours
  CreatedDate
  CreatedByUid
  ModifiedDate
  ModifiedByUid
  AppId
}

input ServiceLevelAgreementOperand {
  field: ServiceLevelAgreementField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceLevelAgreementExpression
}

input ServiceLevelAgreementOrderBy {
  field: ServiceLevelAgreementField
  direction: OrderByDirection = Ascending
}

type ServiceLevelAgreementType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeServiceLevelAgreementTypeOnSlaHistories(after: String, first: Int, before: String, last: Int, sort: [SlaHistoryOrderBy], filter: SlaHistoryExpression): SlaHistoryConnection!
}

"""A connection to a list of items."""
type ServiceLevelAgreementTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceLevelAgreementTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ServiceLevelAgreementTypeEdge {
  """The item at the end of the edge"""
  node: ServiceLevelAgreementType

  """A cursor for use in pagination"""
  cursor: String!
}

input ServiceLevelAgreementTypeExpression {
  operator: Operator!
  operands: [ServiceLevelAgreementTypeOperand]!
}

enum ServiceLevelAgreementTypeField {
  id
  Id
  Name
}

input ServiceLevelAgreementTypeOperand {
  field: ServiceLevelAgreementTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceLevelAgreementTypeExpression
}

input ServiceLevelAgreementTypeOrderBy {
  field: ServiceLevelAgreementTypeField
  direction: OrderByDirection = Ascending
}

input ServiceOperand {
  field: ServiceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ServiceExpression
}

input ServiceOrderBy {
  field: ServiceField
  direction: OrderByDirection = Ascending
}

type ShibSpError implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Username: String
  ErrorDate: DateTime
  Logger: String
  Level: String
  Message: String
}

"""A connection to a list of items."""
type ShibSpErrorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShibSpErrorEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ShibSpErrorEdge {
  """The item at the end of the edge"""
  node: ShibSpError

  """A cursor for use in pagination"""
  cursor: String!
}

input ShibSpErrorExpression {
  operator: Operator!
  operands: [ShibSpErrorOperand]!
}

enum ShibSpErrorField {
  id
  Username
  ErrorDate
  Logger
  Level
  Message
}

input ShibSpErrorOperand {
  field: ShibSpErrorField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ShibSpErrorExpression
}

input ShibSpErrorOrderBy {
  field: ShibSpErrorField
  direction: OrderByDirection = Ascending
}

type Shortcut implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  BeidInt: Int!
  TargetId: Int!
  TargetComponentComponent: Component!
  TargetComponentId: Int!
  ParentCategoryId: Int!
  ParentCategoryComponentComponent: Component!
  ParentCategoryComponentId: Int!
  Order: Decimal!
  CreatedDateUtc: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
}

"""A connection to a list of items."""
type ShortcutConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShortcutEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ShortcutEdge {
  """The item at the end of the edge"""
  node: Shortcut

  """A cursor for use in pagination"""
  cursor: String!
}

input ShortcutExpression {
  operator: Operator!
  operands: [ShortcutOperand]!
}

enum ShortcutField {
  id
  Id
  Beid
  BeidInt
  TargetId
  TargetComponentId
  ParentCategoryId
  ParentCategoryComponentId
  Order
  CreatedDateUtc
  CreatedByUid
  ModifiedDateUtc
  ModifiedByUid
}

input ShortcutOperand {
  field: ShortcutField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ShortcutExpression
}

input ShortcutOrderBy {
  field: ShortcutField
  direction: OrderByDirection = Ascending
}

type SlaHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SlaServiceLevelAgreement: ServiceLevelAgreement!
  Slaid: Int!
  Ticket: Ticket!
  TicketId: Int!
  EventDate: DateTime!
  TypeServiceLevelAgreementType: ServiceLevelAgreementType!
  TypeId: Int!
  Passed: Boolean!
  NotifiedDate: DateTime
}

"""A connection to a list of items."""
type SlaHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SlaHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SlaHistoryEdge {
  """The item at the end of the edge"""
  node: SlaHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input SlaHistoryExpression {
  operator: Operator!
  operands: [SlaHistoryOperand]!
}

enum SlaHistoryField {
  id
  Id
  Slaid
  TicketId
  EventDate
  TypeId
  Passed
  NotifiedDate
}

input SlaHistoryOperand {
  field: SlaHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SlaHistoryExpression
}

input SlaHistoryOrderBy {
  field: SlaHistoryField
  direction: OrderByDirection = Ascending
}

type Solution implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ScSolutionCategory: SolutionCategory!
  Scid: Int!
  Subject: String!
  Keywords: String
  StatusSolutionStatus: SolutionStatus!
  StatusId: Int!
  IsRequestorVisible: Boolean!
  CreatedDate: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedDate: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
  Summary: String
  IsPublic: Boolean!
  NotifyOwner: Boolean!
  AllowGroups: Boolean!
  InheritPermissions: Boolean!
  OwnerUidUser: User!
  OwnerUid: ID!
  Order: Float!
  ReviewDate: Date
  SolutionOnSolutionRevisions(after: String, first: Int, before: String, last: Int, sort: [SolutionRevisionOrderBy], filter: SolutionRevisionExpression): SolutionRevisionConnection!
  SolutionOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
}

type SolutionCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  ParCatSolutionCategory: SolutionCategory
  ParCatId: Int
  Name: String!
  Description: String
  CreatedDate: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedDate: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
  Order: Float!
  PathNames: String!
  PathIDs: String!
  IsPublic: Boolean!
  AllowGroups: Boolean!
  IconCharCode: Int
  InheritPermissions: Boolean!
  ParCatSolutionCategoryOnSolutionCategories(after: String, first: Int, before: String, last: Int, sort: [SolutionCategoryOrderBy], filter: SolutionCategoryExpression): SolutionCategoryConnection
  ScSolutionCategoryOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
}

"""A connection to a list of items."""
type SolutionCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SolutionCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SolutionCategoryEdge {
  """The item at the end of the edge"""
  node: SolutionCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input SolutionCategoryExpression {
  operator: Operator!
  operands: [SolutionCategoryOperand]!
}

enum SolutionCategoryField {
  id
  Id
  Beid
  ParCatId
  Name
  Description
  CreatedDate
  CreatedByUid
  ModifiedDate
  ModifiedByUid
  Order
  PathNames
  PathIDs
  IsPublic
  AllowGroups
  IconCharCode
  InheritPermissions
}

input SolutionCategoryOperand {
  field: SolutionCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SolutionCategoryExpression
}

input SolutionCategoryOrderBy {
  field: SolutionCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type SolutionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SolutionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SolutionEdge {
  """The item at the end of the edge"""
  node: Solution

  """A cursor for use in pagination"""
  cursor: String!
}

input SolutionExpression {
  operator: Operator!
  operands: [SolutionOperand]!
}

enum SolutionField {
  id
  Id
  Beid
  Scid
  Subject
  Keywords
  StatusId
  IsRequestorVisible
  CreatedDate
  CreatedByUid
  ModifiedDate
  ModifiedByUid
  Summary
  IsPublic
  NotifyOwner
  AllowGroups
  InheritPermissions
  OwnerUid
  Order
  ReviewDate
}

input SolutionOperand {
  field: SolutionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SolutionExpression
}

input SolutionOrderBy {
  field: SolutionField
  direction: OrderByDirection = Ascending
}

type SolutionRevision implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  BeidInt: Int!
  Solution: Solution!
  SolutionId: Int!
  RevisionNumber: Int!
  Body: String!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  IsCurrent: Boolean!
  IsDraft: Boolean!
  Comments: String
}

"""A connection to a list of items."""
type SolutionRevisionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SolutionRevisionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SolutionRevisionEdge {
  """The item at the end of the edge"""
  node: SolutionRevision

  """A cursor for use in pagination"""
  cursor: String!
}

input SolutionRevisionExpression {
  operator: Operator!
  operands: [SolutionRevisionOperand]!
}

enum SolutionRevisionField {
  id
  Id
  Beid
  BeidInt
  SolutionId
  RevisionNumber
  Body
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  IsCurrent
  IsDraft
  Comments
}

input SolutionRevisionOperand {
  field: SolutionRevisionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SolutionRevisionExpression
}

input SolutionRevisionOrderBy {
  field: SolutionRevisionField
  direction: OrderByDirection = Ascending
}

type SolutionStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Description: String!
  StatusSolutionStatusOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
}

"""A connection to a list of items."""
type SolutionStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SolutionStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SolutionStatusEdge {
  """The item at the end of the edge"""
  node: SolutionStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input SolutionStatusExpression {
  operator: Operator!
  operands: [SolutionStatusOperand]!
}

enum SolutionStatusField {
  id
  Id
  Description
}

input SolutionStatusOperand {
  field: SolutionStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SolutionStatusExpression
}

input SolutionStatusOrderBy {
  field: SolutionStatusField
  direction: OrderByDirection = Ascending
}

type Source implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  IsActive: Boolean!
  CreatedDate: DateTime!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUid: ID!
  SourceOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  SourceOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
}

"""A connection to a list of items."""
type SourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type SourceControlEvent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ProviderSourceControlProvider: SourceControlProvider!
  ProviderId: Int!
  EventTypeSourceControlEventType: SourceControlEventType!
  EventTypeId: Int!
  RepositoryName: String
  RepositoryUrl: String
  Branch: String
  UserEmail: String
  Message: String!
  Url: String!
  CommitId: String!
  CommentId: String
  UserLogin: String
  UserRefUser: User
  UserRefId: Int
  CreatedDateUtc: DateTime!
  RawJson: String
  IsTriaged: Boolean!
  SecretKey: ID
  EventSourceControlEventOnSourceControlWorkItems(after: String, first: Int, before: String, last: Int, sort: [SourceControlWorkItemOrderBy], filter: SourceControlWorkItemExpression): SourceControlWorkItemConnection!
}

"""A connection to a list of items."""
type SourceControlEventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceControlEventEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SourceControlEventEdge {
  """The item at the end of the edge"""
  node: SourceControlEvent

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceControlEventExpression {
  operator: Operator!
  operands: [SourceControlEventOperand]!
}

enum SourceControlEventField {
  id
  Id
  BeidInt
  ProviderId
  EventTypeId
  RepositoryName
  RepositoryUrl
  Branch
  UserEmail
  Message
  Url
  CommitId
  CommentId
  UserLogin
  UserRefId
  CreatedDateUtc
  RawJson
  IsTriaged
  SecretKey
}

input SourceControlEventOperand {
  field: SourceControlEventField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceControlEventExpression
}

input SourceControlEventOrderBy {
  field: SourceControlEventField
  direction: OrderByDirection = Ascending
}

type SourceControlEventType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  EventTypeSourceControlEventTypeOnSourceControlEvents(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventOrderBy], filter: SourceControlEventExpression): SourceControlEventConnection!
}

"""A connection to a list of items."""
type SourceControlEventTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceControlEventTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SourceControlEventTypeEdge {
  """The item at the end of the edge"""
  node: SourceControlEventType

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceControlEventTypeExpression {
  operator: Operator!
  operands: [SourceControlEventTypeOperand]!
}

enum SourceControlEventTypeField {
  id
  Id
  Name
}

input SourceControlEventTypeOperand {
  field: SourceControlEventTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceControlEventTypeExpression
}

input SourceControlEventTypeOrderBy {
  field: SourceControlEventTypeField
  direction: OrderByDirection = Ascending
}

type SourceControlProvider implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  ProviderSourceControlProviderOnSourceControlEvents(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventOrderBy], filter: SourceControlEventExpression): SourceControlEventConnection!
}

"""A connection to a list of items."""
type SourceControlProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceControlProviderEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SourceControlProviderEdge {
  """The item at the end of the edge"""
  node: SourceControlProvider

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceControlProviderExpression {
  operator: Operator!
  operands: [SourceControlProviderOperand]!
}

enum SourceControlProviderField {
  id
  Id
  Name
}

input SourceControlProviderOperand {
  field: SourceControlProviderField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceControlProviderExpression
}

input SourceControlProviderOrderBy {
  field: SourceControlProviderField
  direction: OrderByDirection = Ascending
}

type SourceControlUsername implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  UidUser: User!
  Uid: ID!
  Username: String!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedUidUser: User!
  ModifiedUid: ID!
}

"""A connection to a list of items."""
type SourceControlUsernameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceControlUsernameEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SourceControlUsernameEdge {
  """The item at the end of the edge"""
  node: SourceControlUsername

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceControlUsernameExpression {
  operator: Operator!
  operands: [SourceControlUsernameOperand]!
}

enum SourceControlUsernameField {
  id
  Id
  BeidInt
  Uid
  Username
  CreatedDateUtc
  ModifiedDateUtc
  CreatedUid
  ModifiedUid
}

input SourceControlUsernameOperand {
  field: SourceControlUsernameField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceControlUsernameExpression
}

input SourceControlUsernameOrderBy {
  field: SourceControlUsernameField
  direction: OrderByDirection = Ascending
}

type SourceControlWorkItem implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  EventSourceControlEvent: SourceControlEvent!
  EventId: Int!
  Component: Component!
  ComponentId: Int!
  AppId: Int!
  ProjectId: Int!
  ItemId: Int!
}

"""A connection to a list of items."""
type SourceControlWorkItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SourceControlWorkItemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SourceControlWorkItemEdge {
  """The item at the end of the edge"""
  node: SourceControlWorkItem

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceControlWorkItemExpression {
  operator: Operator!
  operands: [SourceControlWorkItemOperand]!
}

enum SourceControlWorkItemField {
  id
  Id
  BeidInt
  EventId
  ComponentId
  AppId
  ProjectId
  ItemId
}

input SourceControlWorkItemOperand {
  field: SourceControlWorkItemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceControlWorkItemExpression
}

input SourceControlWorkItemOrderBy {
  field: SourceControlWorkItemField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type SourceEdge {
  """The item at the end of the edge"""
  node: Source

  """A cursor for use in pagination"""
  cursor: String!
}

input SourceExpression {
  operator: Operator!
  operands: [SourceOperand]!
}

enum SourceField {
  id
  Id
  Beid
  Name
  Description
  IsActive
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
}

input SourceOperand {
  field: SourceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SourceExpression
}

input SourceOrderBy {
  field: SourceField
  direction: OrderByDirection = Ascending
}

type ssoAttribute implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Value: String!
}

"""A connection to a list of items."""
type ssoAttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ssoAttributeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ssoAttributeEdge {
  """The item at the end of the edge"""
  node: ssoAttribute

  """A cursor for use in pagination"""
  cursor: String!
}

input ssoAttributeExpression {
  operator: Operator!
  operands: [ssoAttributeOperand]!
}

enum ssoAttributeField {
  id
  Id
  Name
  Value
}

input ssoAttributeOperand {
  field: ssoAttributeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ssoAttributeExpression
}

input ssoAttributeOrderBy {
  field: ssoAttributeField
  direction: OrderByDirection = Ascending
}

type SsrsCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  CreatedDate: DateTime!
  ModifiedDate: DateTime!
  CategorySsrsCategoryOnSsrsReportLinks(after: String, first: Int, before: String, last: Int, sort: [SsrsReportLinkOrderBy], filter: SsrsReportLinkExpression): SsrsReportLinkConnection!
}

"""A connection to a list of items."""
type SsrsCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SsrsCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SsrsCategoryEdge {
  """The item at the end of the edge"""
  node: SsrsCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input SsrsCategoryExpression {
  operator: Operator!
  operands: [SsrsCategoryOperand]!
}

enum SsrsCategoryField {
  id
  Id
  Beid
  Name
  CreatedDate
  ModifiedDate
}

input SsrsCategoryOperand {
  field: SsrsCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SsrsCategoryExpression
}

input SsrsCategoryOrderBy {
  field: SsrsCategoryField
  direction: OrderByDirection = Ascending
}

type SsrsReportLink implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  CategorySsrsCategory: SsrsCategory!
  CategoryId: Int!
  Name: String!
  ReportPath: String!
  IsActive: Boolean!
  CreatedDate: DateTime!
  ModifiedDate: DateTime!
}

"""A connection to a list of items."""
type SsrsReportLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SsrsReportLinkEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SsrsReportLinkEdge {
  """The item at the end of the edge"""
  node: SsrsReportLink

  """A cursor for use in pagination"""
  cursor: String!
}

input SsrsReportLinkExpression {
  operator: Operator!
  operands: [SsrsReportLinkOperand]!
}

enum SsrsReportLinkField {
  id
  Id
  Beid
  CategoryId
  Name
  ReportPath
  IsActive
  CreatedDate
  ModifiedDate
}

input SsrsReportLinkOperand {
  field: SsrsReportLinkField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SsrsReportLinkExpression
}

input SsrsReportLinkOrderBy {
  field: SsrsReportLinkField
  direction: OrderByDirection = Ascending
}

type StandardReport implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CatStandardReportCategory: StandardReportCategory!
  CatId: Int!
  Name: String!
  Url: String!
  Order: Float!
  KbArticleId: Int
}

type StandardReportCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Order: Float!
  CatStandardReportCategoryOnStandardReports(after: String, first: Int, before: String, last: Int, sort: [StandardReportOrderBy], filter: StandardReportExpression): StandardReportConnection!
}

"""A connection to a list of items."""
type StandardReportCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StandardReportCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type StandardReportCategoryEdge {
  """The item at the end of the edge"""
  node: StandardReportCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input StandardReportCategoryExpression {
  operator: Operator!
  operands: [StandardReportCategoryOperand]!
}

enum StandardReportCategoryField {
  id
  Id
  Name
  Order
}

input StandardReportCategoryOperand {
  field: StandardReportCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: StandardReportCategoryExpression
}

input StandardReportCategoryOrderBy {
  field: StandardReportCategoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type StandardReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StandardReportEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type StandardReportEdge {
  """The item at the end of the edge"""
  node: StandardReport

  """A cursor for use in pagination"""
  cursor: String!
}

input StandardReportExpression {
  operator: Operator!
  operands: [StandardReportOperand]!
}

enum StandardReportField {
  id
  Id
  CatId
  Name
  Url
  Order
  KbArticleId
}

input StandardReportOperand {
  field: StandardReportField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: StandardReportExpression
}

input StandardReportOrderBy {
  field: StandardReportField
  direction: OrderByDirection = Ascending
}

type State implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Abbr: String!
  Country: String!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type StateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type StateEdge {
  """The item at the end of the edge"""
  node: State

  """A cursor for use in pagination"""
  cursor: String!
}

input StateExpression {
  operator: Operator!
  operands: [StateOperand]!
}

enum StateField {
  id
  Id
  Name
  Abbr
  Country
  DateCreated
}

input StateOperand {
  field: StateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: StateExpression
}

input StateOrderBy {
  field: StateField
  direction: OrderByDirection = Ascending
}

type Status implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  StatusType: StatusType!
  StatusTypeId: Int!
  Name: String!
  Description: String
  AppApplication: Application!
  AppId: Int!
  ComponentId: Int!
  IsDefault: Boolean!
  IsActive: Boolean!
  Order: Int!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  ContainerId: Int
  PctComp: Int
  IssStatusOnIssues(after: String, first: Int, before: String, last: Int, sort: [IssueOrderBy], filter: IssueExpression): IssueConnection
  StatusOnPlanLimits(after: String, first: Int, before: String, last: Int, sort: [PlanLimitOrderBy], filter: PlanLimitExpression): PlanLimitConnection
  StatusOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection!
  StatusOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection
  StatusOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  StatusOnTicketStatuses(after: String, first: Int, before: String, last: Int, sort: [TicketStatusOrderBy], filter: TicketStatusExpression): TicketStatusConnection!
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge"""
  node: Status

  """A cursor for use in pagination"""
  cursor: String!
}

input StatusExpression {
  operator: Operator!
  operands: [StatusOperand]!
}

enum StatusField {
  id
  Id
  BeidInt
  StatusTypeId
  Name
  Description
  AppId
  ComponentId
  IsDefault
  IsActive
  Order
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  ContainerId
  PctComp
}

input StatusOperand {
  field: StatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: StatusExpression
}

input StatusOrderBy {
  field: StatusField
  direction: OrderByDirection = Ascending
}

type StatusType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Order: Float!
  StatusTypeOnStatuses(after: String, first: Int, before: String, last: Int, sort: [StatusOrderBy], filter: StatusExpression): StatusConnection!
}

"""A connection to a list of items."""
type StatusTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type StatusTypeEdge {
  """The item at the end of the edge"""
  node: StatusType

  """A cursor for use in pagination"""
  cursor: String!
}

input StatusTypeExpression {
  operator: Operator!
  operands: [StatusTypeOperand]!
}

enum StatusTypeField {
  id
  Id
  Name
  Order
}

input StatusTypeOperand {
  field: StatusTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: StatusTypeExpression
}

input StatusTypeOrderBy {
  field: StatusTypeField
  direction: OrderByDirection = Ascending
}

type Survey implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  IsActive: Boolean!
  IsPublic: Boolean!
  Order: Float!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDate: DateTime!
  IntroductionMessage: String!
  ClosingMessage: String!
  NotPublicMessage: String!
  InvalidInstanceMessage: String!
  AlreadyTakenMessage: String!
  RequestTicketProfile: Xml
  RequestNotificationSubjectTemplate: String!
  RequestNotificationBodyTemplate: String!
  RequestPercentage: Decimal!
  RequestWaitDays: Int!
  RequestCooldownDays: Int!
  NotifyAsUidUser: User
  NotifyAsUid: ID
  ShowCaptcha: Boolean!
  AppApplication: Application!
  AppId: Int!
  ShouldNotifyManager: Boolean!
  LastResponseDate: DateTime
  SurveyOnSurveyQuestions(after: String, first: Int, before: String, last: Int, sort: [SurveyQuestionOrderBy], filter: SurveyQuestionExpression): SurveyQuestionConnection!
  SurveyOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection!
  SurveyOnSurveyTicketEvaluations(after: String, first: Int, before: String, last: Int, sort: [SurveyTicketEvaluationOrderBy], filter: SurveyTicketEvaluationExpression): SurveyTicketEvaluationConnection!
}

"""A connection to a list of items."""
type SurveyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SurveyEdge {
  """The item at the end of the edge"""
  node: Survey

  """A cursor for use in pagination"""
  cursor: String!
}

input SurveyExpression {
  operator: Operator!
  operands: [SurveyOperand]!
}

enum SurveyField {
  id
  Id
  Beid
  Name
  IsActive
  IsPublic
  Order
  CreatedUid
  CreatedDate
  ModifiedUid
  ModifiedDate
  IntroductionMessage
  ClosingMessage
  NotPublicMessage
  InvalidInstanceMessage
  AlreadyTakenMessage
  RequestTicketProfile
  RequestNotificationSubjectTemplate
  RequestNotificationBodyTemplate
  RequestPercentage
  RequestWaitDays
  RequestCooldownDays
  NotifyAsUid
  ShowCaptcha
  AppId
  ShouldNotifyManager
  LastResponseDate
}

input SurveyOperand {
  field: SurveyField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SurveyExpression
}

input SurveyOrderBy {
  field: SurveyField
  direction: OrderByDirection = Ascending
}

type SurveyQuestion implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Attribute: Attribute!
  AttributeId: Int!
  Survey: Survey!
  SurveyId: Int!
  Order: Float!
  QuestionText: String!
  IsRequired: Boolean!
  ShouldRandomizeChoices: Boolean!
}

"""A connection to a list of items."""
type SurveyQuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyQuestionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SurveyQuestionEdge {
  """The item at the end of the edge"""
  node: SurveyQuestion

  """A cursor for use in pagination"""
  cursor: String!
}

input SurveyQuestionExpression {
  operator: Operator!
  operands: [SurveyQuestionOperand]!
}

enum SurveyQuestionField {
  id
  Id
  AttributeId
  SurveyId
  Order
  QuestionText
  IsRequired
  ShouldRandomizeChoices
}

input SurveyQuestionOperand {
  field: SurveyQuestionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SurveyQuestionExpression
}

input SurveyQuestionOrderBy {
  field: SurveyQuestionField
  direction: OrderByDirection = Ascending
}

type SurveyResponse implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Survey: Survey!
  SurveyId: Int!
  RequestedUidUser: User
  RequestedUid: ID
  RequestedDate: DateTime!
  CompletedDate: DateTime
  CompletedIpAddress: Buffer
  Ticket: Ticket
  TicketId: Int
  ItemTitle: String
  AccountClientAcctCode: ClientAcctCode
  AccountId: Int
  ImpactPriorityFactor: PriorityFactor
  ImpactId: Int
  UrgencyPriorityFactor: PriorityFactor
  UrgencyId: Int
  PriorityPriorityFactor: PriorityFactor
  PriorityId: Int
  ItemTypeOppType: OppType
  ItemTypeId: Int
  ResponsibleUidUser: User
  ResponsibleUid: ID
  ResponsibleGroupId: Int
  ItemCompletedUidUser: User
  ItemCompletedUid: ID
  TicketAge: Int
  Source: Source
  SourceId: Int
  SlaServiceLevelAgreement: ServiceLevelAgreement
  SlaId: Int
  IsSlaViolated: Boolean
  Service: Service!
  ServiceId: Int!
  AppApplication: Application!
  AppId: Int!
  ProjectTeam: Team
  ProjectId: Int
  IsDeleted: Boolean!
}

"""A connection to a list of items."""
type SurveyResponseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyResponseEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SurveyResponseEdge {
  """The item at the end of the edge"""
  node: SurveyResponse

  """A cursor for use in pagination"""
  cursor: String!
}

input SurveyResponseExpression {
  operator: Operator!
  operands: [SurveyResponseOperand]!
}

enum SurveyResponseField {
  id
  Id
  Beid
  SurveyId
  RequestedUid
  RequestedDate
  CompletedDate
  CompletedIpAddress
  TicketId
  ItemTitle
  AccountId
  ImpactId
  UrgencyId
  PriorityId
  ItemTypeId
  ResponsibleUid
  ResponsibleGroupId
  ItemCompletedUid
  TicketAge
  SourceId
  SlaId
  IsSlaViolated
  ServiceId
  AppId
  ProjectId
  IsDeleted
}

input SurveyResponseOperand {
  field: SurveyResponseField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SurveyResponseExpression
}

input SurveyResponseOrderBy {
  field: SurveyResponseField
  direction: OrderByDirection = Ascending
}

type SurveyResponsesReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  AppId: Int!
  AppName: String!
  ResponseId: Int!
  SurveyId: Int!
  SurveyName: String!
  SurveyRequestedDate: DateTime!
  SurveyCompletedDate: DateTime
  SurveyCompletedUid: ID
  SurveyCompletedFullName: String
  SurveyCompletedRefId: Int
  ItemTitle: String
  ItemCreatedUid: ID
  ItemCreatedFullName: String
  TicketId: Int
  TicketTitle: String
  TicketRefCode: String
  HasTicket: Boolean
  ProjectId: Int
  ProjectTitle: String
  HasProject: Boolean
  AccountId: Int
  AccountName: String
  ProjectAccountId: Int
  UrgencyId: Int
  UrgencyName: String
  ImpactId: Int
  ImpactName: String
  PriorityId: Int
  PriorityName: String
  PriorityOrder: Float
  TypeCategoryId: Int
  TypeCategoryName: String
  TypeId: Int
  TypeName: String
  FullTypeName: String
  ProjectTypeId: Int
  ProjectTypeName: String
  FullProjectTypeName: String
  ResponsibleUid: ID
  ResponsibleFullName: String
  ResponsibleGroupId: Int
  ResponsibleGroupName: String
  ItemCompletedUid: ID
  ItemCompletedFullName: String
  TicketAge: Int
  SourceId: Int
  SourceName: String
  Slaid: Int
  SlaName: String
  IsSlaViolated: Boolean
  LocationId: Int
  LocationName: String
  LocationRoomId: Int
  LocationRoomName: String
  ServiceId: Int!
  ServiceName: String!
  ServiceCategoryId: Int!
  ServiceCategoryName: String!
  ProjectManagerUid: ID
  ProjectManagerFullName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerFullName: String
  ProjectSponsorUid: ID
  ProjectSponsorFullName: String
  ProjectClassificationId: Int
  ProjectClassificationName: String
  ProjectStatusId: Int
  ProjectStatusName: String
  ProjectStatusDescription: String
  HealthId: Int
}

"""A connection to a list of items."""
type SurveyResponsesReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyResponsesReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SurveyResponsesReportViewEdge {
  """The item at the end of the edge"""
  node: SurveyResponsesReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input SurveyResponsesReportViewExpression {
  operator: Operator!
  operands: [SurveyResponsesReportViewOperand]!
}

enum SurveyResponsesReportViewField {
  id
  Beid
  AppId
  AppName
  ResponseId
  SurveyId
  SurveyName
  SurveyRequestedDate
  SurveyCompletedDate
  SurveyCompletedUid
  SurveyCompletedFullName
  SurveyCompletedRefId
  ItemTitle
  ItemCreatedUid
  ItemCreatedFullName
  TicketId
  TicketTitle
  TicketRefCode
  HasTicket
  ProjectId
  ProjectTitle
  HasProject
  AccountId
  AccountName
  ProjectAccountId
  UrgencyId
  UrgencyName
  ImpactId
  ImpactName
  PriorityId
  PriorityName
  PriorityOrder
  TypeCategoryId
  TypeCategoryName
  TypeId
  TypeName
  FullTypeName
  ProjectTypeId
  ProjectTypeName
  FullProjectTypeName
  ResponsibleUid
  ResponsibleFullName
  ResponsibleGroupId
  ResponsibleGroupName
  ItemCompletedUid
  ItemCompletedFullName
  TicketAge
  SourceId
  SourceName
  Slaid
  SlaName
  IsSlaViolated
  LocationId
  LocationName
  LocationRoomId
  LocationRoomName
  ServiceId
  ServiceName
  ServiceCategoryId
  ServiceCategoryName
  ProjectManagerUid
  ProjectManagerFullName
  ProjectAltManagerUid
  ProjectAltManagerFullName
  ProjectSponsorUid
  ProjectSponsorFullName
  ProjectClassificationId
  ProjectClassificationName
  ProjectStatusId
  ProjectStatusName
  ProjectStatusDescription
  HealthId
}

input SurveyResponsesReportViewOperand {
  field: SurveyResponsesReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SurveyResponsesReportViewExpression
}

input SurveyResponsesReportViewOrderBy {
  field: SurveyResponsesReportViewField
  direction: OrderByDirection = Ascending
}

type SurveyTicketEvaluation implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Survey: Survey!
  SurveyId: Int!
  Ticket: Ticket!
  TicketId: Int!
}

"""A connection to a list of items."""
type SurveyTicketEvaluationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SurveyTicketEvaluationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SurveyTicketEvaluationEdge {
  """The item at the end of the edge"""
  node: SurveyTicketEvaluation

  """A cursor for use in pagination"""
  cursor: String!
}

input SurveyTicketEvaluationExpression {
  operator: Operator!
  operands: [SurveyTicketEvaluationOperand]!
}

enum SurveyTicketEvaluationField {
  id
  SurveyId
  TicketId
}

input SurveyTicketEvaluationOperand {
  field: SurveyTicketEvaluationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SurveyTicketEvaluationExpression
}

input SurveyTicketEvaluationOrderBy {
  field: SurveyTicketEvaluationField
  direction: OrderByDirection = Ascending
}

type Sysdiagram implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Name: String!
  PrincipalId: Int!
  DiagramId: Int!
  Version: Int
  Definition: Buffer
}

"""A connection to a list of items."""
type SysdiagramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SysdiagramEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SysdiagramEdge {
  """The item at the end of the edge"""
  node: Sysdiagram

  """A cursor for use in pagination"""
  cursor: String!
}

input SysdiagramExpression {
  operator: Operator!
  operands: [SysdiagramOperand]!
}

enum SysdiagramField {
  id
  Name
  PrincipalId
  DiagramId
  Version
  Definition
}

input SysdiagramOperand {
  field: SysdiagramField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SysdiagramExpression
}

input SysdiagramOrderBy {
  field: SysdiagramField
  direction: OrderByDirection = Ascending
}

type System implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String
  DateCreated: DateTime!
  DateModified: DateTime
  CreatedByUidUser: User
  CreatedByUid: ID
  ModifiedByUidUser: User
  ModifiedByUid: ID
  IsActive: Boolean!
  SysSystemOnProjectSystems(after: String, first: Int, before: String, last: Int, sort: [ProjectSystemOrderBy], filter: ProjectSystemExpression): ProjectSystemConnection!
}

"""A connection to a list of items."""
type SystemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SystemEdge {
  """The item at the end of the edge"""
  node: System

  """A cursor for use in pagination"""
  cursor: String!
}

type SystemEventHandler implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  SubscriberComponentComponent: Component!
  SubscriberComponentId: Int!
  SubscriberItemId: Int!
  TargetComponentComponent: Component!
  TargetComponentId: Int!
  TargetItemId: Int!
  SetSystemEventType: SystemEventType!
  Setid: Int!
  HandlerType: String!
  Handler: Xml!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type SystemEventHandlerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemEventHandlerEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SystemEventHandlerEdge {
  """The item at the end of the edge"""
  node: SystemEventHandler

  """A cursor for use in pagination"""
  cursor: String!
}

input SystemEventHandlerExpression {
  operator: Operator!
  operands: [SystemEventHandlerOperand]!
}

enum SystemEventHandlerField {
  id
  Id
  SubscriberComponentId
  SubscriberItemId
  TargetComponentId
  TargetItemId
  Setid
  HandlerType
  Handler
  CreatedDateUtc
}

input SystemEventHandlerOperand {
  field: SystemEventHandlerField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SystemEventHandlerExpression
}

input SystemEventHandlerOrderBy {
  field: SystemEventHandlerField
  direction: OrderByDirection = Ascending
}

type SystemEventType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
  Description: String
  SetSystemEventTypeOnSystemEventHandlers(after: String, first: Int, before: String, last: Int, sort: [SystemEventHandlerOrderBy], filter: SystemEventHandlerExpression): SystemEventHandlerConnection!
}

"""A connection to a list of items."""
type SystemEventTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemEventTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type SystemEventTypeEdge {
  """The item at the end of the edge"""
  node: SystemEventType

  """A cursor for use in pagination"""
  cursor: String!
}

input SystemEventTypeExpression {
  operator: Operator!
  operands: [SystemEventTypeOperand]!
}

enum SystemEventTypeField {
  id
  Id
  Name
  Description
}

input SystemEventTypeOperand {
  field: SystemEventTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SystemEventTypeExpression
}

input SystemEventTypeOrderBy {
  field: SystemEventTypeField
  direction: OrderByDirection = Ascending
}

input SystemExpression {
  operator: Operator!
  operands: [SystemOperand]!
}

enum SystemField {
  id
  Id
  Beid
  Name
  DateCreated
  DateModified
  CreatedByUid
  ModifiedByUid
  IsActive
}

input SystemOperand {
  field: SystemField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: SystemExpression
}

input SystemOrderBy {
  field: SystemField
  direction: OrderByDirection = Ascending
}

type Tag implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  TagOnItemTags(after: String, first: Int, before: String, last: Int, sort: [ItemTagOrderBy], filter: ItemTagExpression): ItemTagConnection!
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge"""
  node: Tag

  """A cursor for use in pagination"""
  cursor: String!
}

input TagExpression {
  operator: Operator!
  operands: [TagOperand]!
}

enum TagField {
  id
  Id
  Beid
  Name
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input TagOperand {
  field: TagField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TagExpression
}

input TagOrderBy {
  field: TagField
  direction: OrderByDirection = Ascending
}

type Task implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ParId: Int
  Uid: ID
  TTeam: Team
  Tid: Int!
  PlanTask: Task
  PlanId: Int!
  PctComp: Int
  TpTaskPriority: TaskPriority
  Tpid: Int
  Order: Int
  Depth: Int
  Title: String
  Desc: String
  StartDate: DateTime
  EndDate: DateTime
  DateCreated: DateTime!
  WorkE: Int
  EstMinutesBaseline: Int
  WorkC: Int
  IsParent: Boolean
  IsMilestone: Boolean!
  DateModified: DateTime
  DateCompleted: DateTime
  Predecessor: Int
  StartDateEst: DateTime
  EndDateEst: DateTime
  StartDateAdj: DateTime
  EndDateAdj: DateTime
  StartDateAct: DateTime
  EndDateAct: DateTime
  Duration: Int
  Field1: String
  Field2: String
  Field3: String
  IsStory: Boolean!
  StoryPoints: Float!
  ValuePoints: Float!
  DurationWorkDays: Int!
  DateCompletedSystem: DateTime
  Field4: String
  Field5: String
  Field6: String
  Field7: String
  Field8: String
  Field9: String
  Field10: String
  Component: Component!
  ComponentId: Int!
  IsPublished: Boolean!
  DatePublished: DateTime
  PublishedUid: ID
  IsCheckedOut: Int
  CheckedOutUid: ID
  CheckedOutDate: DateTime
  CurrentVersion: Int
  CheckedOutAppId: String
  SelectedBaselineIndex: Int
  BaselinedUid: ID
  DateBaselined: DateTime
  Baseline: Boolean
  Wbs: String
  RemainingMinutes: Int!
  RowVersion: Timestamp!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Foreground: String
  Background: String
  Status: Status!
  StatusId: Int!
  PlanType: PlanType
  PlanTypeId: Int
  SubtasksCount: Int!
  SubtasksOpen: Int!
  PlanTaskOnPlanDrafts(after: String, first: Int, before: String, last: Int, sort: [PlanDraftOrderBy], filter: PlanDraftExpression): PlanDraftConnection!
  PlanTaskOnPlanLimits(after: String, first: Int, before: String, last: Int, sort: [PlanLimitOrderBy], filter: PlanLimitExpression): PlanLimitConnection!
  TaskOnTaskAssigneds(after: String, first: Int, before: String, last: Int, sort: [TaskAssignedOrderBy], filter: TaskAssignedExpression): TaskAssignedConnection!
  PredTaskOnTaskRelationships(after: String, first: Int, before: String, last: Int, sort: [TaskRelationshipOrderBy], filter: TaskRelationshipExpression): TaskRelationshipConnection!
  TaskOnTaskRelationships(after: String, first: Int, before: String, last: Int, sort: [TaskRelationshipOrderBy], filter: TaskRelationshipExpression): TaskRelationshipConnection!
  PlanTaskOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection
  TaskOnTasksIssues(after: String, first: Int, before: String, last: Int, sort: [TasksIssueOrderBy], filter: TasksIssueExpression): TasksIssueConnection!
  TaskOnTaskUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TaskUserAlertOrderBy], filter: TaskUserAlertExpression): TaskUserAlertConnection!
  TaskOnTicketTaskConversions(after: String, first: Int, before: String, last: Int, sort: [TicketTaskConversionOrderBy], filter: TicketTaskConversionExpression): TicketTaskConversionConnection!
}

type TaskAssigned implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  Tid: Int!
  Task: Task!
  TaskId: Int!
  DateCreated: DateTime!
  Pct: Float
}

"""A connection to a list of items."""
type TaskAssignedConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskAssignedEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskAssignedEdge {
  """The item at the end of the edge"""
  node: TaskAssigned

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskAssignedExpression {
  operator: Operator!
  operands: [TaskAssignedOperand]!
}

enum TaskAssignedField {
  id
  Id
  Uid
  Tid
  TaskId
  DateCreated
  Pct
}

input TaskAssignedOperand {
  field: TaskAssignedField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskAssignedExpression
}

input TaskAssignedOrderBy {
  field: TaskAssignedField
  direction: OrderByDirection = Ascending
}

type TaskBaseline implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TaskId: Int!
  PlanId: Int!
  TTeam: Team!
  Tid: Int!
  PlanBaselineId: Int!
  PlanBaselineIndex: Int!
  StartDate: DateTime
  EndDate: DateTime
  EstimatedMinutes: Int
  CreatedDate: DateTime
  CreatedUid: ID
  TimeBudgetBaseline: Decimal
  ExpenseBudgetBaseline: Decimal
  BaselineTaskBaselineOnTeams(after: String, first: Int, before: String, last: Int, sort: [TeamOrderBy], filter: TeamExpression): TeamConnection
}

"""A connection to a list of items."""
type TaskBaselineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskBaselineEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskBaselineEdge {
  """The item at the end of the edge"""
  node: TaskBaseline

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskBaselineExpression {
  operator: Operator!
  operands: [TaskBaselineOperand]!
}

enum TaskBaselineField {
  id
  Id
  TaskId
  PlanId
  Tid
  PlanBaselineId
  PlanBaselineIndex
  StartDate
  EndDate
  EstimatedMinutes
  CreatedDate
  CreatedUid
  TimeBudgetBaseline
  ExpenseBudgetBaseline
}

input TaskBaselineOperand {
  field: TaskBaselineField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskBaselineExpression
}

input TaskBaselineOrderBy {
  field: TaskBaselineField
  direction: OrderByDirection = Ascending
}

type TaskColumn implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  TTeam: Team!
  Tid: Int!
  Index: Int!
  HeaderText: String!
}

"""A connection to a list of items."""
type TaskColumnConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskColumnEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskColumnEdge {
  """The item at the end of the edge"""
  node: TaskColumn

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskColumnExpression {
  operator: Operator!
  operands: [TaskColumnOperand]!
}

enum TaskColumnField {
  id
  Id
  Beid
  Tid
  Index
  HeaderText
}

input TaskColumnOperand {
  field: TaskColumnField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskColumnExpression
}

input TaskColumnOrderBy {
  field: TaskColumnField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge"""
  node: Task

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskExpression {
  operator: Operator!
  operands: [TaskOperand]!
}

enum TaskField {
  id
  Id
  ParId
  Uid
  Tid
  PlanId
  PctComp
  Tpid
  Order
  Depth
  Title
  Desc
  StartDate
  EndDate
  DateCreated
  WorkE
  EstMinutesBaseline
  WorkC
  IsParent
  IsMilestone
  DateModified
  DateCompleted
  Predecessor
  StartDateEst
  EndDateEst
  StartDateAdj
  EndDateAdj
  StartDateAct
  EndDateAct
  Duration
  Field1
  Field2
  Field3
  IsStory
  StoryPoints
  ValuePoints
  DurationWorkDays
  DateCompletedSystem
  Field4
  Field5
  Field6
  Field7
  Field8
  Field9
  Field10
  ComponentId
  IsPublished
  DatePublished
  PublishedUid
  IsCheckedOut
  CheckedOutUid
  CheckedOutDate
  CurrentVersion
  CheckedOutAppId
  SelectedBaselineIndex
  BaselinedUid
  DateBaselined
  Baseline
  Wbs
  RemainingMinutes
  RowVersion
  BeidInt
  Foreground
  Background
  StatusId
  PlanTypeId
  SubtasksCount
  SubtasksOpen
}

input TaskOperand {
  field: TaskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskExpression
}

input TaskOrderBy {
  field: TaskField
  direction: OrderByDirection = Ascending
}

type TaskPriority implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Value: String
  DateCreated: DateTime!
  MyWorkPriorityId: Int
  TpTaskPriorityOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection
}

"""A connection to a list of items."""
type TaskPriorityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskPriorityEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskPriorityEdge {
  """The item at the end of the edge"""
  node: TaskPriority

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskPriorityExpression {
  operator: Operator!
  operands: [TaskPriorityOperand]!
}

enum TaskPriorityField {
  id
  Id
  Name
  Value
  DateCreated
  MyWorkPriorityId
}

input TaskPriorityOperand {
  field: TaskPriorityField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskPriorityExpression
}

input TaskPriorityOrderBy {
  field: TaskPriorityField
  direction: OrderByDirection = Ascending
}

type TaskRelationship implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  PredTask: Task!
  PredId: Int!
  Task: Task!
  TaskId: Int!
  TTeam: Team!
  Tid: Int!
  RelationType: Int!
  Lag: Int!
  DateCreated: DateTime!
  PredTid: Int
  PredPlanId: Int
  PlanId: Int
}

"""A connection to a list of items."""
type TaskRelationshipConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskRelationshipEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskRelationshipEdge {
  """The item at the end of the edge"""
  node: TaskRelationship

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskRelationshipExpression {
  operator: Operator!
  operands: [TaskRelationshipOperand]!
}

enum TaskRelationshipField {
  id
  Id
  PredId
  TaskId
  Tid
  RelationType
  Lag
  DateCreated
  PredTid
  PredPlanId
  PlanId
}

input TaskRelationshipOperand {
  field: TaskRelationshipField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskRelationshipExpression
}

input TaskRelationshipOrderBy {
  field: TaskRelationshipField
  direction: OrderByDirection = Ascending
}

type TasksIssue implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Task: Task!
  TaskId: Int!
  IsIssue: Issue!
  IssueId: Int!
}

"""A connection to a list of items."""
type TasksIssueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TasksIssueEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TasksIssueEdge {
  """The item at the end of the edge"""
  node: TasksIssue

  """A cursor for use in pagination"""
  cursor: String!
}

input TasksIssueExpression {
  operator: Operator!
  operands: [TasksIssueOperand]!
}

enum TasksIssueField {
  id
  Id
  TaskId
  IssueId
}

input TasksIssueOperand {
  field: TasksIssueField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TasksIssueExpression
}

input TasksIssueOrderBy {
  field: TasksIssueField
  direction: OrderByDirection = Ascending
}

type TasksReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TaskId: Int!
  TaskTitle: String
  TaskDesc: String
  TaskUid: ID
  UserFullName: String
  TaskParId: Int
  ParentTitle: String
  TaskTid: Int!
  TeamsName: String!
  TaskPlanId: Int!
  PercentComplete: Decimal
  PlanName: String
  TaskOrder: Int
  TaskWbs: String
  TaskStartDate: DateTime
  TaskEndDate: DateTime
  TaskDateCreated: DateTime!
  TaskDateModified: DateTime
  TaskDateCompleted: DateTime
  TaskIsParent: Boolean
  TaskIsMilestone: Boolean!
  TaskIsStory: Boolean!
  TaskStoryPoints: Float!
  TaskValuePoints: Float!
  EstimatedHours: Decimal
  ActualHours: Decimal
  RemainingHours: Decimal
  EstimatedHoursBaseline: Decimal
  Duration: Int!
  TaskField1: String
  TaskField2: String
  TaskField3: String
  TaskField4: String
  TaskField5: String
  TaskField6: String
  TaskField7: String
  TaskField8: String
  TaskField9: String
  TaskField10: String
  TaskStartDateEst: DateTime
  TaskEndDateEst: DateTime
  PriorityId: Int
  IsUnassigned: Boolean
  PriorityName: String!
  TicketId: Int
  TicketAppId: Int
  SubtasksCount: Int!
  SubtasksOpen: Int!
  IsSubtask: Boolean
  Beid: ID!
  BeidInt: Int!
  Active: Boolean!
  StatusId: Int
  TaskStatusId: Int!
  TaskStatusName: String!
  TaskStatusDescription: String
  TeamIsActive: Boolean!
  AccountId: Int
  SponsorName: String
  SponsorEmail: String
  ProjectId: Int!
  ProjectName: String!
  ProjectActive: Boolean!
  ProjectDateCreated: DateTime!
  ProjectStatusId: Int!
  ProjectStatusName: String!
  HealthId: Int!
  ProjectStatusDescription: String
  ProjectDateStatusModified: DateTime
  ProjectTypeId: Int
  ProjectType: String!
  ProjectManagerUid: ID
  ProjectManagerName: String
  ProjectAltManagerUid: ID
  ProjectAltManagerName: String
  ProjectAccountId: Int
  ProjectAccount: String
  ProjectSponsorName: String
  ProjectSponsorEmail: String
  ProjectPriorityId: Int
  ProjectPriorityName: String
  ProjectPriorityOrder: Float
}

"""A connection to a list of items."""
type TasksReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TasksReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TasksReportViewEdge {
  """The item at the end of the edge"""
  node: TasksReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input TasksReportViewExpression {
  operator: Operator!
  operands: [TasksReportViewOperand]!
}

enum TasksReportViewField {
  id
  TaskId
  TaskTitle
  TaskDesc
  TaskUid
  UserFullName
  TaskParId
  ParentTitle
  TaskTid
  TeamsName
  TaskPlanId
  PercentComplete
  PlanName
  TaskOrder
  TaskWbs
  TaskStartDate
  TaskEndDate
  TaskDateCreated
  TaskDateModified
  TaskDateCompleted
  TaskIsParent
  TaskIsMilestone
  TaskIsStory
  TaskStoryPoints
  TaskValuePoints
  EstimatedHours
  ActualHours
  RemainingHours
  EstimatedHoursBaseline
  Duration
  TaskField1
  TaskField2
  TaskField3
  TaskField4
  TaskField5
  TaskField6
  TaskField7
  TaskField8
  TaskField9
  TaskField10
  TaskStartDateEst
  TaskEndDateEst
  PriorityId
  IsUnassigned
  PriorityName
  TicketId
  TicketAppId
  SubtasksCount
  SubtasksOpen
  IsSubtask
  Beid
  BeidInt
  Active
  StatusId
  TaskStatusId
  TaskStatusName
  TaskStatusDescription
  TeamIsActive
  AccountId
  SponsorName
  SponsorEmail
  ProjectId
  ProjectName
  ProjectActive
  ProjectDateCreated
  ProjectStatusId
  ProjectStatusName
  HealthId
  ProjectStatusDescription
  ProjectDateStatusModified
  ProjectTypeId
  ProjectType
  ProjectManagerUid
  ProjectManagerName
  ProjectAltManagerUid
  ProjectAltManagerName
  ProjectAccountId
  ProjectAccount
  ProjectSponsorName
  ProjectSponsorEmail
  ProjectPriorityId
  ProjectPriorityName
  ProjectPriorityOrder
}

input TasksReportViewOperand {
  field: TasksReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TasksReportViewExpression
}

input TasksReportViewOrderBy {
  field: TasksReportViewField
  direction: OrderByDirection = Ascending
}

type TaskUserAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Alert: Alert!
  AlertId: Int!
  Task: Task!
  TaskId: Int!
  Uid: ID!
  Status: Int!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type TaskUserAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskUserAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TaskUserAlertEdge {
  """The item at the end of the edge"""
  node: TaskUserAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input TaskUserAlertExpression {
  operator: Operator!
  operands: [TaskUserAlertOperand]!
}

enum TaskUserAlertField {
  id
  Id
  AlertId
  TaskId
  Uid
  Status
  DateCreated
}

input TaskUserAlertOperand {
  field: TaskUserAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TaskUserAlertExpression
}

input TaskUserAlertOrderBy {
  field: TaskUserAlertField
  direction: OrderByDirection = Ascending
}

type TdInfoDemosReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: ID!
  MarketingSourceId: Int
  MarketingSourceName: String!
  RegisteredDate: DateTime!
  Name: String
  Email: String
  Title: String
  Company: String
  PhoneNumber: String
  DemoCount: Int!
  LastViewDate: DateTime
}

"""A connection to a list of items."""
type TdInfoDemosReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TdInfoDemosReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TdInfoDemosReportViewEdge {
  """The item at the end of the edge"""
  node: TdInfoDemosReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input TdInfoDemosReportViewExpression {
  operator: Operator!
  operands: [TdInfoDemosReportViewOperand]!
}

enum TdInfoDemosReportViewField {
  id
  Id
  MarketingSourceId
  MarketingSourceName
  RegisteredDate
  Name
  Email
  Title
  Company
  PhoneNumber
  DemoCount
  LastViewDate
}

input TdInfoDemosReportViewOperand {
  field: TdInfoDemosReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TdInfoDemosReportViewExpression
}

input TdInfoDemosReportViewOrderBy {
  field: TdInfoDemosReportViewField
  direction: OrderByDirection = Ascending
}

type Team implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Admin: ID
  Name: String!
  TypeId: Int
  Desc: String
  DateCreated: DateTime!
  DateModified: DateTime
  Private: Int!
  AddContact: Boolean
  Active: Boolean!
  IsTemplate: Boolean!
  IsGlobal: Boolean
  Budget: Decimal
  TimeBudget: Decimal
  ExpensesBudget: Decimal
  StartDate: DateTime
  EndDate: DateTime
  ApplyMetrics: Boolean
  ClientCode: Int
  StatusOverall: Int
  StatusComments: String
  DateStatusModified: DateTime
  Deducts: Decimal!
  UpdateStartEnd: Boolean
  ClientContactName: String
  ClientContactEmail: String
  EstHours: Float
  PctComp: Int
  BudgetInitial: Decimal
  TimeBudgetInitial: Decimal
  ExpensesBudgetInitial: Decimal
  StartDateInitial: DateTime
  EndDateInitial: DateTime
  EstHoursInitial: Float
  StartDateBaseline: DateTime
  EndDateBaseline: DateTime
  CreatedByUid: ID
  PriorityId: Int
  InternalTypeInternalType: InternalType
  InternalTypeId: String
  Benefits: String
  Requirements: String
  Status: Status
  StatusId: Int
  PeriodType: Int
  Cost: Decimal
  Income: Decimal
  Npv: Decimal
  Irr: Float
  DiscountRate: Float
  Roi: Float
  PaybackPeriod: Float
  ModifiedByUid: ID
  Periods: Int
  TimeApprovedByReportsToUid: Boolean!
  RefType: String
  RefId: String
  ScheduleHoursByPlan: Boolean!
  CurrentEvaluatorUid: ID
  ClientContactUid: ID
  HoursBaseline: Float
  StatusModifiedByUid: ID
  CategoryId: Int!
  AttributesText: String
  IsAlertOnAssignedHoursExceededOn: Boolean!
  IsAlertOnEstimatedHoursExceededOn: Boolean!
  Admin2: ID
  UseRemainingHours: Boolean!
  Service: Service!
  ServiceId: Int!
  FormId: Int
  TimeBudgetBaseline: Int
  ExpenseBudgetBaseline: Int
  EstMinutesBaseline: Int
  BaselineTaskBaseline: TaskBaseline
  BaselineId: Int
  BaselinedDateUtc: DateTime
  BaselinedUid: ID
  BeidInt: Int!
  HealthHealthChoice: HealthChoice!
  HealthId: Int!
  OnHoldUntil: Date
  ClosedDateUtc: DateTime
  ClosedByUid: ID
  ScoreCardId: Int
  UseMonthlyExpenses: Boolean!
  ProjectTeamOnAttachments(after: String, first: Int, before: String, last: Int, sort: [AttachmentOrderBy], filter: AttachmentExpression): AttachmentConnection
  TTeamOnItemUserPermissions(after: String, first: Int, before: String, last: Int, sort: [ItemUserPermissionOrderBy], filter: ItemUserPermissionExpression): ItemUserPermissionConnection!
  ProjectTeamOnPlanLimits(after: String, first: Int, before: String, last: Int, sort: [PlanLimitOrderBy], filter: PlanLimitExpression): PlanLimitConnection!
  ProjTeamOnProjectBenefits(after: String, first: Int, before: String, last: Int, sort: [ProjectBenefitOrderBy], filter: ProjectBenefitExpression): ProjectBenefitConnection!
  ProjTeamOnProjectCriteria(after: String, first: Int, before: String, last: Int, sort: [ProjectCriterionOrderBy], filter: ProjectCriterionExpression): ProjectCriterionConnection!
  TeamOnProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection!
  ProjTeamOnProjectGoals(after: String, first: Int, before: String, last: Int, sort: [ProjectGoalOrderBy], filter: ProjectGoalExpression): ProjectGoalConnection!
  ProjTeamOnProjectHealthHistories(after: String, first: Int, before: String, last: Int, sort: [ProjectHealthHistoryOrderBy], filter: ProjectHealthHistoryExpression): ProjectHealthHistoryConnection!
  ProjTeamOnProjectProcesses(after: String, first: Int, before: String, last: Int, sort: [ProjectProcessOrderBy], filter: ProjectProcessExpression): ProjectProcessConnection!
  ProjTeamOnProjectRisks(after: String, first: Int, before: String, last: Int, sort: [ProjectRiskOrderBy], filter: ProjectRiskExpression): ProjectRiskConnection!
  ProjTeamOnProjectSectionStatuses(after: String, first: Int, before: String, last: Int, sort: [ProjectSectionStatusOrderBy], filter: ProjectSectionStatusExpression): ProjectSectionStatusConnection!
  TeamOnProjectsExts(after: String, first: Int, before: String, last: Int, sort: [ProjectsExtOrderBy], filter: ProjectsExtExpression): ProjectsExtConnection!
  ProjTeamOnProjectStakeholders(after: String, first: Int, before: String, last: Int, sort: [ProjectStakeholderOrderBy], filter: ProjectStakeholderExpression): ProjectStakeholderConnection!
  ProjTeamOnProjectSystems(after: String, first: Int, before: String, last: Int, sort: [ProjectSystemOrderBy], filter: ProjectSystemExpression): ProjectSystemConnection!
  TeamOnRequestsExts(after: String, first: Int, before: String, last: Int, sort: [RequestsExtOrderBy], filter: RequestsExtExpression): RequestsExtConnection!
  ProjTeamOnResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection!
  ProjectTeamOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  TTeamOnTaskBaselines(after: String, first: Int, before: String, last: Int, sort: [TaskBaselineOrderBy], filter: TaskBaselineExpression): TaskBaselineConnection!
  TTeamOnTaskColumns(after: String, first: Int, before: String, last: Int, sort: [TaskColumnOrderBy], filter: TaskColumnExpression): TaskColumnConnection!
  TTeamOnTaskRelationships(after: String, first: Int, before: String, last: Int, sort: [TaskRelationshipOrderBy], filter: TaskRelationshipExpression): TaskRelationshipConnection!
  TTeamOnTasks(after: String, first: Int, before: String, last: Int, sort: [TaskOrderBy], filter: TaskExpression): TaskConnection
  TeamOnTeamUsers(after: String, first: Int, before: String, last: Int, sort: [TeamUserOrderBy], filter: TeamUserExpression): TeamUserConnection!
  TTeamOnTeamsComponents(after: String, first: Int, before: String, last: Int, sort: [TeamsComponentOrderBy], filter: TeamsComponentExpression): TeamsComponentConnection!
  TeamOnWorkflowStepAssignments(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepAssignmentOrderBy], filter: WorkflowStepAssignmentExpression): WorkflowStepAssignmentConnection
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge"""
  node: Team

  """A cursor for use in pagination"""
  cursor: String!
}

type TeamExpenseAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Tid: Int!
  Eacid: Int!
  Billable: Boolean!
  BudgetInitial: Float
  Budget: Float
  IsActive: Boolean!
  Comments: String
}

"""A connection to a list of items."""
type TeamExpenseAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamExpenseAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamExpenseAcctCodeEdge {
  """The item at the end of the edge"""
  node: TeamExpenseAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamExpenseAcctCodeExpression {
  operator: Operator!
  operands: [TeamExpenseAcctCodeOperand]!
}

enum TeamExpenseAcctCodeField {
  id
  Id
  Tid
  Eacid
  Billable
  BudgetInitial
  Budget
  IsActive
  Comments
}

input TeamExpenseAcctCodeOperand {
  field: TeamExpenseAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamExpenseAcctCodeExpression
}

input TeamExpenseAcctCodeOrderBy {
  field: TeamExpenseAcctCodeField
  direction: OrderByDirection = Ascending
}

input TeamExpression {
  operator: Operator!
  operands: [TeamOperand]!
}

enum TeamField {
  id
  Id
  Beid
  Admin
  Name
  TypeId
  Desc
  DateCreated
  DateModified
  Private
  AddContact
  Active
  IsTemplate
  IsGlobal
  Budget
  TimeBudget
  ExpensesBudget
  StartDate
  EndDate
  ApplyMetrics
  ClientCode
  StatusOverall
  StatusComments
  DateStatusModified
  Deducts
  UpdateStartEnd
  ClientContactName
  ClientContactEmail
  EstHours
  PctComp
  BudgetInitial
  TimeBudgetInitial
  ExpensesBudgetInitial
  StartDateInitial
  EndDateInitial
  EstHoursInitial
  StartDateBaseline
  EndDateBaseline
  CreatedByUid
  PriorityId
  InternalTypeId
  Benefits
  Requirements
  StatusId
  PeriodType
  Cost
  Income
  Npv
  Irr
  DiscountRate
  Roi
  PaybackPeriod
  ModifiedByUid
  Periods
  TimeApprovedByReportsToUid
  RefType
  RefId
  ScheduleHoursByPlan
  CurrentEvaluatorUid
  ClientContactUid
  HoursBaseline
  StatusModifiedByUid
  CategoryId
  AttributesText
  IsAlertOnAssignedHoursExceededOn
  IsAlertOnEstimatedHoursExceededOn
  Admin2
  UseRemainingHours
  ServiceId
  FormId
  TimeBudgetBaseline
  ExpenseBudgetBaseline
  EstMinutesBaseline
  BaselineId
  BaselinedDateUtc
  BaselinedUid
  BeidInt
  HealthId
  OnHoldUntil
  ClosedDateUtc
  ClosedByUid
  ScoreCardId
  UseMonthlyExpenses
}

input TeamOperand {
  field: TeamField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamExpression
}

input TeamOrderBy {
  field: TeamField
  direction: OrderByDirection = Ascending
}

type TeamScheduleDate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Date: DateTime!
  IsWeekDay: Boolean!
  Year: Int!
  Month: Int!
  YearMonth: Int!
  YearMonthWeek: Int!
  DayOfWeek: Int!
  YearMonthName: String!
  YearWeekNormalized: Int!
  YearWeekName: String!
  DateName: String!
  Week: Int!
  YearWeek: Int!
  WeekNormalized: Int!
  YearNormalized: Int!
}

"""A connection to a list of items."""
type TeamScheduleDateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamScheduleDateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamScheduleDateEdge {
  """The item at the end of the edge"""
  node: TeamScheduleDate

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamScheduleDateExpression {
  operator: Operator!
  operands: [TeamScheduleDateOperand]!
}

enum TeamScheduleDateField {
  id
  Date
  IsWeekDay
  Year
  Month
  YearMonth
  YearMonthWeek
  DayOfWeek
  YearMonthName
  YearWeekNormalized
  YearWeekName
  DateName
  Week
  YearWeek
  WeekNormalized
  YearNormalized
}

input TeamScheduleDateOperand {
  field: TeamScheduleDateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamScheduleDateExpression
}

input TeamScheduleDateOrderBy {
  field: TeamScheduleDateField
  direction: OrderByDirection = Ascending
}

type TeamScheduleMonth implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Year: Int!
  Month: Int!
  YearMonth: Int!
}

"""A connection to a list of items."""
type TeamScheduleMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamScheduleMonthEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamScheduleMonthEdge {
  """The item at the end of the edge"""
  node: TeamScheduleMonth

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamScheduleMonthExpression {
  operator: Operator!
  operands: [TeamScheduleMonthOperand]!
}

enum TeamScheduleMonthField {
  id
  Year
  Month
  YearMonth
}

input TeamScheduleMonthOperand {
  field: TeamScheduleMonthField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamScheduleMonthExpression
}

input TeamScheduleMonthOrderBy {
  field: TeamScheduleMonthField
  direction: OrderByDirection = Ascending
}

type TeamsComponent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TTeam: Team!
  Tid: Int!
  TcComponent: Component!
  Tcid: Int!
  IsActive: Boolean!
}

"""A connection to a list of items."""
type TeamsComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamsComponentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamsComponentEdge {
  """The item at the end of the edge"""
  node: TeamsComponent

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamsComponentExpression {
  operator: Operator!
  operands: [TeamsComponentOperand]!
}

enum TeamsComponentField {
  id
  Id
  Tid
  Tcid
  IsActive
}

input TeamsComponentOperand {
  field: TeamsComponentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamsComponentExpression
}

input TeamsComponentOrderBy {
  field: TeamsComponentField
  direction: OrderByDirection = Ascending
}

type TeamUpdateSchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Freq: String!
  Day: Int!
  DateCreated: DateTime!
  DateModified: DateTime!
  MessageSubject: String
  MessageBody: String
  MoveToYellowWorkdayDelay: Int!
  MoveToRedWorkdayDelay: Int!
  IsMoveToYellowEnabled: Boolean!
  IsMoveToRedEnabled: Boolean!
}

"""A connection to a list of items."""
type TeamUpdateScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamUpdateScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamUpdateScheduleEdge {
  """The item at the end of the edge"""
  node: TeamUpdateSchedule

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamUpdateScheduleExpression {
  operator: Operator!
  operands: [TeamUpdateScheduleOperand]!
}

enum TeamUpdateScheduleField {
  id
  Id
  Beid
  Freq
  Day
  DateCreated
  DateModified
  MessageSubject
  MessageBody
  MoveToYellowWorkdayDelay
  MoveToRedWorkdayDelay
  IsMoveToYellowEnabled
  IsMoveToRedEnabled
}

input TeamUpdateScheduleOperand {
  field: TeamUpdateScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamUpdateScheduleExpression
}

input TeamUpdateScheduleOrderBy {
  field: TeamUpdateScheduleField
  direction: OrderByDirection = Ascending
}

type TeamUser implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Team: Team!
  TeamId: Int!
  Guid: ID!
  RoleId: ID
  StartTime: DateTime
  EndTime: DateTime
  PrevEndTime: DateTime
  JoinDate: DateTime
  IsTempUser: Boolean!
  IsActive: Boolean!
  Rate: Decimal
  FunctionalRoleId: Int
  FunctionalRoleIdRequested: Int
  IsProjectResource: Boolean!
  IsRequestResource: Boolean!
}

"""A connection to a list of items."""
type TeamUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamUserEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TeamUserEdge {
  """The item at the end of the edge"""
  node: TeamUser

  """A cursor for use in pagination"""
  cursor: String!
}

input TeamUserExpression {
  operator: Operator!
  operands: [TeamUserOperand]!
}

enum TeamUserField {
  id
  TeamId
  Guid
  RoleId
  StartTime
  EndTime
  PrevEndTime
  JoinDate
  IsTempUser
  IsActive
  Rate
  FunctionalRoleId
  FunctionalRoleIdRequested
  IsProjectResource
  IsRequestResource
}

input TeamUserOperand {
  field: TeamUserField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TeamUserExpression
}

input TeamUserOrderBy {
  field: TeamUserField
  direction: OrderByDirection = Ascending
}

type Ticket implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TeamId: Int
  TypeOppType: OppType!
  TypeId: Int!
  AccountClientAcctCode: ClientAcctCode!
  AccountId: Int!
  Status: Status!
  StatusId: Int!
  Source: Source
  SourceId: Int
  UrgencyPriorityFactor: PriorityFactor
  UrgencyId: Int
  ImpactPriorityFactor: PriorityFactor
  ImpactId: Int
  PriorityPriorityFactor: PriorityFactor!
  PriorityId: Int!
  SlaServiceLevelAgreement: ServiceLevelAgreement
  Slaid: Int
  IsSlaViolated: Boolean!
  Title: String!
  Description: String
  CreatedDate: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  LastModifiedDate: DateTime!
  LastModifiedByUidUser: User!
  LastModifiedByUid: ID!
  EstimatedMinutes: Int!
  EstimatedHours: Decimal
  ActualMinutes: Int!
  ActualHours: Decimal
  IsConvertedToTask: Boolean!
  ContactName: String
  ContactEmail: String
  ContactPhone: String
  ContactUidUser: User
  ContactUid: ID
  StartDate: DateTime
  DueDate: DateTime
  ResponsibleUidUser: User
  ResponsibleUid: ID
  ResponsibleGrpGroup: Group
  ResponsibleGrpId: Int
  RespondedDate: DateTime
  RespondedUidUser: User
  RespondedUid: ID
  RespondByDate: DateTime
  ClosedDate: DateTime
  ClosedByUidUser: User
  ClosedByUid: ID
  ResolveByDate: DateTime
  Solution: Solution
  SolutionId: Int
  TimeBudget: Decimal!
  TimeBudgetUsed: Decimal!
  ExpensesBudget: Decimal!
  ExpensesBudgetUsed: Decimal!
  AttributesText: String
  RefCode: String
  Budget: Decimal!
  BudgetUsed: Decimal!
  IsClosed: Boolean!
  IsUnassigned: Boolean
  ItemUpdates: String
  ParentTicket: Ticket
  ParentId: Int!
  Component: Component!
  ComponentId: Int!
  HasParent: Boolean
  PlacedOnHoldDate: DateTime
  GoesOffHoldDate: DateTime
  IsOnHold: Boolean!
  BeginSlaDate: DateTime
  IsWorkable: Boolean!
  Location: Location!
  LocationId: Int!
  LocationRoom: LocationRoom!
  LocationRoomId: Int!
  CancelledDate: DateTime
  CancelledUidUser: User
  CancelledUid: ID
  Service: Service!
  ServiceId: Int!
  IsTaskDriven: Boolean!
  MetricsVersion: Int!
  SourceApp: String!
  AssignedInitialDate: DateTime
  AssignedLastDate: DateTime
  IsSlaRespondByViolated: Boolean!
  IsSlaResolveByViolated: Boolean!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  ActualBillableMinutes: Int!
  InitialServiceId: Int!
  InitialTypeId: Int
  ChildrenCount: Int!
  AssignedInitialUidUser: User
  AssignedInitialUid: ID
  AssignedInitialGroupId: Int
  AssignedPreviousDate: DateTime
  AssignedPreviousUidUser: User
  AssignedPreviousUid: ID
  AssignedPreviousGroupId: Int
  Form: Form!
  FormId: Int!
  ContactIpAddress: Buffer
  SurveyId: Int!
  SurveyResponseId: Int!

  """The day age of the ticket."""
  DaysOld: Int

  """
  The base component id. Useful for relating Ticket data to AttributeValues.
  """
  ItemComponentId: Int
  ItemTicketOnAttributeValues(after: String, first: Int, before: String, last: Int, sort: [AttributeValueOrderBy], filter: AttributeValueExpression): AttributeValueConnection
  TicketOnConfigurationItemTicketTasks(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketTaskOrderBy], filter: ConfigurationItemTicketTaskExpression): ConfigurationItemTicketTaskConnection!
  ItemTicketOnItemTags(after: String, first: Int, before: String, last: Int, sort: [ItemTagOrderBy], filter: ItemTagExpression): ItemTagConnection
  TicketOnSlaHistories(after: String, first: Int, before: String, last: Int, sort: [SlaHistoryOrderBy], filter: SlaHistoryExpression): SlaHistoryConnection!
  TicketOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  TicketOnSurveyTicketEvaluations(after: String, first: Int, before: String, last: Int, sort: [SurveyTicketEvaluationOrderBy], filter: SurveyTicketEvaluationExpression): SurveyTicketEvaluationConnection!
  TicketOnTicketAssignmentHistories(after: String, first: Int, before: String, last: Int, sort: [TicketAssignmentHistoryOrderBy], filter: TicketAssignmentHistoryExpression): TicketAssignmentHistoryConnection!
  TicketOnTicketCreationScheduleHistories(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleHistoryOrderBy], filter: TicketCreationScheduleHistoryExpression): TicketCreationScheduleHistoryConnection!
  TicketOnTicketExpenseAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TicketExpenseAcctCodeOrderBy], filter: TicketExpenseAcctCodeExpression): TicketExpenseAcctCodeConnection!
  TicketOnTicketMetrics(after: String, first: Int, before: String, last: Int, sort: [TicketMetricOrderBy], filter: TicketMetricExpression): TicketMetricConnection!
  ParentTicketOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  TicketOnTicketTaskConversions(after: String, first: Int, before: String, last: Int, sort: [TicketTaskConversionOrderBy], filter: TicketTaskConversionExpression): TicketTaskConversionConnection!
  TicketOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection!
  TicketOnTicketUserAlerts(after: String, first: Int, before: String, last: Int, sort: [TicketUserAlertOrderBy], filter: TicketUserAlertExpression): TicketUserAlertConnection!
}

type TicketApplicationSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  AppApplication: Application!
  AppId: Int!
  TimeZone: TimeZone!
  TimeZoneId: Int!
  OperationalStartTime: Time!
  OperationalEndTime: Time!
  NotifyResponsibleOfAssignment: Boolean!
  NotifyRequestorOfNew: Boolean!
  IsCommentDefaultPrivate: Boolean!
  EnableUpdateAsOffHold: Boolean!
  EnableUpdateAsNewTicket: Boolean!
  CreateNewFromUpdateAfterDays: Int!
  CanRequestorsViewRequests: Boolean!
  CanAssociatedAccountsViewRequests: Boolean!
  CanContactsViewRequests: Boolean!
  ShouldAutomaticallyAddContacts: Boolean!
}

"""A connection to a list of items."""
type TicketApplicationSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketApplicationSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketApplicationSettingEdge {
  """The item at the end of the edge"""
  node: TicketApplicationSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketApplicationSettingExpression {
  operator: Operator!
  operands: [TicketApplicationSettingOperand]!
}

enum TicketApplicationSettingField {
  id
  AppId
  TimeZoneId
  OperationalStartTime
  OperationalEndTime
  NotifyResponsibleOfAssignment
  NotifyRequestorOfNew
  IsCommentDefaultPrivate
  EnableUpdateAsOffHold
  EnableUpdateAsNewTicket
  CreateNewFromUpdateAfterDays
  CanRequestorsViewRequests
  CanAssociatedAccountsViewRequests
  CanContactsViewRequests
  ShouldAutomaticallyAddContacts
}

input TicketApplicationSettingOperand {
  field: TicketApplicationSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketApplicationSettingExpression
}

input TicketApplicationSettingOrderBy {
  field: TicketApplicationSettingField
  direction: OrderByDirection = Ascending
}

type TicketArchiveProfile implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  Name: String!
  Description: String
  IsActive: Boolean!
  DaysToArchiveAfter: Int!
  ConditionXml: Xml
  ConditionSql: String
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
}

"""A connection to a list of items."""
type TicketArchiveProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketArchiveProfileEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketArchiveProfileEdge {
  """The item at the end of the edge"""
  node: TicketArchiveProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketArchiveProfileExpression {
  operator: Operator!
  operands: [TicketArchiveProfileOperand]!
}

enum TicketArchiveProfileField {
  id
  Id
  BeidInt
  AppId
  Name
  Description
  IsActive
  DaysToArchiveAfter
  ConditionXml
  ConditionSql
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input TicketArchiveProfileOperand {
  field: TicketArchiveProfileField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketArchiveProfileExpression
}

input TicketArchiveProfileOrderBy {
  field: TicketArchiveProfileField
  direction: OrderByDirection = Ascending
}

type TicketAssignmentHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Ticket: Ticket!
  TicketId: Int!
  TaskTicketTask: TicketTask
  TaskId: Int
  ResponsibleUserUser: User!
  ResponsibleUserId: ID!
  ResponsibleGroupId: Int!
  AssignedDate: DateTime!
  AssigninUser: User!
  AssigningUid: ID!
}

"""A connection to a list of items."""
type TicketAssignmentHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketAssignmentHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketAssignmentHistoryEdge {
  """The item at the end of the edge"""
  node: TicketAssignmentHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketAssignmentHistoryExpression {
  operator: Operator!
  operands: [TicketAssignmentHistoryOperand]!
}

enum TicketAssignmentHistoryField {
  id
  Id
  TicketId
  TaskId
  ResponsibleUserId
  ResponsibleGroupId
  AssignedDate
  AssigningUid
}

input TicketAssignmentHistoryOperand {
  field: TicketAssignmentHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketAssignmentHistoryExpression
}

input TicketAssignmentHistoryOrderBy {
  field: TicketAssignmentHistoryField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type TicketConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type TicketContact implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ContactUidUser: User!
  ContactUid: ID!
  TicketId: Int!
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
}

"""A connection to a list of items."""
type TicketContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketContactEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketContactEdge {
  """The item at the end of the edge"""
  node: TicketContact

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketContactExpression {
  operator: Operator!
  operands: [TicketContactOperand]!
}

enum TicketContactField {
  id
  Id
  ContactUid
  TicketId
  CreatedDate
  CreatedUid
}

input TicketContactOperand {
  field: TicketContactField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketContactExpression
}

input TicketContactOrderBy {
  field: TicketContactField
  direction: OrderByDirection = Ascending
}

type TicketCreationProfile implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AccountClientAcctCode: ClientAcctCode
  AccountId: Int
  ApplicationId: Int
  ContainingFieldEmailField: EmailField
  ContainingFieldId: Int
  Contains: String
  CreatedDateUtc: DateTime
  CreatedUid: ID
  EmailMonitor: EmailMonitor
  EmailMonitorId: Int
  EnableNewRequestorCreation: Boolean
  ImpactId: Int
  ModifiedDateUtc: DateTime
  ModifiedUid: ID
  Name: String
  NotifyRequestor: Boolean
  NotifyResponsibleUser: Boolean
  Order: Int
  PriorityId: Int
  Service: Service
  ServiceId: Int
  StatusId: Int
  SourceId: Int
  TicketTypeOppType: OppType
  TicketTypeId: Int
  UrgencyId: Int
  ResponsibleUidUser: User
  ResponsibleUid: ID
  ResponsibleGrpGroup: Group
  ResponsibleGrpId: Int
  CmpntComponent: Component
  Cmpntid: Int
  DueDateOffset: Int
  Form: Form
  FormId: Int
}

"""A connection to a list of items."""
type TicketCreationProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketCreationProfileEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketCreationProfileEdge {
  """The item at the end of the edge"""
  node: TicketCreationProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketCreationProfileExpression {
  operator: Operator!
  operands: [TicketCreationProfileOperand]!
}

enum TicketCreationProfileField {
  id
  Id
  AccountId
  ApplicationId
  ContainingFieldId
  Contains
  CreatedDateUtc
  CreatedUid
  EmailMonitorId
  EnableNewRequestorCreation
  ImpactId
  ModifiedDateUtc
  ModifiedUid
  Name
  NotifyRequestor
  NotifyResponsibleUser
  Order
  PriorityId
  ServiceId
  StatusId
  SourceId
  TicketTypeId
  UrgencyId
  ResponsibleUid
  ResponsibleGrpId
  Cmpntid
  DueDateOffset
  FormId
}

input TicketCreationProfileOperand {
  field: TicketCreationProfileField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketCreationProfileExpression
}

input TicketCreationProfileOrderBy {
  field: TicketCreationProfileField
  direction: OrderByDirection = Ascending
}

type TicketCreationSchedule implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  TemplateTicketTemplate: TicketTemplate!
  TemplateId: Int!
  IntervalReportDeliveryInterval: ReportDeliveryInterval!
  IntervalId: Int!
  IntervalParam: Int
  IntervalTime: String!
  IsActive: Boolean!
  NextAttemptDateUtc: DateTime
  LastAttemptDateUtc: DateTime
  RequestorUidUser: User!
  RequestorUid: ID!
  NotifyRequestor: Boolean!
  AccountClientAcctCode: ClientAcctCode!
  AccountId: Int!
  StartDateOffset: Int
  EndDateOffset: Int
  ResponsibleUidUser: User!
  ResponsibleUid: ID!
  ResponsibleGroupGroup: Group!
  ResponsibleGroupId: Int!
  NotifyResponsible: Boolean!
  ConfigurationItem: ConfigurationItem
  ConfigurationItemId: Int
  ScheduleTicketCreationScheduleOnTicketCreationScheduleHistories(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleHistoryOrderBy], filter: TicketCreationScheduleHistoryExpression): TicketCreationScheduleHistoryConnection!
}

"""A connection to a list of items."""
type TicketCreationScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketCreationScheduleEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketCreationScheduleEdge {
  """The item at the end of the edge"""
  node: TicketCreationSchedule

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketCreationScheduleExpression {
  operator: Operator!
  operands: [TicketCreationScheduleOperand]!
}

enum TicketCreationScheduleField {
  id
  Id
  Beid
  Name
  CreatedUid
  CreatedDateUtc
  TemplateId
  IntervalId
  IntervalParam
  IntervalTime
  IsActive
  NextAttemptDateUtc
  LastAttemptDateUtc
  RequestorUid
  NotifyRequestor
  AccountId
  StartDateOffset
  EndDateOffset
  ResponsibleUid
  ResponsibleGroupId
  NotifyResponsible
  ConfigurationItemId
}

type TicketCreationScheduleHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Ticket: Ticket!
  TicketId: Int!
  ScheduleTicketCreationSchedule: TicketCreationSchedule!
  ScheduleId: Int!
  CreatedDateUtc: DateTime!
  CreatedForUidUser: User!
  CreatedForUid: ID!
}

"""A connection to a list of items."""
type TicketCreationScheduleHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketCreationScheduleHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketCreationScheduleHistoryEdge {
  """The item at the end of the edge"""
  node: TicketCreationScheduleHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketCreationScheduleHistoryExpression {
  operator: Operator!
  operands: [TicketCreationScheduleHistoryOperand]!
}

enum TicketCreationScheduleHistoryField {
  id
  Id
  TicketId
  ScheduleId
  CreatedDateUtc
  CreatedForUid
}

input TicketCreationScheduleHistoryOperand {
  field: TicketCreationScheduleHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketCreationScheduleHistoryExpression
}

input TicketCreationScheduleHistoryOrderBy {
  field: TicketCreationScheduleHistoryField
  direction: OrderByDirection = Ascending
}

input TicketCreationScheduleOperand {
  field: TicketCreationScheduleField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketCreationScheduleExpression
}

input TicketCreationScheduleOrderBy {
  field: TicketCreationScheduleField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type TicketEdge {
  """The item at the end of the edge"""
  node: Ticket

  """A cursor for use in pagination"""
  cursor: String!
}

type TicketExpenseAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Ticket: Ticket!
  TicketId: Int!
  EacExpenseAcctCode: ExpenseAcctCode!
  Eacid: Int!
  Billable: Boolean!
  BudgetInitial: Float
  Budget: Float
  IsActive: Boolean!
  Comments: String
}

"""A connection to a list of items."""
type TicketExpenseAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketExpenseAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketExpenseAcctCodeEdge {
  """The item at the end of the edge"""
  node: TicketExpenseAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketExpenseAcctCodeExpression {
  operator: Operator!
  operands: [TicketExpenseAcctCodeOperand]!
}

enum TicketExpenseAcctCodeField {
  id
  Id
  TicketId
  Eacid
  Billable
  BudgetInitial
  Budget
  IsActive
  Comments
}

input TicketExpenseAcctCodeOperand {
  field: TicketExpenseAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketExpenseAcctCodeExpression
}

input TicketExpenseAcctCodeOrderBy {
  field: TicketExpenseAcctCodeField
  direction: OrderByDirection = Ascending
}

input TicketExpression {
  operator: Operator!
  operands: [TicketOperand]!
}

enum TicketField {
  id
  Id
  TeamId
  TypeId
  AccountId
  StatusId
  SourceId
  UrgencyId
  ImpactId
  PriorityId
  Slaid
  IsSlaViolated
  Title
  Description
  CreatedDate
  CreatedByUid
  LastModifiedDate
  LastModifiedByUid
  EstimatedMinutes
  EstimatedHours
  ActualMinutes
  ActualHours
  IsConvertedToTask
  ContactName
  ContactEmail
  ContactPhone
  ContactUid
  StartDate
  DueDate
  ResponsibleUid
  ResponsibleGrpId
  RespondedDate
  RespondedUid
  RespondByDate
  ClosedDate
  ClosedByUid
  ResolveByDate
  SolutionId
  TimeBudget
  TimeBudgetUsed
  ExpensesBudget
  ExpensesBudgetUsed
  AttributesText
  RefCode
  Budget
  BudgetUsed
  IsClosed
  IsUnassigned
  ItemUpdates
  ParentId
  ComponentId
  HasParent
  PlacedOnHoldDate
  GoesOffHoldDate
  IsOnHold
  BeginSlaDate
  IsWorkable
  LocationId
  LocationRoomId
  CancelledDate
  CancelledUid
  ServiceId
  IsTaskDriven
  MetricsVersion
  SourceApp
  AssignedInitialDate
  AssignedLastDate
  IsSlaRespondByViolated
  IsSlaResolveByViolated
  BeidInt
  AppId
  ActualBillableMinutes
  InitialServiceId
  InitialTypeId
  ChildrenCount
  AssignedInitialUid
  AssignedInitialGroupId
  AssignedPreviousDate
  AssignedPreviousUid
  AssignedPreviousGroupId
  FormId
  ContactIpAddress
  SurveyId
  SurveyResponseId
  DaysOld
  ItemComponentId
}

type TicketMetric implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Ticket: Ticket!
  TicketId: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  CreateToRespondAbsolute: Decimal
  CreateToRespondOperational: Decimal
  CreateToResolveAbsolute: Decimal
  CreateToResolveOperational: Decimal
  CreateToInitialAssignAbsolute: Decimal
  CreateToInitialAssignOperational: Decimal
  CreateToLastAssignAbsolute: Decimal
  CreateToLastAssignOperational: Decimal
  InitialAssignToRespondAbsolute: Decimal
  InitialAssignToRespondOperational: Decimal
  InitialAssignToResolveAbsolute: Decimal
  InitialAssignToResolveOperational: Decimal
  LastAssignToRespondAbsolute: Decimal
  LastAssignToRespondOperational: Decimal
  LastAssignToResolveAbsolute: Decimal
  LastAssignToResolveOperational: Decimal
  RespondToResolveAbsolute: Decimal
  RespondToResolveOperational: Decimal
  RespondToRespondByAbsolute: Decimal
  RespondToRespondByOperational: Decimal
  ResolveToResolveByAbsolute: Decimal
  ResolveToResolveByOperational: Decimal
}

"""A connection to a list of items."""
type TicketMetricConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketMetricEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketMetricEdge {
  """The item at the end of the edge"""
  node: TicketMetric

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketMetricExpression {
  operator: Operator!
  operands: [TicketMetricOperand]!
}

enum TicketMetricField {
  id
  TicketId
  Beid
  CreateToRespondAbsolute
  CreateToRespondOperational
  CreateToResolveAbsolute
  CreateToResolveOperational
  CreateToInitialAssignAbsolute
  CreateToInitialAssignOperational
  CreateToLastAssignAbsolute
  CreateToLastAssignOperational
  InitialAssignToRespondAbsolute
  InitialAssignToRespondOperational
  InitialAssignToResolveAbsolute
  InitialAssignToResolveOperational
  LastAssignToRespondAbsolute
  LastAssignToRespondOperational
  LastAssignToResolveAbsolute
  LastAssignToResolveOperational
  RespondToResolveAbsolute
  RespondToResolveOperational
  RespondToRespondByAbsolute
  RespondToRespondByOperational
  ResolveToResolveByAbsolute
  ResolveToResolveByOperational
}

input TicketMetricOperand {
  field: TicketMetricField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketMetricExpression
}

input TicketMetricOrderBy {
  field: TicketMetricField
  direction: OrderByDirection = Ascending
}

input TicketOperand {
  field: TicketField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketExpression
}

input TicketOrderBy {
  field: TicketField
  direction: OrderByDirection = Ascending
}

type TicketsArchive implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TeamId: Int
  TypeId: Int!
  AccountId: Int!
  StatusId: Int!
  SourceId: Int
  UrgencyId: Int
  ImpactId: Int
  PriorityId: Int!
  Slaid: Int
  IsSlaViolated: Boolean!
  Title: String!
  Description: String
  CreatedDate: DateTime!
  CreatedByUid: ID!
  LastModifiedDate: DateTime!
  LastModifiedByUid: ID!
  EstimatedMinutes: Int!
  EstimatedHours: Float!
  ActualMinutes: Int!
  ActualHours: Float!
  IsConvertedToTask: Boolean!
  ContactName: String
  ContactEmail: String
  ContactPhone: String
  ContactUid: ID
  StartDate: DateTime
  DueDate: DateTime
  ResponsibleUid: ID
  ResponsibleGrpId: Int
  RespondedDate: DateTime
  RespondedUid: ID
  RespondByDate: DateTime
  ClosedDate: DateTime
  ClosedByUid: ID
  ResolveByDate: DateTime
  SolutionId: Int
  TimeBudget: Decimal!
  TimeBudgetUsed: Decimal!
  ExpensesBudget: Decimal!
  ExpensesBudgetUsed: Decimal!
  AttributesText: String
  RefCode: String
  Budget: Decimal!
  BudgetUsed: Decimal!
  IsClosed: Boolean!
  IsUnassigned: Boolean!
  ItemUpdates: String
  ParentId: Int!
  ComponentId: Int!
  HasParent: Boolean!
  PlacedOnHoldDate: DateTime
  GoesOffHoldDate: DateTime
  IsOnHold: Boolean!
  BeginSlaDate: DateTime
  IsWorkable: Boolean!
  LocationId: Int!
  LocationRoomId: Int!
  CancelledDate: DateTime
  CancelledUid: ID
  ServiceId: Int!
  IsTaskDriven: Boolean!
  MetricsVersion: Int!
  SourceApp: String!
  AssignedInitialDate: DateTime
  AssignedLastDate: DateTime
  IsSlaRespondByViolated: Boolean!
  IsSlaResolveByViolated: Boolean!
  BeidInt: Int!
  AppId: Int!
  InitialServiceId: Int!
  InitialTypeId: Int
  ChildrenCount: Int!
  AssignedInitialUid: ID
  AssignedInitialGroupId: Int
  AssignedPreviousDate: DateTime
  AssignedPreviousUid: ID
  AssignedPreviousGroupId: Int
  ActualBillableMinutes: Int
  FormId: Int!
  ContactIpAddress: Buffer
  SurveyId: Int!
  SurveyResponseId: Int!
}

"""A connection to a list of items."""
type TicketsArchiveConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketsArchiveEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketsArchiveEdge {
  """The item at the end of the edge"""
  node: TicketsArchive

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketsArchiveExpression {
  operator: Operator!
  operands: [TicketsArchiveOperand]!
}

enum TicketsArchiveField {
  id
  Id
  TeamId
  TypeId
  AccountId
  StatusId
  SourceId
  UrgencyId
  ImpactId
  PriorityId
  Slaid
  IsSlaViolated
  Title
  Description
  CreatedDate
  CreatedByUid
  LastModifiedDate
  LastModifiedByUid
  EstimatedMinutes
  EstimatedHours
  ActualMinutes
  ActualHours
  IsConvertedToTask
  ContactName
  ContactEmail
  ContactPhone
  ContactUid
  StartDate
  DueDate
  ResponsibleUid
  ResponsibleGrpId
  RespondedDate
  RespondedUid
  RespondByDate
  ClosedDate
  ClosedByUid
  ResolveByDate
  SolutionId
  TimeBudget
  TimeBudgetUsed
  ExpensesBudget
  ExpensesBudgetUsed
  AttributesText
  RefCode
  Budget
  BudgetUsed
  IsClosed
  IsUnassigned
  ItemUpdates
  ParentId
  ComponentId
  HasParent
  PlacedOnHoldDate
  GoesOffHoldDate
  IsOnHold
  BeginSlaDate
  IsWorkable
  LocationId
  LocationRoomId
  CancelledDate
  CancelledUid
  ServiceId
  IsTaskDriven
  MetricsVersion
  SourceApp
  AssignedInitialDate
  AssignedLastDate
  IsSlaRespondByViolated
  IsSlaResolveByViolated
  BeidInt
  AppId
  InitialServiceId
  InitialTypeId
  ChildrenCount
  AssignedInitialUid
  AssignedInitialGroupId
  AssignedPreviousDate
  AssignedPreviousUid
  AssignedPreviousGroupId
  ActualBillableMinutes
  FormId
  ContactIpAddress
  SurveyId
  SurveyResponseId
}

input TicketsArchiveOperand {
  field: TicketsArchiveField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketsArchiveExpression
}

input TicketsArchiveOrderBy {
  field: TicketsArchiveField
  direction: OrderByDirection = Ascending
}

type TicketStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  IsNotStartedTaskStatus: Boolean!
  IsStartedTaskStatus: Boolean!
  IsFinalTaskStatus: Boolean!
  IsRequestSelfClosedStatus: Boolean!
  IsRequestReopenedStatus: Boolean!
  RequireGoesOffHold: Boolean!
  Status: Status!
  Id: Int!
}

"""A connection to a list of items."""
type TicketStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketStatusEdge {
  """The item at the end of the edge"""
  node: TicketStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketStatusExpression {
  operator: Operator!
  operands: [TicketStatusOperand]!
}

enum TicketStatusField {
  id
  IsNotStartedTaskStatus
  IsStartedTaskStatus
  IsFinalTaskStatus
  IsRequestSelfClosedStatus
  IsRequestReopenedStatus
  RequireGoesOffHold
  Id
}

type TicketStatusHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TicketId: Int!
  StatusIdOld: Int!
  StatusIdNew: Int!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  CreatedDate: DateTime!
  IsOnHold: Boolean!
}

"""A connection to a list of items."""
type TicketStatusHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketStatusHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketStatusHistoryEdge {
  """The item at the end of the edge"""
  node: TicketStatusHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketStatusHistoryExpression {
  operator: Operator!
  operands: [TicketStatusHistoryOperand]!
}

enum TicketStatusHistoryField {
  id
  Id
  TicketId
  StatusIdOld
  StatusIdNew
  CreatedByUid
  CreatedDate
  IsOnHold
}

input TicketStatusHistoryOperand {
  field: TicketStatusHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketStatusHistoryExpression
}

input TicketStatusHistoryOrderBy {
  field: TicketStatusHistoryField
  direction: OrderByDirection = Ascending
}

input TicketStatusOperand {
  field: TicketStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketStatusExpression
}

input TicketStatusOrderBy {
  field: TicketStatusField
  direction: OrderByDirection = Ascending
}

type TicketsView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  TicketId: Int!
  Beid: ID!
  BeidInt: Int!
  AppId: Int!
  AppName: String!
  FormId: Int!
  FormName: String!
  HasParent: Boolean
  ParentId: Int!
  ParentTitle: String
  ChildrenCount: Int!
  ParentTypeId: Int
  ParentComponentId: Int
  ParentFormId: Int
  ParentFormName: String
  ParentClassificationId: Int
  ParentClassificationName: String
  ParentUrgencyId: Int
  ParentImpactId: Int
  ParentStatusId: Int
  TypeCategoryId: Int!
  TypeCategoryName: String!
  TypeId: Int!
  TypeName: String!
  FullTypeName: String!
  InitialTypeId: Int
  InitialTypeName: String
  AccountId: Int!
  AccountName: String
  AccountCode: String
  AccountManagerUid: ID!
  AccountManagerFullName: String
  StatusId: Int!
  StatusName: String!
  StatusType: Int!
  StatusTypeName: String!
  SourceId: Int
  SourceName: String
  UrgencyId: Int
  UrgencyName: String
  ImpactId: Int
  ImpactName: String
  PriorityId: Int!
  PriorityName: String!
  PriorityOrder: Float!
  Slaid: Int
  SlaName: String
  IsSlaViolated: Boolean!
  IsSlaRespondByViolated: Boolean!
  IsSlaResolveByViolated: Boolean!
  RespondByDate: DateTime
  ResolveByDate: DateTime
  Title: String!
  Description: String
  CreatedDate: DateTime!
  CreatedByUid: ID!
  CreatedByFullName: String
  CreatedByEmail: String!
  LastModifiedDate: DateTime!
  LastModifiedByUid: ID!
  LastModifiedByFullName: String
  EstimatedMinutes: Int!
  EstimatedHours: Decimal
  ActualMinutes: Int!
  ActualHours: Decimal
  ActualBillableMinutes: Int!
  ActualBillableHours: Decimal
  IsConvertedToTask: Boolean!
  ContactUid: ID
  CustomerName: String
  ContactName: String
  ContactEmail: String
  ContactPhone: String
  ContactOrganization: String
  ContactOrganizationalId: String
  ContactRefId: Int
  StartDate: DateTime
  DueDate: DateTime
  DaysOld: Int
  IsUnassigned: Boolean
  ResponsibleUid: ID
  ResponsibleFullName: String!
  ResponsibleAlertEmail: String
  ResponsibleGroupId: Int
  ResponsibleGroupName: String
  IsGroupUnassigned: Boolean
  RespondedDate: DateTime
  RespondedUid: ID
  RespondedFullName: String
  IsClosed: Boolean!
  ClosedDate: DateTime
  ClosedUid: ID
  ClosedByFullName: String
  IsCancelled: Boolean
  CancelledDate: DateTime
  CancelledUid: ID
  ReviewerUid: ID
  ReviewerFullName: String!
  ReviewerEmail: String
  KbArticleId: Int
  KbArticleSubject: String
  ReviewingGroupId: Int!
  ReviewingGroupName: String!
  Budget: Decimal!
  BudgetUsed: Decimal!
  TimeBudget: Decimal!
  TimeBudgetUsed: Decimal!
  ExpensesBudget: Decimal!
  ExpensesBudgetUsed: Decimal!
  TaskId: Int
  ConvertedToTaskDate: DateTime
  ConvertedToTaskUid: ID
  ConvertedToTaskFullName: String
  TaskPlanId: Int
  TaskPlanName: String
  TaskTitle: String
  TaskStartDate: DateTime
  TaskEndDate: DateTime
  TaskPercentComplete: Int
  TaskProjectId: Int
  TaskProjectName: String
  AttributesText: String
  RefCode: String
  ComponentId: Int!
  ClassificationName: String!
  ClassificationId: Int!
  IsOnHold: Boolean
  PlacedOnHoldDate: DateTime
  GoesOffHoldDate: DateTime
  LocationId: Int!
  LocationName: String!
  LocationRoomId: Int!
  LocationRoomName: String!
  LocationLatitude: Decimal
  LocationLongitude: Decimal
  IndustryId: Int
  IndustryName: String
  ServiceId: Int!
  ServiceName: String!
  ServiceManagerUid: ID!
  ServiceManagerFullName: String
  ServiceCategoryId: Int!
  ServiceCategoryName: String!
  InitialServiceId: Int!
  InitialServiceName: String
  AssignedInitialDate: DateTime
  AssignedInitialUid: ID
  AssignedInitialFullName: String
  AssignedInitialGroupId: Int
  AssignedInitialGroupName: String
  AssignedPreviousDate: DateTime
  AssignedPreviousUid: ID
  AssignedPreviousFullName: String
  AssignedPreviousGroupId: Int
  AssignedPreviousGroupName: String
  AssignedLastDate: DateTime
  MetCreateToRespondAbsolute: Decimal
  MetCreateToRespondOperational: Decimal
  MetCreateToResolveAbsolute: Decimal
  MetCreateToResolveOperational: Decimal
  MetCreateToInitialAssignAbsolute: Decimal
  MetCreateToInitialAssignOperational: Decimal
  MetCreateToLastAssignAbsolute: Decimal
  MetCreateToLastAssignOperational: Decimal
  MetInitialAssignToRespondAbsolute: Decimal
  MetInitialAssignToRespondOperational: Decimal
  MetInitialAssignToResolveAbsolute: Decimal
  MetInitialAssignToResolveOperational: Decimal
  MetLastAssignToRespondAbsolute: Decimal
  MetLastAssignToRespondOperational: Decimal
  MetLastAssignToResolveAbsolute: Decimal
  MetLastAssignToResolveOperational: Decimal
  MetRespondToResolveAbsolute: Decimal
  MetRespondToResolveOperational: Decimal
  MetRespondToRespondByAbsolute: Decimal
  MetRespondToRespondByOperational: Decimal
  MetResolveToResolveByAbsolute: Decimal
  MetResolveToResolveByOperational: Decimal
  WorkflowId: Int
  WorkflowName: String
  WorkflowIsComplete: Boolean
  OriginalWorkflowId: Int
}

"""A connection to a list of items."""
type TicketsViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketsViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketsViewEdge {
  """The item at the end of the edge"""
  node: TicketsView

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketsViewExpression {
  operator: Operator!
  operands: [TicketsViewOperand]!
}

enum TicketsViewField {
  id
  TicketId
  Beid
  BeidInt
  AppId
  AppName
  FormId
  FormName
  HasParent
  ParentId
  ParentTitle
  ChildrenCount
  ParentTypeId
  ParentComponentId
  ParentFormId
  ParentFormName
  ParentClassificationId
  ParentClassificationName
  ParentUrgencyId
  ParentImpactId
  ParentStatusId
  TypeCategoryId
  TypeCategoryName
  TypeId
  TypeName
  FullTypeName
  InitialTypeId
  InitialTypeName
  AccountId
  AccountName
  AccountCode
  AccountManagerUid
  AccountManagerFullName
  StatusId
  StatusName
  StatusType
  StatusTypeName
  SourceId
  SourceName
  UrgencyId
  UrgencyName
  ImpactId
  ImpactName
  PriorityId
  PriorityName
  PriorityOrder
  Slaid
  SlaName
  IsSlaViolated
  IsSlaRespondByViolated
  IsSlaResolveByViolated
  RespondByDate
  ResolveByDate
  Title
  Description
  CreatedDate
  CreatedByUid
  CreatedByFullName
  CreatedByEmail
  LastModifiedDate
  LastModifiedByUid
  LastModifiedByFullName
  EstimatedMinutes
  EstimatedHours
  ActualMinutes
  ActualHours
  ActualBillableMinutes
  ActualBillableHours
  IsConvertedToTask
  ContactUid
  CustomerName
  ContactName
  ContactEmail
  ContactPhone
  ContactOrganization
  ContactOrganizationalId
  ContactRefId
  StartDate
  DueDate
  DaysOld
  IsUnassigned
  ResponsibleUid
  ResponsibleFullName
  ResponsibleAlertEmail
  ResponsibleGroupId
  ResponsibleGroupName
  IsGroupUnassigned
  RespondedDate
  RespondedUid
  RespondedFullName
  IsClosed
  ClosedDate
  ClosedUid
  ClosedByFullName
  IsCancelled
  CancelledDate
  CancelledUid
  ReviewerUid
  ReviewerFullName
  ReviewerEmail
  KbArticleId
  KbArticleSubject
  ReviewingGroupId
  ReviewingGroupName
  Budget
  BudgetUsed
  TimeBudget
  TimeBudgetUsed
  ExpensesBudget
  ExpensesBudgetUsed
  TaskId
  ConvertedToTaskDate
  ConvertedToTaskUid
  ConvertedToTaskFullName
  TaskPlanId
  TaskPlanName
  TaskTitle
  TaskStartDate
  TaskEndDate
  TaskPercentComplete
  TaskProjectId
  TaskProjectName
  AttributesText
  RefCode
  ComponentId
  ClassificationName
  ClassificationId
  IsOnHold
  PlacedOnHoldDate
  GoesOffHoldDate
  LocationId
  LocationName
  LocationRoomId
  LocationRoomName
  LocationLatitude
  LocationLongitude
  IndustryId
  IndustryName
  ServiceId
  ServiceName
  ServiceManagerUid
  ServiceManagerFullName
  ServiceCategoryId
  ServiceCategoryName
  InitialServiceId
  InitialServiceName
  AssignedInitialDate
  AssignedInitialUid
  AssignedInitialFullName
  AssignedInitialGroupId
  AssignedInitialGroupName
  AssignedPreviousDate
  AssignedPreviousUid
  AssignedPreviousFullName
  AssignedPreviousGroupId
  AssignedPreviousGroupName
  AssignedLastDate
  MetCreateToRespondAbsolute
  MetCreateToRespondOperational
  MetCreateToResolveAbsolute
  MetCreateToResolveOperational
  MetCreateToInitialAssignAbsolute
  MetCreateToInitialAssignOperational
  MetCreateToLastAssignAbsolute
  MetCreateToLastAssignOperational
  MetInitialAssignToRespondAbsolute
  MetInitialAssignToRespondOperational
  MetInitialAssignToResolveAbsolute
  MetInitialAssignToResolveOperational
  MetLastAssignToRespondAbsolute
  MetLastAssignToRespondOperational
  MetLastAssignToResolveAbsolute
  MetLastAssignToResolveOperational
  MetRespondToResolveAbsolute
  MetRespondToResolveOperational
  MetRespondToRespondByAbsolute
  MetRespondToRespondByOperational
  MetResolveToResolveByAbsolute
  MetResolveToResolveByOperational
  WorkflowId
  WorkflowName
  WorkflowIsComplete
  OriginalWorkflowId
}

input TicketsViewOperand {
  field: TicketsViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketsViewExpression
}

input TicketsViewOrderBy {
  field: TicketsViewField
  direction: OrderByDirection = Ascending
}

type TicketTask implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  Ticket: Ticket!
  TicketId: Int!
  PctComp: Int!
  Order: Int!
  Title: String!
  Description: String
  StartDate: DateTime
  EndDate: DateTime
  CreatedDate: DateTime!
  EstimatedMinutes: Int!
  ModifiedDate: DateTime!
  CompletedDate: DateTime
  DurationMinutes: Int
  ResponsibleUidUser: User
  ResponsibleUid: ID
  ResponsibleGroupGroup: Group
  ResponsibleGroupId: Int
  PredecessorTicketTask: TicketTask
  PredecessorId: Int
  TypeTaskTypesTask: TypesTask
  TypeTaskId: Int
  IsActive: Boolean!
  CompletedByUidUser: User
  CompletedByUid: ID
  ModifiedByUidUser: User
  ModifiedByUid: ID
  DurationWorkDays: Int!
  TypeTicketTaskType: TicketTaskType!
  TypeId: Int!
  DetectedConflictCount: Int!
  DetectedConflictTypes: Int!
  ConflictScanDateUtc: DateTime
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ActualMinutes: Int!
  TicketTaskOnConfigurationItemTicketTasks(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketTaskOrderBy], filter: ConfigurationItemTicketTaskExpression): ConfigurationItemTicketTaskConnection!
  TaskTicketTaskOnTicketAssignmentHistories(after: String, first: Int, before: String, last: Int, sort: [TicketAssignmentHistoryOrderBy], filter: TicketAssignmentHistoryExpression): TicketAssignmentHistoryConnection
  PredecessorTicketTaskOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
}

"""A connection to a list of items."""
type TicketTaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTaskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type TicketTaskConversion implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Task: Task!
  TaskId: Int!
  Ticket: Ticket!
  TicketId: Int!
  DateCreated: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  TicketAppApplication: Application!
  TicketAppId: Int!
}

"""A connection to a list of items."""
type TicketTaskConversionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTaskConversionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTaskConversionEdge {
  """The item at the end of the edge"""
  node: TicketTaskConversion

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTaskConversionExpression {
  operator: Operator!
  operands: [TicketTaskConversionOperand]!
}

enum TicketTaskConversionField {
  id
  Id
  TaskId
  TicketId
  DateCreated
  CreatedByUid
  TicketAppId
}

input TicketTaskConversionOperand {
  field: TicketTaskConversionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTaskConversionExpression
}

input TicketTaskConversionOrderBy {
  field: TicketTaskConversionField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type TicketTaskEdge {
  """The item at the end of the edge"""
  node: TicketTask

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTaskExpression {
  operator: Operator!
  operands: [TicketTaskOperand]!
}

enum TicketTaskField {
  id
  Id
  CreatedByUid
  TicketId
  PctComp
  Order
  Title
  Description
  StartDate
  EndDate
  CreatedDate
  EstimatedMinutes
  ModifiedDate
  CompletedDate
  DurationMinutes
  ResponsibleUid
  ResponsibleGroupId
  PredecessorId
  TypeTaskId
  IsActive
  CompletedByUid
  ModifiedByUid
  DurationWorkDays
  TypeId
  DetectedConflictCount
  DetectedConflictTypes
  ConflictScanDateUtc
  BeidInt
  ActualMinutes
}

input TicketTaskOperand {
  field: TicketTaskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTaskExpression
}

input TicketTaskOrderBy {
  field: TicketTaskField
  direction: OrderByDirection = Ascending
}

type TicketTasksArchive implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CreatedByUid: ID!
  TicketId: Int!
  PctComp: Int!
  Order: Int!
  Title: String!
  Description: String
  StartDate: DateTime
  EndDate: DateTime
  CreatedDate: DateTime!
  EstimatedMinutes: Int!
  ModifiedDate: DateTime!
  CompletedDate: DateTime
  DurationMinutes: Int
  ResponsibleUid: ID
  ResponsibleGroupId: Int
  PredecessorId: Int
  TypeTaskId: Int
  IsActive: Boolean!
  CompletedByUid: ID
  ModifiedByUid: ID
  DurationWorkDays: Int!
  TypeId: Int!
  DetectedConflictCount: Int!
  DetectedConflictTypes: Int!
  ConflictScanDateUtc: DateTime
  BeidInt: Int!
  ActualMinutes: Int!
}

"""A connection to a list of items."""
type TicketTasksArchiveConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTasksArchiveEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTasksArchiveEdge {
  """The item at the end of the edge"""
  node: TicketTasksArchive

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTasksArchiveExpression {
  operator: Operator!
  operands: [TicketTasksArchiveOperand]!
}

enum TicketTasksArchiveField {
  id
  Id
  CreatedByUid
  TicketId
  PctComp
  Order
  Title
  Description
  StartDate
  EndDate
  CreatedDate
  EstimatedMinutes
  ModifiedDate
  CompletedDate
  DurationMinutes
  ResponsibleUid
  ResponsibleGroupId
  PredecessorId
  TypeTaskId
  IsActive
  CompletedByUid
  ModifiedByUid
  DurationWorkDays
  TypeId
  DetectedConflictCount
  DetectedConflictTypes
  ConflictScanDateUtc
  BeidInt
  ActualMinutes
}

input TicketTasksArchiveOperand {
  field: TicketTasksArchiveField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTasksArchiveExpression
}

input TicketTasksArchiveOrderBy {
  field: TicketTasksArchiveField
  direction: OrderByDirection = Ascending
}

type TicketTasksReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  BeidInt: Int!
  AppId: Int!
  AppName: String!
  CreatedByUid: ID!
  TicketId: Int!
  PercentComplete: Decimal
  Title: String!
  Description: String
  StartDate: DateTime
  DueDate: DateTime
  CreatedDate: DateTime!
  EstimatedHours: Decimal
  ModifiedDate: DateTime!
  CompletedDate: DateTime
  ResponsibleUid: ID
  ResponsibleGroupId: Int
  PredecessorId: Int
  Active: Boolean!
  CompletedByUid: ID
  ModifiedByUid: ID
  DurationWorkDays: Int!
  Unassigned: Boolean
  CreatedByFullName: String
  ModifiedByFullName: String
  ResponsibleFullName: String
  CompletedByFullName: String
  ResponsibleGroupName: String
  GroupUnassigned: Boolean
  TicketTitle: String!
  TicketResponsibleUid: ID
  TicketResponsibleName: String
  TicketResponsibleGrpId: Int
  TicketResponsibleGrpName: String
  TicketStatusId: Int!
  TicketPriorityId: Int!
  TicketAccountId: Int!
  TicketAccountName: String
  TicketSlaid: Int
  TicketSlaViolated: Boolean!
  TicketSlaName: String
  TicketServiceId: Int!
  TicketServiceName: String
  TicketFormId: Int!
  TicketFormName: String!
  TicketOnHold: Boolean
  TicketPriorityName: String
  TicketPriorityOrder: Float
  TicketStatusName: String!
  TicketStatusType: Int!
  TicketStatusTypeName: String!
  PredecessorTitle: String
  TicketTypeId: Int!
  TicketTypeName: String!
  TicketTypeCategoryId: Int!
  TicketTypeCategoryName: String!
  TicketContactUid: ID
  TicketContactName: String
  TicketContactRefId: Int
  TypeId: Int!
  TypeName: String!
  HasDetectedConflicts: Boolean
  DetectedConflictCount: Int!
  DetectedConflictTypes: Int!
  DetectedConflictsLastScannedUtc: DateTime
  AccruedHours: Decimal
}

"""A connection to a list of items."""
type TicketTasksReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTasksReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTasksReportViewEdge {
  """The item at the end of the edge"""
  node: TicketTasksReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTasksReportViewExpression {
  operator: Operator!
  operands: [TicketTasksReportViewOperand]!
}

enum TicketTasksReportViewField {
  id
  Id
  Beid
  BeidInt
  AppId
  AppName
  CreatedByUid
  TicketId
  PercentComplete
  Title
  Description
  StartDate
  DueDate
  CreatedDate
  EstimatedHours
  ModifiedDate
  CompletedDate
  ResponsibleUid
  ResponsibleGroupId
  PredecessorId
  Active
  CompletedByUid
  ModifiedByUid
  DurationWorkDays
  Unassigned
  CreatedByFullName
  ModifiedByFullName
  ResponsibleFullName
  CompletedByFullName
  ResponsibleGroupName
  GroupUnassigned
  TicketTitle
  TicketResponsibleUid
  TicketResponsibleName
  TicketResponsibleGrpId
  TicketResponsibleGrpName
  TicketStatusId
  TicketPriorityId
  TicketAccountId
  TicketAccountName
  TicketSlaid
  TicketSlaViolated
  TicketSlaName
  TicketServiceId
  TicketServiceName
  TicketFormId
  TicketFormName
  TicketOnHold
  TicketPriorityName
  TicketPriorityOrder
  TicketStatusName
  TicketStatusType
  TicketStatusTypeName
  PredecessorTitle
  TicketTypeId
  TicketTypeName
  TicketTypeCategoryId
  TicketTypeCategoryName
  TicketContactUid
  TicketContactName
  TicketContactRefId
  TypeId
  TypeName
  HasDetectedConflicts
  DetectedConflictCount
  DetectedConflictTypes
  DetectedConflictsLastScannedUtc
  AccruedHours
}

input TicketTasksReportViewOperand {
  field: TicketTasksReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTasksReportViewExpression
}

input TicketTasksReportViewOrderBy {
  field: TicketTasksReportViewField
  direction: OrderByDirection = Ascending
}

type TicketTaskTemplate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  Description: String
  IsActive: Boolean!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  CreatedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDate: DateTime!
  AppApplication: Application!
  AppId: Int!
  NewTaskTemplateTicketTaskTemplateOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  TaskTemplateTicketTaskTemplateOnTicketTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTemplateOrderBy], filter: TicketTemplateExpression): TicketTemplateConnection!
  TemplateTicketTaskTemplateOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection!
}

"""A connection to a list of items."""
type TicketTaskTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTaskTemplateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTaskTemplateEdge {
  """The item at the end of the edge"""
  node: TicketTaskTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTaskTemplateExpression {
  operator: Operator!
  operands: [TicketTaskTemplateOperand]!
}

enum TicketTaskTemplateField {
  id
  Id
  Beid
  Name
  Description
  IsActive
  CreatedByUid
  CreatedDate
  ModifiedUid
  ModifiedDate
  AppId
}

input TicketTaskTemplateOperand {
  field: TicketTaskTemplateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTaskTemplateExpression
}

input TicketTaskTemplateOrderBy {
  field: TicketTaskTemplateField
  direction: OrderByDirection = Ascending
}

type TicketTaskType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Component: Component!
  ComponentId: Int!
  TypeTicketTaskTypeOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection!
}

"""A connection to a list of items."""
type TicketTaskTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTaskTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTaskTypeEdge {
  """The item at the end of the edge"""
  node: TicketTaskType

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTaskTypeExpression {
  operator: Operator!
  operands: [TicketTaskTypeOperand]!
}

enum TicketTaskTypeField {
  id
  Id
  Name
  ComponentId
}

input TicketTaskTypeOperand {
  field: TicketTaskTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTaskTypeExpression
}

input TicketTaskTypeOrderBy {
  field: TicketTaskTypeField
  direction: OrderByDirection = Ascending
}

type TicketTemplate implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  Description: String
  CreatedByUidUser: User!
  CreatedByUid: ID!
  CreatedDate: DateTime!
  IsGlobal: Boolean!
  TicketId: Int!
  TaskTemplateTicketTaskTemplate: TicketTaskTemplate!
  TaskTemplateId: Int!
  StartDateOffset: Int
  EndDateOffset: Int
  IsCreatorResp: Boolean!
  ClassificationComponent: Component!
  ClassificationId: Int!
  AppApplication: Application!
  AppId: Int!
  TemplateTicketTemplateOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
}

"""A connection to a list of items."""
type TicketTemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketTemplateEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketTemplateEdge {
  """The item at the end of the edge"""
  node: TicketTemplate

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketTemplateExpression {
  operator: Operator!
  operands: [TicketTemplateOperand]!
}

enum TicketTemplateField {
  id
  Id
  Beid
  Name
  Description
  CreatedByUid
  CreatedDate
  IsGlobal
  TicketId
  TaskTemplateId
  StartDateOffset
  EndDateOffset
  IsCreatorResp
  ClassificationId
  AppId
}

input TicketTemplateOperand {
  field: TicketTemplateField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketTemplateExpression
}

input TicketTemplateOrderBy {
  field: TicketTemplateField
  direction: OrderByDirection = Ascending
}

type TicketUserAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AlertId: Int!
  Status: Int!
  DateCreated: DateTime!
  Ticket: Ticket!
  TicketId: Int!
  ResourceId: Int!
  ResourceComponentComponent: Component!
  ResourceComponentId: Int!
  BeidInt: Int
}

"""A connection to a list of items."""
type TicketUserAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TicketUserAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TicketUserAlertEdge {
  """The item at the end of the edge"""
  node: TicketUserAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input TicketUserAlertExpression {
  operator: Operator!
  operands: [TicketUserAlertOperand]!
}

enum TicketUserAlertField {
  id
  Id
  AlertId
  Status
  DateCreated
  TicketId
  ResourceId
  ResourceComponentId
  BeidInt
}

input TicketUserAlertOperand {
  field: TicketUserAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TicketUserAlertExpression
}

input TicketUserAlertOrderBy {
  field: TicketUserAlertField
  direction: OrderByDirection = Ascending
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format
outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Time

type TimeAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  AcctCode: String!
  Desc: String!
  DateCreated: DateTime!
  DateModified: DateTime!
  Billable: Boolean!
  GlAcct: String
  Capitalize: Boolean!
  IsLimited: Boolean!
  DefaultLimitAmount: Int
  TimeOffAcct: Boolean!
  IsActive: Boolean!
  ShouldAddTimeOffSchedules: Boolean!
  HelpText: String
  TacTimeAcctCodeOnItemTimeAccounts(after: String, first: Int, before: String, last: Int, sort: [ItemTimeAccountOrderBy], filter: ItemTimeAccountExpression): ItemTimeAccountConnection!
  TacTimeAcctCodeOnTimeAcctCodeLimits(after: String, first: Int, before: String, last: Int, sort: [TimeAcctCodeLimitOrderBy], filter: TimeAcctCodeLimitExpression): TimeAcctCodeLimitConnection!
  TacTimeAcctCodeOnTypesTimeAcctCodes(after: String, first: Int, before: String, last: Int, sort: [TypesTimeAcctCodeOrderBy], filter: TypesTimeAcctCodeExpression): TypesTimeAcctCodeConnection!
}

"""A connection to a list of items."""
type TimeAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeAcctCodeEdge {
  """The item at the end of the edge"""
  node: TimeAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeAcctCodeExpression {
  operator: Operator!
  operands: [TimeAcctCodeOperand]!
}

enum TimeAcctCodeField {
  id
  Id
  Beid
  AcctCode
  Desc
  DateCreated
  DateModified
  Billable
  GlAcct
  Capitalize
  IsLimited
  DefaultLimitAmount
  TimeOffAcct
  IsActive
  ShouldAddTimeOffSchedules
  HelpText
}

type TimeAcctCodeLimit implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TacTimeAcctCode: TimeAcctCode!
  Tacid: Int!
  UidUser: User!
  Uid: ID!
  Minutes: Int!
  DailyMinutes: Float!
  StartDate: DateTime!
  EndDate: DateTime!
  Comments: String
}

"""A connection to a list of items."""
type TimeAcctCodeLimitConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeAcctCodeLimitEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeAcctCodeLimitEdge {
  """The item at the end of the edge"""
  node: TimeAcctCodeLimit

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeAcctCodeLimitExpression {
  operator: Operator!
  operands: [TimeAcctCodeLimitOperand]!
}

enum TimeAcctCodeLimitField {
  id
  Id
  Tacid
  Uid
  Minutes
  DailyMinutes
  StartDate
  EndDate
  Comments
}

input TimeAcctCodeLimitOperand {
  field: TimeAcctCodeLimitField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeAcctCodeLimitExpression
}

input TimeAcctCodeLimitOrderBy {
  field: TimeAcctCodeLimitField
  direction: OrderByDirection = Ascending
}

input TimeAcctCodeOperand {
  field: TimeAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeAcctCodeExpression
}

input TimeAcctCodeOrderBy {
  field: TimeAcctCodeField
  direction: OrderByDirection = Ascending
}

type TimeAndExpenseEntry implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  ItemType: String!
  AppId: Int!
  AppName: String
  ItemItemType: Int!
  ItemItemTitle: String
  ItemUid: ID!
  ItemUserFullName: String
  TimeId: Int
  ExpenseId: Int
  Description: String
  AccountName: String
  AccountCode: String
  AccountId: Int!
  ProjectId: Int!
  ProjectName: String!
  ProjectInternalTypeId: String
  BillableHours: Decimal
  NonBillableHours: Decimal
  TotalHours: Decimal
  Beid: ID
  BillRate: Decimal
  CostRate: Decimal
  BillableAmount: Decimal
  NonBillableAmount: Decimal
  ReimbursableAmount: Decimal
  CostAmount: Decimal
  TotalAmount: Decimal
  HaveReceipt: Boolean
  StatusId: Int!
  StatusName: String!
  StatusUid: ID
  StatusDate: DateTime
  StatusUserFullName: String
  InvoiceHeaderId: String
  InvoiceNumber: Int
  ClientAccountId: Int
  ClientAccount: String
  ClientAccountCode: String
  ItemDate: DateTime
  ReportDate: DateTime!
  FilterDate: DateTime
  ResourcePoolName: String
  ResourcePoolId: Int
  ServiceId: Int!
}

"""A connection to a list of items."""
type TimeAndExpenseEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeAndExpenseEntryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeAndExpenseEntryEdge {
  """The item at the end of the edge"""
  node: TimeAndExpenseEntry

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeAndExpenseEntryExpression {
  operator: Operator!
  operands: [TimeAndExpenseEntryOperand]!
}

enum TimeAndExpenseEntryField {
  id
  ItemType
  AppId
  AppName
  ItemItemType
  ItemItemTitle
  ItemUid
  ItemUserFullName
  TimeId
  ExpenseId
  Description
  AccountName
  AccountCode
  AccountId
  ProjectId
  ProjectName
  ProjectInternalTypeId
  BillableHours
  NonBillableHours
  TotalHours
  Beid
  BillRate
  CostRate
  BillableAmount
  NonBillableAmount
  ReimbursableAmount
  CostAmount
  TotalAmount
  HaveReceipt
  StatusId
  StatusName
  StatusUid
  StatusDate
  StatusUserFullName
  InvoiceHeaderId
  InvoiceNumber
  ClientAccountId
  ClientAccount
  ClientAccountCode
  ItemDate
  ReportDate
  FilterDate
  ResourcePoolName
  ResourcePoolId
  ServiceId
}

input TimeAndExpenseEntryOperand {
  field: TimeAndExpenseEntryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeAndExpenseEntryExpression
}

input TimeAndExpenseEntryOrderBy {
  field: TimeAndExpenseEntryField
  direction: OrderByDirection = Ascending
}

type TimeEntry implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Type: Int!
  Uid: ID!
  Tid: Int!
  ItemId: Int!
  ItemTitle: String
  Minutes: Int!
  TimeDate: DateTime!
  DateCreated: DateTime!
  Description: String
  Status: Int!
  Trid: Int
  TimeAcctId: Int
  BillRate: Decimal!
  CostRate: Decimal
  StatusDate: DateTime
  StatusUid: ID
  Invhid: String
  ExportDate: DateTime
  PlanId: Int
  Beid: ID!
  TicketId: Int!
  SubTypeId: Int!
  AppId: Int!
  FunctionalRoleId: Int
  ResourcePoolId: Int
  PrimaryGroupId: Int
}

"""A connection to a list of items."""
type TimeEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeEntryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeEntryEdge {
  """The item at the end of the edge"""
  node: TimeEntry

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeEntryExpression {
  operator: Operator!
  operands: [TimeEntryOperand]!
}

enum TimeEntryField {
  id
  Id
  Type
  Uid
  Tid
  ItemId
  ItemTitle
  Minutes
  TimeDate
  DateCreated
  Description
  Status
  Trid
  TimeAcctId
  BillRate
  CostRate
  StatusDate
  StatusUid
  Invhid
  ExportDate
  PlanId
  Beid
  TicketId
  SubTypeId
  AppId
  FunctionalRoleId
  ResourcePoolId
  PrimaryGroupId
}

input TimeEntryOperand {
  field: TimeEntryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeEntryExpression
}

input TimeEntryOrderBy {
  field: TimeEntryField
  direction: OrderByDirection = Ascending
}

type TimeExpenseStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type TimeExpenseStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeExpenseStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeExpenseStatusEdge {
  """The item at the end of the edge"""
  node: TimeExpenseStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeExpenseStatusExpression {
  operator: Operator!
  operands: [TimeExpenseStatusOperand]!
}

enum TimeExpenseStatusField {
  id
  Id
  Name
}

input TimeExpenseStatusOperand {
  field: TimeExpenseStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeExpenseStatusExpression
}

input TimeExpenseStatusOrderBy {
  field: TimeExpenseStatusField
  direction: OrderByDirection = Ascending
}

type TimeLockPeriod implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  StartDate: DateTime!
  EndDate: DateTime!
  CreatedByUid: ID!
  CreatedDate: DateTime!
}

"""A connection to a list of items."""
type TimeLockPeriodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeLockPeriodEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeLockPeriodEdge {
  """The item at the end of the edge"""
  node: TimeLockPeriod

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeLockPeriodExpression {
  operator: Operator!
  operands: [TimeLockPeriodOperand]!
}

enum TimeLockPeriodField {
  id
  Id
  Beid
  StartDate
  EndDate
  CreatedByUid
  CreatedDate
}

input TimeLockPeriodOperand {
  field: TimeLockPeriodField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeLockPeriodExpression
}

input TimeLockPeriodOrderBy {
  field: TimeLockPeriodField
  direction: OrderByDirection = Ascending
}

type TimeReport implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  StartDate: DateTime!
  EndDate: DateTime!
  Status: Int
  DateCompleted: DateTime
  DateCreated: DateTime!
  DateModified: DateTime
  TrTimeReportOnTimeReportHistories(after: String, first: Int, before: String, last: Int, sort: [TimeReportHistoryOrderBy], filter: TimeReportHistoryExpression): TimeReportHistoryConnection!
}

type TimeReportAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  DateCreated: DateTime!
  HasTime: Boolean!
  HasExpenses: Boolean!
}

"""A connection to a list of items."""
type TimeReportAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeReportAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeReportAlertEdge {
  """The item at the end of the edge"""
  node: TimeReportAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeReportAlertExpression {
  operator: Operator!
  operands: [TimeReportAlertOperand]!
}

enum TimeReportAlertField {
  id
  Id
  Uid
  DateCreated
  HasTime
  HasExpenses
}

input TimeReportAlertOperand {
  field: TimeReportAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeReportAlertExpression
}

input TimeReportAlertOrderBy {
  field: TimeReportAlertField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type TimeReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeReportEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeReportEdge {
  """The item at the end of the edge"""
  node: TimeReport

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeReportExpression {
  operator: Operator!
  operands: [TimeReportOperand]!
}

enum TimeReportField {
  id
  Id
  Uid
  StartDate
  EndDate
  Status
  DateCompleted
  DateCreated
  DateModified
}

type TimeReportHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TrTimeReport: TimeReport!
  Trid: Int!
  Uid: ID!
  Notes: String
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type TimeReportHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeReportHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeReportHistoryEdge {
  """The item at the end of the edge"""
  node: TimeReportHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeReportHistoryExpression {
  operator: Operator!
  operands: [TimeReportHistoryOperand]!
}

enum TimeReportHistoryField {
  id
  Id
  Trid
  Uid
  Notes
  DateCreated
}

input TimeReportHistoryOperand {
  field: TimeReportHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeReportHistoryExpression
}

input TimeReportHistoryOrderBy {
  field: TimeReportHistoryField
  direction: OrderByDirection = Ascending
}

input TimeReportOperand {
  field: TimeReportField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeReportExpression
}

input TimeReportOrderBy {
  field: TimeReportField
  direction: OrderByDirection = Ascending
}

type TimeReportsReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserFullName: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserShouldReportTime: Boolean!
  ReportsToUid: ID
  ReportsToFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportId: Int
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  StatusId: Int!
  StatusName: String!
  CompletedDate: DateTime
  SubmittedDate: DateTime
  Hours: Decimal
}

"""A connection to a list of items."""
type TimeReportsReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeReportsReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeReportsReportViewEdge {
  """The item at the end of the edge"""
  node: TimeReportsReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeReportsReportViewExpression {
  operator: Operator!
  operands: [TimeReportsReportViewOperand]!
}

enum TimeReportsReportViewField {
  id
  Beid
  UserUid
  UserFullName
  IsActive
  Company
  IsEmployee
  UserShouldReportTime
  ReportsToUid
  ReportsToFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportId
  TimeReportStartDate
  TimeReportEndDate
  StatusId
  StatusName
  CompletedDate
  SubmittedDate
  Hours
}

input TimeReportsReportViewOperand {
  field: TimeReportsReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeReportsReportViewExpression
}

input TimeReportsReportViewOrderBy {
  field: TimeReportsReportViewField
  direction: OrderByDirection = Ascending
}

type TimeReportStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
}

"""A connection to a list of items."""
type TimeReportStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeReportStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeReportStatusEdge {
  """The item at the end of the edge"""
  node: TimeReportStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeReportStatusExpression {
  operator: Operator!
  operands: [TimeReportStatusOperand]!
}

enum TimeReportStatusField {
  id
  Id
  Name
}

input TimeReportStatusOperand {
  field: TimeReportStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeReportStatusExpression
}

input TimeReportStatusOrderBy {
  field: TimeReportStatusField
  direction: OrderByDirection = Ascending
}

type TimeSheetAlert implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TsaTimeSheetAlertOnTimeSheetAlertsBes(after: String, first: Int, before: String, last: Int, sort: [TimeSheetAlertsBeOrderBy], filter: TimeSheetAlertsBeExpression): TimeSheetAlertsBeConnection!
}

"""A connection to a list of items."""
type TimeSheetAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeSheetAlertEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeSheetAlertEdge {
  """The item at the end of the edge"""
  node: TimeSheetAlert

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeSheetAlertExpression {
  operator: Operator!
  operands: [TimeSheetAlertOperand]!
}

enum TimeSheetAlertField {
  id
  Id
  Name
}

input TimeSheetAlertOperand {
  field: TimeSheetAlertField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeSheetAlertExpression
}

input TimeSheetAlertOrderBy {
  field: TimeSheetAlertField
  direction: OrderByDirection = Ascending
}

type TimeSheetAlertsBe implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  TsaTimeSheetAlert: TimeSheetAlert!
  Tsaid: Int!
}

"""A connection to a list of items."""
type TimeSheetAlertsBeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeSheetAlertsBeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeSheetAlertsBeEdge {
  """The item at the end of the edge"""
  node: TimeSheetAlertsBe

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeSheetAlertsBeExpression {
  operator: Operator!
  operands: [TimeSheetAlertsBeOperand]!
}

enum TimeSheetAlertsBeField {
  id
  Id
  Beid
  Tsaid
}

input TimeSheetAlertsBeOperand {
  field: TimeSheetAlertsBeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeSheetAlertsBeExpression
}

input TimeSheetAlertsBeOrderBy {
  field: TimeSheetAlertsBeField
  direction: OrderByDirection = Ascending
}

scalar Timestamp

type TimeZone implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Variance: Float
  WindowsId: String
  TimeZoneOnBillableEntities(after: String, first: Int, before: String, last: Int, sort: [BillableEntityOrderBy], filter: BillableEntityExpression): BillableEntityConnection!
  TimeZoneOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
  TimeZoneOnTicketApplicationSettings(after: String, first: Int, before: String, last: Int, sort: [TicketApplicationSettingOrderBy], filter: TicketApplicationSettingExpression): TicketApplicationSettingConnection!
  TzTimeZoneOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
}

"""A connection to a list of items."""
type TimeZoneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeZoneEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TimeZoneEdge {
  """The item at the end of the edge"""
  node: TimeZone

  """A cursor for use in pagination"""
  cursor: String!
}

input TimeZoneExpression {
  operator: Operator!
  operands: [TimeZoneOperand]!
}

enum TimeZoneField {
  id
  Id
  Name
  Variance
  WindowsId
}

input TimeZoneOperand {
  field: TimeZoneField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TimeZoneExpression
}

input TimeZoneOrderBy {
  field: TimeZoneField
  direction: OrderByDirection = Ascending
}

type TmpCutoverForm implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  BeidInt: Int!
  AppId: Int!
  TicketTypeId: Int
  ClassificationId: Int
  FormId: Int!
  ServiceId: Int
  ConfigurationItemTypeId: Int
}

"""A connection to a list of items."""
type TmpCutoverFormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TmpCutoverFormEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TmpCutoverFormEdge {
  """The item at the end of the edge"""
  node: TmpCutoverForm

  """A cursor for use in pagination"""
  cursor: String!
}

input TmpCutoverFormExpression {
  operator: Operator!
  operands: [TmpCutoverFormOperand]!
}

enum TmpCutoverFormField {
  id
  BeidInt
  AppId
  TicketTypeId
  ClassificationId
  FormId
  ServiceId
  ConfigurationItemTypeId
}

input TmpCutoverFormOperand {
  field: TmpCutoverFormField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TmpCutoverFormExpression
}

input TmpCutoverFormOrderBy {
  field: TmpCutoverFormField
  direction: OrderByDirection = Ascending
}

type TmpFlag implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Uid: ID!
  ComponentId: Int!
  DateCreated: DateTime!
  ItemId: Int!
}

"""A connection to a list of items."""
type TmpFlagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TmpFlagEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TmpFlagEdge {
  """The item at the end of the edge"""
  node: TmpFlag

  """A cursor for use in pagination"""
  cursor: String!
}

input TmpFlagExpression {
  operator: Operator!
  operands: [TmpFlagOperand]!
}

enum TmpFlagField {
  id
  Id
  Uid
  ComponentId
  DateCreated
  ItemId
}

input TmpFlagOperand {
  field: TmpFlagField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TmpFlagExpression
}

input TmpFlagOrderBy {
  field: TmpFlagField
  direction: OrderByDirection = Ascending
}

type Todo implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  Title: String!
  IsComplete: Boolean!
  Order: Float!
  DateCreated: DateTime!
  ModifiedDate: DateTime!
  StartDate: DateTime
  EndDate: DateTime
  PriorityPriorityFactor: PriorityFactor!
  PriorityId: Int!
  CompletedDate: DateTime
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: Todo

  """A cursor for use in pagination"""
  cursor: String!
}

input TodoExpression {
  operator: Operator!
  operands: [TodoOperand]!
}

enum TodoField {
  id
  Id
  Uid
  Title
  IsComplete
  Order
  DateCreated
  ModifiedDate
  StartDate
  EndDate
  PriorityId
  CompletedDate
}

input TodoOperand {
  field: TodoField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TodoExpression
}

input TodoOrderBy {
  field: TodoField
  direction: OrderByDirection = Ascending
}

type TypeCategory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  CreatedDate: DateTime!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  ModifiedDate: DateTime!
  ModifiedByUidUser: User!
  ModifiedByUid: ID!
  Order: Float!
  IsActive: Boolean!
  CatTypeCategoryOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection!
}

"""A connection to a list of items."""
type TypeCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypeCategoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypeCategoryEdge {
  """The item at the end of the edge"""
  node: TypeCategory

  """A cursor for use in pagination"""
  cursor: String!
}

input TypeCategoryExpression {
  operator: Operator!
  operands: [TypeCategoryOperand]!
}

enum TypeCategoryField {
  id
  Id
  Beid
  Name
  Description
  CreatedDate
  CreatedByUid
  ModifiedDate
  ModifiedByUid
  Order
  IsActive
}

input TypeCategoryOperand {
  field: TypeCategoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypeCategoryExpression
}

input TypeCategoryOrderBy {
  field: TypeCategoryField
  direction: OrderByDirection = Ascending
}

type TypeField implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  FieldId: Int!
  Order: Float!
  RequestorCanEdit: Boolean!
  RequestorCanView: Boolean!
  IsRequired: Boolean!
  DefaultValue: String
  DefaultText: String
  DefaultJson: String
  Form: Form!
  FormId: Int!
  HelpText: String
  PlaceholderText: String
  LabelText: String
  TechnicianCanEdit: Boolean!
  TechnicianCanView: Boolean!
  TechnicianIsRequired: Boolean!
  TechnicianApplyDefault: Boolean!
}

"""A connection to a list of items."""
type TypeFieldConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypeFieldEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypeFieldEdge {
  """The item at the end of the edge"""
  node: TypeField

  """A cursor for use in pagination"""
  cursor: String!
}

input TypeFieldExpression {
  operator: Operator!
  operands: [TypeFieldOperand]!
}

enum TypeFieldField {
  id
  Id
  FieldId
  Order
  RequestorCanEdit
  RequestorCanView
  IsRequired
  DefaultValue
  DefaultText
  DefaultJson
  FormId
  HelpText
  PlaceholderText
  LabelText
  TechnicianCanEdit
  TechnicianCanView
  TechnicianIsRequired
  TechnicianApplyDefault
}

input TypeFieldOperand {
  field: TypeFieldField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypeFieldExpression
}

input TypeFieldOrderBy {
  field: TypeFieldField
  direction: OrderByDirection = Ascending
}

type TypeID implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Ty: Int
}

"""A connection to a list of items."""
type TypeIDConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypeIDEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypeIDEdge {
  """The item at the end of the edge"""
  node: TypeID

  """A cursor for use in pagination"""
  cursor: String!
}

input TypeIDExpression {
  operator: Operator!
  operands: [TypeIDOperand]!
}

enum TypeIDField {
  id
  Ty
}

input TypeIDOperand {
  field: TypeIDField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypeIDExpression
}

input TypeIDOrderBy {
  field: TypeIDField
  direction: OrderByDirection = Ascending
}

type TypesExpenseAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TypOppType: OppType!
  Typid: Int!
  EacExpenseAcctCode: ExpenseAcctCode!
  Eacid: Int!
  Billable: Boolean!
}

"""A connection to a list of items."""
type TypesExpenseAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypesExpenseAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypesExpenseAcctCodeEdge {
  """The item at the end of the edge"""
  node: TypesExpenseAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input TypesExpenseAcctCodeExpression {
  operator: Operator!
  operands: [TypesExpenseAcctCodeOperand]!
}

enum TypesExpenseAcctCodeField {
  id
  Id
  Typid
  Eacid
  Billable
}

input TypesExpenseAcctCodeOperand {
  field: TypesExpenseAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypesExpenseAcctCodeExpression
}

input TypesExpenseAcctCodeOrderBy {
  field: TypesExpenseAcctCodeField
  direction: OrderByDirection = Ascending
}

type TypesGroup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Group: Group!
  GroupId: Int!
  TypeOppType: OppType!
  TypeId: Int!
}

"""A connection to a list of items."""
type TypesGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypesGroupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypesGroupEdge {
  """The item at the end of the edge"""
  node: TypesGroup

  """A cursor for use in pagination"""
  cursor: String!
}

input TypesGroupExpression {
  operator: Operator!
  operands: [TypesGroupOperand]!
}

enum TypesGroupField {
  id
  Id
  GroupId
  TypeId
}

input TypesGroupOperand {
  field: TypesGroupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypesGroupExpression
}

input TypesGroupOrderBy {
  field: TypesGroupField
  direction: OrderByDirection = Ascending
}

type TypesTask implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  CreatedByUidUser: User!
  CreatedByUid: ID!
  Title: String!
  Desc: String
  Order: Int!
  CreatedDate: DateTime!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  EstimatedMinutes: Int!
  DurationMinutes: Int
  PredecessorTypesTask: TypesTask
  PredecessorId: Int
  ResponsibleUidUser: User
  ResponsibleUid: ID
  ResponsibleGroupGroup: Group
  ResponsibleGroupId: Int
  TemplateTicketTaskTemplate: TicketTaskTemplate!
  TemplateId: Int!
  SourceTaskTypesTask: TypesTask
  SourceTaskId: Int
  TypeTaskTypesTaskOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  SourceTaskTypesTaskOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection
  PredecessorTypesTaskOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection
}

"""A connection to a list of items."""
type TypesTaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypesTaskEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypesTaskEdge {
  """The item at the end of the edge"""
  node: TypesTask

  """A cursor for use in pagination"""
  cursor: String!
}

input TypesTaskExpression {
  operator: Operator!
  operands: [TypesTaskOperand]!
}

enum TypesTaskField {
  id
  Id
  Beid
  CreatedByUid
  Title
  Desc
  Order
  CreatedDate
  ModifiedDate
  ModifiedUid
  EstimatedMinutes
  DurationMinutes
  PredecessorId
  ResponsibleUid
  ResponsibleGroupId
  TemplateId
  SourceTaskId
}

input TypesTaskOperand {
  field: TypesTaskField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypesTaskExpression
}

input TypesTaskOrderBy {
  field: TypesTaskField
  direction: OrderByDirection = Ascending
}

type TypesTimeAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  TypOppType: OppType!
  Typid: Int!
  TacTimeAcctCode: TimeAcctCode!
  Tacid: Int!
  CmpntComponent: Component!
  Cmpntid: Int!
}

"""A connection to a list of items."""
type TypesTimeAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TypesTimeAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type TypesTimeAcctCodeEdge {
  """The item at the end of the edge"""
  node: TypesTimeAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input TypesTimeAcctCodeExpression {
  operator: Operator!
  operands: [TypesTimeAcctCodeOperand]!
}

enum TypesTimeAcctCodeField {
  id
  Id
  Typid
  Tacid
  Cmpntid
}

input TypesTimeAcctCodeOperand {
  field: TypesTimeAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: TypesTimeAcctCodeExpression
}

input TypesTimeAcctCodeOrderBy {
  field: TypesTimeAcctCodeField
  direction: OrderByDirection = Ascending
}

type UMassActHrsRptWithProjectCustAttributesReportView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Beid: ID!
  UserUid: ID!
  UserFullName: String
  IsActive: Boolean!
  Company: String
  IsEmployee: Boolean
  UserShouldReportTime: Boolean!
  PrimaryFunctionalRole: String
  PrimaryFunctionalRoleId: Int
  ReportsToUid: ID
  ReportsToUserFullName: String
  ResourcePoolId: Int
  ResourcePoolName: String
  ResourcePoolPrimaryManagerUid: ID
  ResourcePoolPrimaryManagerFullName: String
  Week: Int
  WeekSundayDate: DateTime
  WeekSaturdayDate: DateTime
  TimeReportStartDate: DateTime
  TimeReportEndDate: DateTime
  ProjectId: Int!
  ProjectName: String
  TicketId: Int!
  TicketTitle: String
  ItemId: Int!
  ItemTitle: String
  ItemType: String
  TimeAccountId: Int
  TimeAccountName: String!
  Description: String
  StatusId: Int!
  StatusDate: DateTime
  StatusName: String!
  SubmittedDate: DateTime
  CreatedDate: DateTime!
  TimeDate: DateTime!
  IsBillable: Boolean!
  IsTimeOff: Boolean
  Hours: Decimal
  Year: Int
  Month: DateTime
  AccountId: Int
  AccountName: String
  AccountCode: String
  PlanId: Int
  PlanName: String
  ServiceId: Int
  ServiceName: String
  ServiceCategoryId: Int
  TypeId: Int
  TypeName: String
  ProjectCategoryId: Int
  ProjectCategoryName: String
  ProjectWorkspaceIsActive: Boolean
}

"""A connection to a list of items."""
type UMassActHrsRptWithProjectCustAttributesReportViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UMassActHrsRptWithProjectCustAttributesReportViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UMassActHrsRptWithProjectCustAttributesReportViewEdge {
  """The item at the end of the edge"""
  node: UMassActHrsRptWithProjectCustAttributesReportView

  """A cursor for use in pagination"""
  cursor: String!
}

input UMassActHrsRptWithProjectCustAttributesReportViewExpression {
  operator: Operator!
  operands: [UMassActHrsRptWithProjectCustAttributesReportViewOperand]!
}

enum UMassActHrsRptWithProjectCustAttributesReportViewField {
  id
  Beid
  UserUid
  UserFullName
  IsActive
  Company
  IsEmployee
  UserShouldReportTime
  PrimaryFunctionalRole
  PrimaryFunctionalRoleId
  ReportsToUid
  ReportsToUserFullName
  ResourcePoolId
  ResourcePoolName
  ResourcePoolPrimaryManagerUid
  ResourcePoolPrimaryManagerFullName
  Week
  WeekSundayDate
  WeekSaturdayDate
  TimeReportStartDate
  TimeReportEndDate
  ProjectId
  ProjectName
  TicketId
  TicketTitle
  ItemId
  ItemTitle
  ItemType
  TimeAccountId
  TimeAccountName
  Description
  StatusId
  StatusDate
  StatusName
  SubmittedDate
  CreatedDate
  TimeDate
  IsBillable
  IsTimeOff
  Hours
  Year
  Month
  AccountId
  AccountName
  AccountCode
  PlanId
  PlanName
  ServiceId
  ServiceName
  ServiceCategoryId
  TypeId
  TypeName
  ProjectCategoryId
  ProjectCategoryName
  ProjectWorkspaceIsActive
}

input UMassActHrsRptWithProjectCustAttributesReportViewOperand {
  field: UMassActHrsRptWithProjectCustAttributesReportViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UMassActHrsRptWithProjectCustAttributesReportViewExpression
}

input UMassActHrsRptWithProjectCustAttributesReportViewOrderBy {
  field: UMassActHrsRptWithProjectCustAttributesReportViewField
  direction: OrderByDirection = Ascending
}

type UmasspoProjectRequestWorkflow implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  AccountId: Int
  StartDate: DateTime
  EndDate: DateTime
  ModifiedDate: DateTime
  SubmittedDate: DateTime
  ProjectName: String!
  Description: String
  Requirements: String
  Budget: Decimal
  CreatedDate: DateTime!
  EstimatedHours: Float
  ItemType: String
  ItemTypeId: String
  StatusId: Int
  StatusName: String
  HealthId: Int!
  ClassificationId: Int!
  Classification: String!
  AccountName: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  Score: Float
  ProjectTypeId: Int
  ProjectType: String
  PriorityId: Int
  PriorityName: String
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  SponsorUid: ID
  SponsorName: String
  SponsorEmail: String
  ProjPct: Float
  ActualHours: Decimal
  BaseEndDate: DateTime
  Active: Boolean
  BaseHours: Float
  BaseStartDate: DateTime
  ManagerUid: ID
  ManagerName: String
  StatusComments: String
  StatusModifiedDate: DateTime
  BudgetUsed: Decimal
  BudgetRemaining: Decimal
  InitialEndDate: DateTime
  InitialHours: Float
  InitialStartDate: DateTime
  InitialBudget: Decimal
  Plans: String
  ActualExpenses: Decimal
  ManagerPct: Int
  ResourceMgmt: String
  CompositeScorePct: Float
  StatusDescription: String
  ProjectStatusId: Int
  RequestorUid: ID
  RequestorName: String
  EvaluatorUid: ID
  EvaluatorName: String
  WorkflowStepAgeDays: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeWorkDays: Int
  WorkflowTemplateStepId: Int
  Roi: Float
  Npv: Decimal
  Irr: Float
  ProjectRequestStatusId: Int
  ProjectRequestStatusName: String
  CurrentEvaluatorUid: ID
  WorkflowStepId: Int
  WorkflowStepRespNames: String
  StepName: String
  StepDescription: String
  StepStartedDate: DateTime
  StepCompletedDate: DateTime
}

"""A connection to a list of items."""
type UmasspoProjectRequestWorkflowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UmasspoProjectRequestWorkflowEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UmasspoProjectRequestWorkflowEdge {
  """The item at the end of the edge"""
  node: UmasspoProjectRequestWorkflow

  """A cursor for use in pagination"""
  cursor: String!
}

input UmasspoProjectRequestWorkflowExpression {
  operator: Operator!
  operands: [UmasspoProjectRequestWorkflowOperand]!
}

enum UmasspoProjectRequestWorkflowField {
  id
  Id
  Beid
  AccountId
  StartDate
  EndDate
  ModifiedDate
  SubmittedDate
  ProjectName
  Description
  Requirements
  Budget
  CreatedDate
  EstimatedHours
  ItemType
  ItemTypeId
  StatusId
  StatusName
  HealthId
  ClassificationId
  Classification
  AccountName
  GoalsScore
  RisksScore
  ScorecardScore
  Score
  ProjectTypeId
  ProjectType
  PriorityId
  PriorityName
  ExpensesBudget
  TimeBudget
  SponsorUid
  SponsorName
  SponsorEmail
  ProjPct
  ActualHours
  BaseEndDate
  Active
  BaseHours
  BaseStartDate
  ManagerUid
  ManagerName
  StatusComments
  StatusModifiedDate
  BudgetUsed
  BudgetRemaining
  InitialEndDate
  InitialHours
  InitialStartDate
  InitialBudget
  Plans
  ActualExpenses
  ManagerPct
  ResourceMgmt
  CompositeScorePct
  StatusDescription
  ProjectStatusId
  RequestorUid
  RequestorName
  EvaluatorUid
  EvaluatorName
  WorkflowStepAgeDays
  WorkflowStepStartedDate
  WorkflowStepAgeWorkDays
  WorkflowTemplateStepId
  Roi
  Npv
  Irr
  ProjectRequestStatusId
  ProjectRequestStatusName
  CurrentEvaluatorUid
  WorkflowStepId
  WorkflowStepRespNames
  StepName
  StepDescription
  StepStartedDate
  StepCompletedDate
}

input UmasspoProjectRequestWorkflowOperand {
  field: UmasspoProjectRequestWorkflowField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UmasspoProjectRequestWorkflowExpression
}

input UmasspoProjectRequestWorkflowOrderBy {
  field: UmasspoProjectRequestWorkflowField
  direction: OrderByDirection = Ascending
}

type UmasspoProjectsandRequest implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  AccountId: Int
  StartDate: DateTime
  EndDate: DateTime
  ModifiedDate: DateTime
  SubmittedDate: DateTime
  ProjectName: String!
  Description: String
  Requirements: String
  Budget: Decimal
  CreatedDate: DateTime!
  EstimatedHours: Float
  ItemType: String
  ItemTypeId: String
  StatusId: Int
  StatusName: String
  HealthId: Int!
  ClassificationId: Int!
  Classification: String!
  AccountName: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  Score: Float
  ProjectTypeId: Int
  ProjectType: String
  PriorityId: Int
  PriorityName: String
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  SponsorUid: ID
  SponsorName: String
  SponsorEmail: String
  ProjPct: Float
  ActualHours: Decimal!
  BaseEndDate: DateTime
  Active: Boolean
  BaseHours: Float
  BaseStartDate: DateTime
  ManagerUid: ID
  ManagerName: String
  StatusComments: String
  StatusModifiedDate: DateTime
  BudgetUsed: Decimal
  BudgetRemaining: Decimal
  InitialEndDate: DateTime
  InitialHours: Float
  InitialStartDate: DateTime
  InitialBudget: Decimal
  Plans: String
  ActualExpenses: Decimal
  ManagerPct: Int
  ResourceMgmt: String
  CompositeScorePct: Float
  StatusDescription: String
  ProjectStatusId: Int
  RequestorUid: ID
  RequestorName: String
  EvaluatorUid: ID
  EvaluatorName: String
  WorkflowStepAgeDays: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeWorkDays: Int
  WorkflowTemplateStepId: Int
  Roi: Float
  Npv: Decimal
  Irr: Float
  ProjectRequestStatusId: Int
  ProjectRequestStatusName: String
  CurrentEvaluatorUid: ID
  WorkflowStepId: Int
  WorkflowStepRespNames: String
}

"""A connection to a list of items."""
type UmasspoProjectsandRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UmasspoProjectsandRequestEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UmasspoProjectsandRequestEdge {
  """The item at the end of the edge"""
  node: UmasspoProjectsandRequest

  """A cursor for use in pagination"""
  cursor: String!
}

input UmasspoProjectsandRequestExpression {
  operator: Operator!
  operands: [UmasspoProjectsandRequestOperand]!
}

enum UmasspoProjectsandRequestField {
  id
  Id
  Beid
  AccountId
  StartDate
  EndDate
  ModifiedDate
  SubmittedDate
  ProjectName
  Description
  Requirements
  Budget
  CreatedDate
  EstimatedHours
  ItemType
  ItemTypeId
  StatusId
  StatusName
  HealthId
  ClassificationId
  Classification
  AccountName
  GoalsScore
  RisksScore
  ScorecardScore
  Score
  ProjectTypeId
  ProjectType
  PriorityId
  PriorityName
  ExpensesBudget
  TimeBudget
  SponsorUid
  SponsorName
  SponsorEmail
  ProjPct
  ActualHours
  BaseEndDate
  Active
  BaseHours
  BaseStartDate
  ManagerUid
  ManagerName
  StatusComments
  StatusModifiedDate
  BudgetUsed
  BudgetRemaining
  InitialEndDate
  InitialHours
  InitialStartDate
  InitialBudget
  Plans
  ActualExpenses
  ManagerPct
  ResourceMgmt
  CompositeScorePct
  StatusDescription
  ProjectStatusId
  RequestorUid
  RequestorName
  EvaluatorUid
  EvaluatorName
  WorkflowStepAgeDays
  WorkflowStepStartedDate
  WorkflowStepAgeWorkDays
  WorkflowTemplateStepId
  Roi
  Npv
  Irr
  ProjectRequestStatusId
  ProjectRequestStatusName
  CurrentEvaluatorUid
  WorkflowStepId
  WorkflowStepRespNames
}

input UmasspoProjectsandRequestOperand {
  field: UmasspoProjectsandRequestField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UmasspoProjectsandRequestExpression
}

input UmasspoProjectsandRequestOrderBy {
  field: UmasspoProjectsandRequestField
  direction: OrderByDirection = Ascending
}

type UnprocessedNotification implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Recipients: String!
  SenderUserUser: User!
  SenderUserId: Int!
  ItemUpdateId: Int
  Subject: String!
  CreatedDateUtc: DateTime!
  StatusNotificationStatus: NotificationStatus!
  StatusId: Int!
  ModifiedDateUtc: DateTime!
  Body: String!
  UnprocessedNotificationOnNotificationAttachments(after: String, first: Int, before: String, last: Int, sort: [NotificationAttachmentOrderBy], filter: NotificationAttachmentExpression): NotificationAttachmentConnection
}

"""A connection to a list of items."""
type UnprocessedNotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnprocessedNotificationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UnprocessedNotificationEdge {
  """The item at the end of the edge"""
  node: UnprocessedNotification

  """A cursor for use in pagination"""
  cursor: String!
}

input UnprocessedNotificationExpression {
  operator: Operator!
  operands: [UnprocessedNotificationOperand]!
}

enum UnprocessedNotificationField {
  id
  Id
  BeidInt
  Recipients
  SenderUserId
  ItemUpdateId
  Subject
  CreatedDateUtc
  StatusId
  ModifiedDateUtc
  Body
}

input UnprocessedNotificationOperand {
  field: UnprocessedNotificationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UnprocessedNotificationExpression
}

input UnprocessedNotificationOrderBy {
  field: UnprocessedNotificationField
  direction: OrderByDirection = Ascending
}

type UnsentNotification implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  UnNotificationHistoryNotificationHistory: NotificationHistory!
  UnNotificationHistoryId: Int!
}

"""A connection to a list of items."""
type UnsentNotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UnsentNotificationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UnsentNotificationEdge {
  """The item at the end of the edge"""
  node: UnsentNotification

  """A cursor for use in pagination"""
  cursor: String!
}

input UnsentNotificationExpression {
  operator: Operator!
  operands: [UnsentNotificationOperand]!
}

enum UnsentNotificationField {
  id
  UnNotificationHistoryId
}

input UnsentNotificationOperand {
  field: UnsentNotificationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UnsentNotificationExpression
}

input UnsentNotificationOrderBy {
  field: UnsentNotificationField
  direction: OrderByDirection = Ascending
}

type UntspoProjectsandRequest implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  AccountId: Int
  StartDate: DateTime
  EndDate: DateTime
  ModifiedDate: DateTime
  SubmittedDate: DateTime
  ProjectName: String!
  Description: String
  Requirements: String
  Budget: Decimal
  CreatedDate: DateTime!
  EstimatedHours: Float
  ItemType: String
  ItemTypeId: String
  StatusId: Int
  StatusName: String
  HealthId: Int!
  ClassificationId: Int!
  Classification: String!
  AccountName: String
  GoalsScore: Float
  RisksScore: Float
  ScorecardScore: Float
  Score: Float
  ProjectTypeId: Int
  ProjectType: String
  PriorityId: Int
  PriorityName: String
  ExpensesBudget: Decimal
  TimeBudget: Decimal
  SponsorUid: ID
  SponsorName: String
  SponsorEmail: String
  ProjPct: Float
  ActualHours: Decimal!
  BaseEndDate: DateTime
  Active: Boolean
  BaseHours: Float
  BaseStartDate: DateTime
  ManagerUid: ID
  ManagerName: String
  StatusComments: String
  StatusModifiedDate: DateTime
  BudgetUsed: Decimal
  BudgetRemaining: Decimal
  InitialEndDate: DateTime
  InitialHours: Float
  InitialStartDate: DateTime
  InitialBudget: Decimal
  Plans: String
  ActualExpenses: Decimal
  ManagerPct: Int
  ResourceMgmt: String
  CompositeScorePct: Float
  StatusDescription: String
  ProjectStatusId: Int
  RequestorUid: ID
  RequestorName: String
  EvaluatorUid: ID
  EvaluatorName: String
  WorkflowStepAgeDays: Int
  WorkflowStepStartedDate: DateTime
  WorkflowStepAgeWorkDays: Int
  WorkflowTemplateStepId: Int
  Roi: Float
  Npv: Decimal
  Irr: Float
  ProjectRequestStatusId: Int
  ProjectRequestStatusName: String
  CurrentEvaluatorUid: ID
  WorkflowStepId: Int
  WorkflowStepRespNames: String
}

"""A connection to a list of items."""
type UntspoProjectsandRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UntspoProjectsandRequestEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UntspoProjectsandRequestEdge {
  """The item at the end of the edge"""
  node: UntspoProjectsandRequest

  """A cursor for use in pagination"""
  cursor: String!
}

input UntspoProjectsandRequestExpression {
  operator: Operator!
  operands: [UntspoProjectsandRequestOperand]!
}

enum UntspoProjectsandRequestField {
  id
  Id
  Beid
  AccountId
  StartDate
  EndDate
  ModifiedDate
  SubmittedDate
  ProjectName
  Description
  Requirements
  Budget
  CreatedDate
  EstimatedHours
  ItemType
  ItemTypeId
  StatusId
  StatusName
  HealthId
  ClassificationId
  Classification
  AccountName
  GoalsScore
  RisksScore
  ScorecardScore
  Score
  ProjectTypeId
  ProjectType
  PriorityId
  PriorityName
  ExpensesBudget
  TimeBudget
  SponsorUid
  SponsorName
  SponsorEmail
  ProjPct
  ActualHours
  BaseEndDate
  Active
  BaseHours
  BaseStartDate
  ManagerUid
  ManagerName
  StatusComments
  StatusModifiedDate
  BudgetUsed
  BudgetRemaining
  InitialEndDate
  InitialHours
  InitialStartDate
  InitialBudget
  Plans
  ActualExpenses
  ManagerPct
  ResourceMgmt
  CompositeScorePct
  StatusDescription
  ProjectStatusId
  RequestorUid
  RequestorName
  EvaluatorUid
  EvaluatorName
  WorkflowStepAgeDays
  WorkflowStepStartedDate
  WorkflowStepAgeWorkDays
  WorkflowTemplateStepId
  Roi
  Npv
  Irr
  ProjectRequestStatusId
  ProjectRequestStatusName
  CurrentEvaluatorUid
  WorkflowStepId
  WorkflowStepRespNames
}

input UntspoProjectsandRequestOperand {
  field: UntspoProjectsandRequestField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UntspoProjectsandRequestExpression
}

input UntspoProjectsandRequestOrderBy {
  field: UntspoProjectsandRequestField
  direction: OrderByDirection = Ascending
}

type User implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Guid: ID!
  BeBillableEntity: BillableEntity!
  BeId: ID!
  Id: Int!
  TypeUserType: UserType!
  TypeId: Int!
  IsActive: Boolean!
  Name: String
  Password: String
  AuthProvider: AuthProvider
  AuthProviderId: Int
  AuthProviderUsername: String
  FName: String
  LName: String
  MiddleName: String
  Nickname: String
  Salutation: String
  DefaultAccountClientAcctCode: ClientAcctCode!
  DefaultAccountId: Int!
  Company: String
  Title: String
  Gender: String
  PrimaryEmail: String!
  AlternateEmail: String
  AlertEmail: String!
  TzTimeZone: TimeZone!
  TzId: Int!
  Zip: String
  JoinDate: DateTime
  LastUpdate: DateTime
  LoggedOn: String
  LastLogon: DateTime
  LastLogoff: DateTime
  PrimaryPhone: String
  PreferredPhone: String
  HomePhone: String
  WorkPhone: String
  Pager: String
  MobilePhone: String
  Fax: String
  OthrPhone: String
  HAddr: String
  HCity: String
  HState: String
  HZip: String
  HCntry: String
  WAddr: String
  WCity: String
  WState: String
  WZip: String
  WCntry: String
  BDay: DateTime
  ImProvider: String
  ImHandle: String
  ProfileImageFileName: String
  Role: Role
  RoleId: ID
  PriFunctionalRoleId: Int
  ResourcePoolId: Int
  IsEmployee: Boolean
  DefaultRate: Decimal
  CostRate: Decimal
  WorkableHours: Float
  ShouldReportTime: Boolean!
  ReportsToUid: ID
  ReportTimeAfterDate: DateTime
  TextStatus: String
  InvalidLoginCount: Int!
  LockedOut: Boolean!
  LockedOutDate: DateTime
  CalView: String
  PublicCal: Boolean
  CalendarPassKey: String
  ShowSummaryOnStartup: Boolean!
  AllowStatusUpdateAlerts: Boolean!
  TabSession: String
  ExternalId: String
  AlternateId: String
  DefaultPriorityPriorityFactor: PriorityFactor!
  DefaultPriorityId: Int!
  FullName: String
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
  EndDate: Date
  PrimaryGroupGroup: Group!
  PrimaryGroupId: Int!
  PasswordVersion: Int
  PasswordHash: String
  ShowAccomplishments: Boolean!
  IsCapacityManaged: Boolean!
  AboutMe: String
  IsUserOrCustomer: Int!
  IsPhantom: Boolean
  CreatedByUidUserOnAnnouncementHistories(after: String, first: Int, before: String, last: Int, sort: [AnnouncementHistoryOrderBy], filter: AnnouncementHistoryExpression): AnnouncementHistoryConnection!
  UidUserOnAnnouncements(after: String, first: Int, before: String, last: Int, sort: [AnnouncementOrderBy], filter: AnnouncementExpression): AnnouncementConnection!
  CreatedUUserOnAppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection!
  ModifiedUUserOnAppComponents(after: String, first: Int, before: String, last: Int, sort: [AppComponentOrderBy], filter: AppComponentExpression): AppComponentConnection!
  CreatedUidUserOnApplications(after: String, first: Int, before: String, last: Int, sort: [ApplicationOrderBy], filter: ApplicationExpression): ApplicationConnection!
  ModifiedUidUserOnApplications(after: String, first: Int, before: String, last: Int, sort: [ApplicationOrderBy], filter: ApplicationExpression): ApplicationConnection!
  CreatedUidUserOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  ModifiedUidUserOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  ReqCustomerUserOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  OwningCustomerUserOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection
  CreatedUidUserOnAssetsContracts(after: String, first: Int, before: String, last: Int, sort: [AssetsContractOrderBy], filter: AssetsContractExpression): AssetsContractConnection!
  ModifiedUidUserOnAssetsContracts(after: String, first: Int, before: String, last: Int, sort: [AssetsContractOrderBy], filter: AssetsContractExpression): AssetsContractConnection!
  CreatedUidUserOnAssetsDepartments(after: String, first: Int, before: String, last: Int, sort: [AssetsDepartmentOrderBy], filter: AssetsDepartmentExpression): AssetsDepartmentConnection!
  CreatedUidUserOnAssetStatuses(after: String, first: Int, before: String, last: Int, sort: [AssetStatusOrderBy], filter: AssetStatusExpression): AssetStatusConnection!
  ModifiedUidUserOnAssetStatuses(after: String, first: Int, before: String, last: Int, sort: [AssetStatusOrderBy], filter: AssetStatusExpression): AssetStatusConnection!
  CreatedUidUserOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  NewOwningCustomerUserOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  OldOwningCustomerUserOnAssetStatusHistories(after: String, first: Int, before: String, last: Int, sort: [AssetStatusHistoryOrderBy], filter: AssetStatusHistoryExpression): AssetStatusHistoryConnection!
  CreatedUidUserOnAssetsUsers(after: String, first: Int, before: String, last: Int, sort: [AssetsUserOrderBy], filter: AssetsUserExpression): AssetsUserConnection!
  CustomerUserOnAssetsUsers(after: String, first: Int, before: String, last: Int, sort: [AssetsUserOrderBy], filter: AssetsUserExpression): AssetsUserConnection!
  CreatedUidUserOnAttachments(after: String, first: Int, before: String, last: Int, sort: [AttachmentOrderBy], filter: AttachmentExpression): AttachmentConnection
  CreatedUidUserOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection!
  ModifiedUidUserOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection!
  NewRespUidUserOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  UidUserOnBeAdmins(after: String, first: Int, before: String, last: Int, sort: [BeAdminOrderBy], filter: BeAdminExpression): BeAdminConnection!
  CreatedByUidUserOnBenefits(after: String, first: Int, before: String, last: Int, sort: [BenefitOrderBy], filter: BenefitExpression): BenefitConnection
  ModifiedByUidUserOnBenefits(after: String, first: Int, before: String, last: Int, sort: [BenefitOrderBy], filter: BenefitExpression): BenefitConnection
  CustomStylesModifiedUidUserOnBillableEntities(after: String, first: Int, before: String, last: Int, sort: [BillableEntityOrderBy], filter: BillableEntityExpression): BillableEntityConnection
  ManagerUidUserOnClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [ClientAcctCodeOrderBy], filter: ClientAcctCodeExpression): ClientAcctCodeConnection!
  CreatedUidUserOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  ModifiedUidUserOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  OwnerUidUserOnConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemOrderBy], filter: ConfigurationItemExpression): ConfigurationItemConnection!
  CreatedUidUserOnConfigurationItemTickets(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketOrderBy], filter: ConfigurationItemTicketExpression): ConfigurationItemTicketConnection!
  CreatedUidUserOnConfigurationItemTicketTasks(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTicketTaskOrderBy], filter: ConfigurationItemTicketTaskExpression): ConfigurationItemTicketTaskConnection!
  CreatedUidUserOnConfigurationItemTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTypeOrderBy], filter: ConfigurationItemTypeExpression): ConfigurationItemTypeConnection!
  ModifiedUidUserOnConfigurationItemTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationItemTypeOrderBy], filter: ConfigurationItemTypeExpression): ConfigurationItemTypeConnection!
  CreatedUidUserOnConfigurationRelationships(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipOrderBy], filter: ConfigurationRelationshipExpression): ConfigurationRelationshipConnection!
  CreatedUidUserOnConfigurationRelationshipTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipTypeOrderBy], filter: ConfigurationRelationshipTypeExpression): ConfigurationRelationshipTypeConnection!
  ModifiedUidUserOnConfigurationRelationshipTypes(after: String, first: Int, before: String, last: Int, sort: [ConfigurationRelationshipTypeOrderBy], filter: ConfigurationRelationshipTypeExpression): ConfigurationRelationshipTypeConnection!
  CreatedUidUserOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
  ModifiedUidUserOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
  DeletedUidUserOnDeletedConfigurationItems(after: String, first: Int, before: String, last: Int, sort: [DeletedConfigurationItemOrderBy], filter: DeletedConfigurationItemExpression): DeletedConfigurationItemConnection!
  CreatedUidUserOnDownloadApplications(after: String, first: Int, before: String, last: Int, sort: [DownloadApplicationOrderBy], filter: DownloadApplicationExpression): DownloadApplicationConnection!
  ModifiedUidUserOnDownloadApplications(after: String, first: Int, before: String, last: Int, sort: [DownloadApplicationOrderBy], filter: DownloadApplicationExpression): DownloadApplicationConnection!
  CreatedUidUserOnDownloads(after: String, first: Int, before: String, last: Int, sort: [DownloadOrderBy], filter: DownloadExpression): DownloadConnection!
  ModifiedUidUserOnDownloads(after: String, first: Int, before: String, last: Int, sort: [DownloadOrderBy], filter: DownloadExpression): DownloadConnection!
  CreatedUidUserOnEmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
  ModifiedUidUserOnEmailMonitors(after: String, first: Int, before: String, last: Int, sort: [EmailMonitorOrderBy], filter: EmailMonitorExpression): EmailMonitorConnection
  OrganizerUidUserOnEvents(after: String, first: Int, before: String, last: Int, sort: [EventOrderBy], filter: EventExpression): EventConnection!
  UidUserOnEventUserAlerts(after: String, first: Int, before: String, last: Int, sort: [EventUserAlertOrderBy], filter: EventUserAlertExpression): EventUserAlertConnection!
  AddressedUidUserOnFeedbacks(after: String, first: Int, before: String, last: Int, sort: [FeedbackOrderBy], filter: FeedbackExpression): FeedbackConnection
  UidUserOnFeedbacks(after: String, first: Int, before: String, last: Int, sort: [FeedbackOrderBy], filter: FeedbackExpression): FeedbackConnection!
  UidUserOnFlags(after: String, first: Int, before: String, last: Int, sort: [FlagOrderBy], filter: FlagExpression): FlagConnection!
  CreatedUidUserOnForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection!
  ModifiedUidUserOnForComments(after: String, first: Int, before: String, last: Int, sort: [ForCommentOrderBy], filter: ForCommentExpression): ForCommentConnection
  UidUserOnForNotifications(after: String, first: Int, before: String, last: Int, sort: [ForNotificationOrderBy], filter: ForNotificationExpression): ForNotificationConnection!
  CreatedUidUserOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  ModifiedUidUserOnForms(after: String, first: Int, before: String, last: Int, sort: [FormOrderBy], filter: FormExpression): FormConnection!
  UidUserOnFunctionalRolesUsers(after: String, first: Int, before: String, last: Int, sort: [FunctionalRolesUserOrderBy], filter: FunctionalRolesUserExpression): FunctionalRolesUserConnection!
  CreatedByUidUserOnGoals(after: String, first: Int, before: String, last: Int, sort: [GoalOrderBy], filter: GoalExpression): GoalConnection
  ModifiedByUidUserOnGoals(after: String, first: Int, before: String, last: Int, sort: [GoalOrderBy], filter: GoalExpression): GoalConnection
  CreatedUidUserOnGroupItems(after: String, first: Int, before: String, last: Int, sort: [GroupItemOrderBy], filter: GroupItemExpression): GroupItemConnection!
  CreatedByUserUserOnImages(after: String, first: Int, before: String, last: Int, sort: [ImageOrderBy], filter: ImageExpression): ImageConnection!
  CreatedUidUserOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
  ModifiedUidUserOnIntegrations(after: String, first: Int, before: String, last: Int, sort: [IntegrationOrderBy], filter: IntegrationExpression): IntegrationConnection!
  CreatedUidUserOnIntegrationSessions(after: String, first: Int, before: String, last: Int, sort: [IntegrationSessionOrderBy], filter: IntegrationSessionExpression): IntegrationSessionConnection!
  UidUserOnIssueCategories(after: String, first: Int, before: String, last: Int, sort: [IssueCategoryOrderBy], filter: IssueCategoryExpression): IssueCategoryConnection!
  CreatedUidUserOnItemArticles(after: String, first: Int, before: String, last: Int, sort: [ItemArticleOrderBy], filter: ItemArticleExpression): ItemArticleConnection!
  UserUidUserOnItemContacts(after: String, first: Int, before: String, last: Int, sort: [ItemContactOrderBy], filter: ItemContactExpression): ItemContactConnection!
  CreatedUidUserOnItemContacts(after: String, first: Int, before: String, last: Int, sort: [ItemContactOrderBy], filter: ItemContactExpression): ItemContactConnection!
  PublishedUidUserOnItemContacts(after: String, first: Int, before: String, last: Int, sort: [ItemContactOrderBy], filter: ItemContactExpression): ItemContactConnection
  ConvertedUidUserOnItemConversionHistories(after: String, first: Int, before: String, last: Int, sort: [ItemConversionHistoryOrderBy], filter: ItemConversionHistoryExpression): ItemConversionHistoryConnection!
  CreatedByUserUserOnItemImages(after: String, first: Int, before: String, last: Int, sort: [ItemImageOrderBy], filter: ItemImageExpression): ItemImageConnection!
  CreatedUidUserOnItemTags(after: String, first: Int, before: String, last: Int, sort: [ItemTagOrderBy], filter: ItemTagExpression): ItemTagConnection!
  CreatedUidUserOnItemTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateCategoryOrderBy], filter: ItemTemplateCategoryExpression): ItemTemplateCategoryConnection!
  ModifiedUidUserOnItemTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateCategoryOrderBy], filter: ItemTemplateCategoryExpression): ItemTemplateCategoryConnection
  CreatedUidUserOnItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection!
  ModifiedUidUserOnItemTemplates(after: String, first: Int, before: String, last: Int, sort: [ItemTemplateOrderBy], filter: ItemTemplateExpression): ItemTemplateConnection
  CreatedUidUserOnItemUserPermissions(after: String, first: Int, before: String, last: Int, sort: [ItemUserPermissionOrderBy], filter: ItemUserPermissionExpression): ItemUserPermissionConnection!
  ModifiedUidUserOnItemUserPermissions(after: String, first: Int, before: String, last: Int, sort: [ItemUserPermissionOrderBy], filter: ItemUserPermissionExpression): ItemUserPermissionConnection!
  UidUserOnItemUserPermissions(after: String, first: Int, before: String, last: Int, sort: [ItemUserPermissionOrderBy], filter: ItemUserPermissionExpression): ItemUserPermissionConnection!
  UidUserOnItemViewsRollings(after: String, first: Int, before: String, last: Int, sort: [ItemViewsRollingOrderBy], filter: ItemViewsRollingExpression): ItemViewsRollingConnection!
  UidUserOnLinksCategories(after: String, first: Int, before: String, last: Int, sort: [LinksCategoryOrderBy], filter: LinksCategoryExpression): LinksCategoryConnection!
  CreatedUidUserOnLocationRooms(after: String, first: Int, before: String, last: Int, sort: [LocationRoomOrderBy], filter: LocationRoomExpression): LocationRoomConnection!
  CreatedUidUserOnLocations(after: String, first: Int, before: String, last: Int, sort: [LocationOrderBy], filter: LocationExpression): LocationConnection!
  ModifiedUidUserOnLocations(after: String, first: Int, before: String, last: Int, sort: [LocationOrderBy], filter: LocationExpression): LocationConnection!
  LastModifiedByUidUserOnMailServers(after: String, first: Int, before: String, last: Int, sort: [MailServerOrderBy], filter: MailServerExpression): MailServerConnection!
  UserRefUserOnMessages(after: String, first: Int, before: String, last: Int, sort: [MessageOrderBy], filter: MessageExpression): MessageConnection!
  UidUserOnMobileNotificationPlayers(after: String, first: Int, before: String, last: Int, sort: [MobileNotificationPlayerOrderBy], filter: MobileNotificationPlayerExpression): MobileNotificationPlayerConnection!
  RecipientUserUserOnNotificationHistories(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryOrderBy], filter: NotificationHistoryExpression): NotificationHistoryConnection!
  SenderUserUserOnNotificationHistories(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryOrderBy], filter: NotificationHistoryExpression): NotificationHistoryConnection!
  RecipientUserUserOnNotificationHistoryArchives(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryArchiveOrderBy], filter: NotificationHistoryArchiveExpression): NotificationHistoryArchiveConnection!
  SenderUserUserOnNotificationHistoryArchives(after: String, first: Int, before: String, last: Int, sort: [NotificationHistoryArchiveOrderBy], filter: NotificationHistoryArchiveExpression): NotificationHistoryArchiveConnection!
  PrimaryUidUserOnOppTypes(after: String, first: Int, before: String, last: Int, sort: [OppTypeOrderBy], filter: OppTypeExpression): OppTypeConnection
  CreatedByUidUserOnPaymentTypes(after: String, first: Int, before: String, last: Int, sort: [PaymentTypeOrderBy], filter: PaymentTypeExpression): PaymentTypeConnection!
  ModifiedByUidUserOnPaymentTypes(after: String, first: Int, before: String, last: Int, sort: [PaymentTypeOrderBy], filter: PaymentTypeExpression): PaymentTypeConnection
  CreatedByUidUserOnPortfolios(after: String, first: Int, before: String, last: Int, sort: [PortfolioOrderBy], filter: PortfolioExpression): PortfolioConnection!
  ManagerUidUserOnPortfolios(after: String, first: Int, before: String, last: Int, sort: [PortfolioOrderBy], filter: PortfolioExpression): PortfolioConnection!
  ModifiedByUidUserOnPortfolios(after: String, first: Int, before: String, last: Int, sort: [PortfolioOrderBy], filter: PortfolioExpression): PortfolioConnection!
  CreatedByUidUserOnProcesses(after: String, first: Int, before: String, last: Int, sort: [ProcessOrderBy], filter: ProcessExpression): ProcessConnection
  ModifiedByUidUserOnProcesses(after: String, first: Int, before: String, last: Int, sort: [ProcessOrderBy], filter: ProcessExpression): ProcessConnection
  CreatedUidUserOnProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection!
  ModifiedUidUserOnProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection!
  CreatedUidUserOnProductTypes(after: String, first: Int, before: String, last: Int, sort: [ProductTypeOrderBy], filter: ProductTypeExpression): ProductTypeConnection!
  ModifiedUidUserOnProductTypes(after: String, first: Int, before: String, last: Int, sort: [ProductTypeOrderBy], filter: ProductTypeExpression): ProductTypeConnection!
  CreatedUidUserOnProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection!
  ModifiedUidUserOnProjectExpenseSchedules(after: String, first: Int, before: String, last: Int, sort: [ProjectExpenseScheduleOrderBy], filter: ProjectExpenseScheduleExpression): ProjectExpenseScheduleConnection!
  UidUserOnProjectStakeholders(after: String, first: Int, before: String, last: Int, sort: [ProjectStakeholderOrderBy], filter: ProjectStakeholderExpression): ProjectStakeholderConnection!
  CreatedUidUserOnPublishedItems(after: String, first: Int, before: String, last: Int, sort: [PublishedItemOrderBy], filter: PublishedItemExpression): PublishedItemConnection!
  CreatedUidUserOnRecurringScheduleEntries(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleEntryOrderBy], filter: RecurringScheduleEntryExpression): RecurringScheduleEntryConnection!
  ModifiedUidUserOnRecurringScheduleEntries(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleEntryOrderBy], filter: RecurringScheduleEntryExpression): RecurringScheduleEntryConnection!
  CreatedUidUserOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
  ModifiedUidUserOnRecurringSchedules(after: String, first: Int, before: String, last: Int, sort: [RecurringScheduleOrderBy], filter: RecurringScheduleExpression): RecurringScheduleConnection!
  UidUserOnReportDeliveryRecipients(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryRecipientOrderBy], filter: ReportDeliveryRecipientExpression): ReportDeliveryRecipientConnection!
  CreatedUidUserOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
  ModifiedUidUserOnReportDeliverySchedules(after: String, first: Int, before: String, last: Int, sort: [ReportDeliveryScheduleOrderBy], filter: ReportDeliveryScheduleExpression): ReportDeliveryScheduleConnection!
  CreatedUidUserOnReportFolders(after: String, first: Int, before: String, last: Int, sort: [ReportFolderOrderBy], filter: ReportFolderExpression): ReportFolderConnection!
  ModifiedUidUserOnReportFolders(after: String, first: Int, before: String, last: Int, sort: [ReportFolderOrderBy], filter: ReportFolderExpression): ReportFolderConnection
  CompletedUidUserOnRequestWorkflowHistories(after: String, first: Int, before: String, last: Int, sort: [RequestWorkflowHistoryOrderBy], filter: RequestWorkflowHistoryExpression): RequestWorkflowHistoryConnection
  StartedUidUserOnRequestWorkflowHistories(after: String, first: Int, before: String, last: Int, sort: [RequestWorkflowHistoryOrderBy], filter: RequestWorkflowHistoryExpression): RequestWorkflowHistoryConnection
  CreatedUidUserOnResourcePoolManagers(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolManagerOrderBy], filter: ResourcePoolManagerExpression): ResourcePoolManagerConnection!
  ModifiedUidUserOnResourcePoolManagers(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolManagerOrderBy], filter: ResourcePoolManagerExpression): ResourcePoolManagerConnection!
  UidUserOnResourcePoolManagers(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolManagerOrderBy], filter: ResourcePoolManagerExpression): ResourcePoolManagerConnection!
  ManagerUidUserOnResourcePools(after: String, first: Int, before: String, last: Int, sort: [ResourcePoolOrderBy], filter: ResourcePoolExpression): ResourcePoolConnection
  UidUserOnResourceRequestHistories(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestHistoryOrderBy], filter: ResourceRequestHistoryExpression): ResourceRequestHistoryConnection!
  CreatedByUidUserOnResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection!
  RequestedUidUserOnResourceRequests(after: String, first: Int, before: String, last: Int, sort: [ResourceRequestOrderBy], filter: ResourceRequestExpression): ResourceRequestConnection
  CreatedUidUserOnResponseTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateCategoryOrderBy], filter: ResponseTemplateCategoryExpression): ResponseTemplateCategoryConnection!
  ModifiedUidUserOnResponseTemplateCategories(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateCategoryOrderBy], filter: ResponseTemplateCategoryExpression): ResponseTemplateCategoryConnection!
  CreatedUidUserOnResponseTemplates(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateOrderBy], filter: ResponseTemplateExpression): ResponseTemplateConnection!
  ModifiedUidUserOnResponseTemplates(after: String, first: Int, before: String, last: Int, sort: [ResponseTemplateOrderBy], filter: ResponseTemplateExpression): ResponseTemplateConnection!
  CreatedByUidUserOnRisks(after: String, first: Int, before: String, last: Int, sort: [RiskOrderBy], filter: RiskExpression): RiskConnection
  ModifiedByUidUserOnRisks(after: String, first: Int, before: String, last: Int, sort: [RiskOrderBy], filter: RiskExpression): RiskConnection
  CreatedUidUserOnScoreCards(after: String, first: Int, before: String, last: Int, sort: [ScoreCardOrderBy], filter: ScoreCardExpression): ScoreCardConnection!
  ModifiedUidUserOnScoreCards(after: String, first: Int, before: String, last: Int, sort: [ScoreCardOrderBy], filter: ScoreCardExpression): ScoreCardConnection!
  UidUserOnSearches(after: String, first: Int, before: String, last: Int, sort: [SearchOrderBy], filter: SearchExpression): SearchConnection!
  LastRunByUidUserOnSearches(after: String, first: Int, before: String, last: Int, sort: [SearchOrderBy], filter: SearchExpression): SearchConnection
  UidUserOnSearchHistories(after: String, first: Int, before: String, last: Int, sort: [SearchHistoryOrderBy], filter: SearchHistoryExpression): SearchHistoryConnection!
  CreatedUidUserOnServiceCategories(after: String, first: Int, before: String, last: Int, sort: [ServiceCategoryOrderBy], filter: ServiceCategoryExpression): ServiceCategoryConnection!
  ModifiedUidUserOnServiceCategories(after: String, first: Int, before: String, last: Int, sort: [ServiceCategoryOrderBy], filter: ServiceCategoryExpression): ServiceCategoryConnection!
  CreatedByUidUserOnServiceLevelAgreements(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementOrderBy], filter: ServiceLevelAgreementExpression): ServiceLevelAgreementConnection!
  ModifiedByUidUserOnServiceLevelAgreements(after: String, first: Int, before: String, last: Int, sort: [ServiceLevelAgreementOrderBy], filter: ServiceLevelAgreementExpression): ServiceLevelAgreementConnection!
  CreatedUidUserOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection!
  ModifiedUidUserOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection!
  CreatedByUidUserOnShortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection!
  ModifiedByUidUserOnShortcuts(after: String, first: Int, before: String, last: Int, sort: [ShortcutOrderBy], filter: ShortcutExpression): ShortcutConnection!
  CreatedByUidUserOnSolutionCategories(after: String, first: Int, before: String, last: Int, sort: [SolutionCategoryOrderBy], filter: SolutionCategoryExpression): SolutionCategoryConnection!
  ModifiedByUidUserOnSolutionCategories(after: String, first: Int, before: String, last: Int, sort: [SolutionCategoryOrderBy], filter: SolutionCategoryExpression): SolutionCategoryConnection!
  CreatedUidUserOnSolutionRevisions(after: String, first: Int, before: String, last: Int, sort: [SolutionRevisionOrderBy], filter: SolutionRevisionExpression): SolutionRevisionConnection!
  CreatedByUidUserOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
  ModifiedByUidUserOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
  OwnerUidUserOnSolutions(after: String, first: Int, before: String, last: Int, sort: [SolutionOrderBy], filter: SolutionExpression): SolutionConnection!
  UserRefUserOnSourceControlEvents(after: String, first: Int, before: String, last: Int, sort: [SourceControlEventOrderBy], filter: SourceControlEventExpression): SourceControlEventConnection
  CreatedUidUserOnSourceControlUsernames(after: String, first: Int, before: String, last: Int, sort: [SourceControlUsernameOrderBy], filter: SourceControlUsernameExpression): SourceControlUsernameConnection!
  ModifiedUidUserOnSourceControlUsernames(after: String, first: Int, before: String, last: Int, sort: [SourceControlUsernameOrderBy], filter: SourceControlUsernameExpression): SourceControlUsernameConnection!
  UidUserOnSourceControlUsernames(after: String, first: Int, before: String, last: Int, sort: [SourceControlUsernameOrderBy], filter: SourceControlUsernameExpression): SourceControlUsernameConnection!
  ItemCompletedUidUserOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  RequestedUidUserOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  ResponsibleUidUserOnSurveyResponses(after: String, first: Int, before: String, last: Int, sort: [SurveyResponseOrderBy], filter: SurveyResponseExpression): SurveyResponseConnection
  CreatedUidUserOnSurveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection!
  ModifiedUidUserOnSurveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection!
  NotifyAsUidUserOnSurveys(after: String, first: Int, before: String, last: Int, sort: [SurveyOrderBy], filter: SurveyExpression): SurveyConnection
  CreatedByUidUserOnSystems(after: String, first: Int, before: String, last: Int, sort: [SystemOrderBy], filter: SystemExpression): SystemConnection
  ModifiedByUidUserOnSystems(after: String, first: Int, before: String, last: Int, sort: [SystemOrderBy], filter: SystemExpression): SystemConnection
  CreatedUidUserOnTags(after: String, first: Int, before: String, last: Int, sort: [TagOrderBy], filter: TagExpression): TagConnection!
  ModifiedUidUserOnTags(after: String, first: Int, before: String, last: Int, sort: [TagOrderBy], filter: TagExpression): TagConnection!
  CreatedUidUserOnTicketArchiveProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketArchiveProfileOrderBy], filter: TicketArchiveProfileExpression): TicketArchiveProfileConnection!
  ModifiedUidUserOnTicketArchiveProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketArchiveProfileOrderBy], filter: TicketArchiveProfileExpression): TicketArchiveProfileConnection!
  AssigninUserOnTicketAssignmentHistories(after: String, first: Int, before: String, last: Int, sort: [TicketAssignmentHistoryOrderBy], filter: TicketAssignmentHistoryExpression): TicketAssignmentHistoryConnection!
  ResponsibleUserUserOnTicketAssignmentHistories(after: String, first: Int, before: String, last: Int, sort: [TicketAssignmentHistoryOrderBy], filter: TicketAssignmentHistoryExpression): TicketAssignmentHistoryConnection!
  ContactUidUserOnTicketContacts(after: String, first: Int, before: String, last: Int, sort: [TicketContactOrderBy], filter: TicketContactExpression): TicketContactConnection!
  CreatedUidUserOnTicketContacts(after: String, first: Int, before: String, last: Int, sort: [TicketContactOrderBy], filter: TicketContactExpression): TicketContactConnection!
  ResponsibleUidUserOnTicketCreationProfiles(after: String, first: Int, before: String, last: Int, sort: [TicketCreationProfileOrderBy], filter: TicketCreationProfileExpression): TicketCreationProfileConnection
  CreatedForUidUserOnTicketCreationScheduleHistories(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleHistoryOrderBy], filter: TicketCreationScheduleHistoryExpression): TicketCreationScheduleHistoryConnection!
  CreatedUidUserOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  RequestorUidUserOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  ResponsibleUidUserOnTicketCreationSchedules(after: String, first: Int, before: String, last: Int, sort: [TicketCreationScheduleOrderBy], filter: TicketCreationScheduleExpression): TicketCreationScheduleConnection!
  AssignedInitialUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  AssignedPreviousUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  CancelledUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  ClosedByUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  ContactUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  CreatedByUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  LastModifiedByUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection!
  RespondedUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  ResponsibleUidUserOnTickets(after: String, first: Int, before: String, last: Int, sort: [TicketOrderBy], filter: TicketExpression): TicketConnection
  CreatedByUidUserOnTicketStatusHistories(after: String, first: Int, before: String, last: Int, sort: [TicketStatusHistoryOrderBy], filter: TicketStatusHistoryExpression): TicketStatusHistoryConnection!
  CreatedByUidUserOnTicketTaskConversions(after: String, first: Int, before: String, last: Int, sort: [TicketTaskConversionOrderBy], filter: TicketTaskConversionExpression): TicketTaskConversionConnection!
  CreatedByUidUserOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection!
  CompletedByUidUserOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  ModifiedByUidUserOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  ResponsibleUidUserOnTicketTasks(after: String, first: Int, before: String, last: Int, sort: [TicketTaskOrderBy], filter: TicketTaskExpression): TicketTaskConnection
  CreatedByUidUserOnTicketTaskTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTemplateOrderBy], filter: TicketTaskTemplateExpression): TicketTaskTemplateConnection!
  ModifiedUidUserOnTicketTaskTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTaskTemplateOrderBy], filter: TicketTaskTemplateExpression): TicketTaskTemplateConnection!
  CreatedByUidUserOnTicketTemplates(after: String, first: Int, before: String, last: Int, sort: [TicketTemplateOrderBy], filter: TicketTemplateExpression): TicketTemplateConnection!
  UidUserOnTimeAcctCodeLimits(after: String, first: Int, before: String, last: Int, sort: [TimeAcctCodeLimitOrderBy], filter: TimeAcctCodeLimitExpression): TimeAcctCodeLimitConnection!
  UidUserOnTimeReportAlerts(after: String, first: Int, before: String, last: Int, sort: [TimeReportAlertOrderBy], filter: TimeReportAlertExpression): TimeReportAlertConnection!
  UidUserOnTodos(after: String, first: Int, before: String, last: Int, sort: [TodoOrderBy], filter: TodoExpression): TodoConnection!
  CreatedByUidUserOnTypeCategories(after: String, first: Int, before: String, last: Int, sort: [TypeCategoryOrderBy], filter: TypeCategoryExpression): TypeCategoryConnection!
  ModifiedByUidUserOnTypeCategories(after: String, first: Int, before: String, last: Int, sort: [TypeCategoryOrderBy], filter: TypeCategoryExpression): TypeCategoryConnection!
  CreatedByUidUserOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection!
  ModifiedUidUserOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection!
  ResponsibleUidUserOnTypesTasks(after: String, first: Int, before: String, last: Int, sort: [TypesTaskOrderBy], filter: TypesTaskExpression): TypesTaskConnection
  SenderUserUserOnUnprocessedNotifications(after: String, first: Int, before: String, last: Int, sort: [UnprocessedNotificationOrderBy], filter: UnprocessedNotificationExpression): UnprocessedNotificationConnection!
  UidUserOnUserActivationLogs(after: String, first: Int, before: String, last: Int, sort: [UserActivationLogOrderBy], filter: UserActivationLogExpression): UserActivationLogConnection
  UserOnUserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection!
  CreatedUUserOnUserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection!
  ModifiedUUserOnUserApplications(after: String, first: Int, before: String, last: Int, sort: [UserApplicationOrderBy], filter: UserApplicationExpression): UserApplicationConnection!
  UidUserOnUserDownloads(after: String, first: Int, before: String, last: Int, sort: [UserDownloadOrderBy], filter: UserDownloadExpression): UserDownloadConnection!
  UidUserOnUserGroups(after: String, first: Int, before: String, last: Int, sort: [UserGroupOrderBy], filter: UserGroupExpression): UserGroupConnection!
  UidUserOnUserIntegrationSettings(after: String, first: Int, before: String, last: Int, sort: [UserIntegrationSettingOrderBy], filter: UserIntegrationSettingExpression): UserIntegrationSettingConnection!
  UidUserOnUserLoginHistories(after: String, first: Int, before: String, last: Int, sort: [UserLoginHistoryOrderBy], filter: UserLoginHistoryExpression): UserLoginHistoryConnection
  UidUserOnUserPhoneNumbers(after: String, first: Int, before: String, last: Int, sort: [UserPhoneNumberOrderBy], filter: UserPhoneNumberExpression): UserPhoneNumberConnection!
  UserOnUserPinEntryFailures(after: String, first: Int, before: String, last: Int, sort: [UserPinEntryFailureOrderBy], filter: UserPinEntryFailureExpression): UserPinEntryFailureConnection!
  UserOnUserPins(after: String, first: Int, before: String, last: Int, sort: [UserPinOrderBy], filter: UserPinExpression): UserPinConnection!
  TemplateUidUserOnUserRegistrationProfiles(after: String, first: Int, before: String, last: Int, sort: [UserRegistrationProfileOrderBy], filter: UserRegistrationProfileExpression): UserRegistrationProfileConnection
  UidUserOnUserReports(after: String, first: Int, before: String, last: Int, sort: [UserReportOrderBy], filter: UserReportExpression): UserReportConnection!
  UidUserOnUsersClientAcctCodes(after: String, first: Int, before: String, last: Int, sort: [UsersClientAcctCodeOrderBy], filter: UsersClientAcctCodeExpression): UsersClientAcctCodeConnection!
  CreatedUidUserOnVendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection!
  ModifiedUidUserOnVendors(after: String, first: Int, before: String, last: Int, sort: [VendorOrderBy], filter: VendorExpression): VendorConnection!
  CreatedByUserUserOnWebhooks(after: String, first: Int, before: String, last: Int, sort: [WebhookOrderBy], filter: WebhookExpression): WebhookConnection!
  ModifiedByUserUserOnWebhooks(after: String, first: Int, before: String, last: Int, sort: [WebhookOrderBy], filter: WebhookExpression): WebhookConnection!
  CreatedUidUserOnWebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection!
  ModifiedUidUserOnWebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection!
  CreatedUidUserOnWebServiceMethods(after: String, first: Int, before: String, last: Int, sort: [WebServiceMethodOrderBy], filter: WebServiceMethodExpression): WebServiceMethodConnection!
  ModifiedUidUserOnWebServiceMethods(after: String, first: Int, before: String, last: Int, sort: [WebServiceMethodOrderBy], filter: WebServiceMethodExpression): WebServiceMethodConnection!
  CreatedUidUserOnWebServices(after: String, first: Int, before: String, last: Int, sort: [WebServiceOrderBy], filter: WebServiceExpression): WebServiceConnection!
  ModifiedUidUserOnWebServices(after: String, first: Int, before: String, last: Int, sort: [WebServiceOrderBy], filter: WebServiceExpression): WebServiceConnection!
  CreatedUidUserOnWorkflowDrafts(after: String, first: Int, before: String, last: Int, sort: [WorkflowDraftOrderBy], filter: WorkflowDraftExpression): WorkflowDraftConnection!
  StatusUidUserOnWorkflowHistoryNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowHistoryNewOrderBy], filter: WorkflowHistoryNewExpression): WorkflowHistoryNewConnection!
  CreatedUidUserOnWorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection!
  ModifiedUidUserOnWorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection!
  CreatedUidUserOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection!
  ModifiedUidUserOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection!
  CreatedUidUserOnWorkflowStatuses(after: String, first: Int, before: String, last: Int, sort: [WorkflowStatusOrderBy], filter: WorkflowStatusExpression): WorkflowStatusConnection
  ModifiedUidUserOnWorkflowStatuses(after: String, first: Int, before: String, last: Int, sort: [WorkflowStatusOrderBy], filter: WorkflowStatusExpression): WorkflowStatusConnection
}

type UserActivationLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User
  Uid: ID
  IsActive: Boolean
  Date: DateTime
}

"""A connection to a list of items."""
type UserActivationLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserActivationLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserActivationLogEdge {
  """The item at the end of the edge"""
  node: UserActivationLog

  """A cursor for use in pagination"""
  cursor: String!
}

input UserActivationLogExpression {
  operator: Operator!
  operands: [UserActivationLogOperand]!
}

enum UserActivationLogField {
  id
  Id
  Uid
  IsActive
  Date
}

input UserActivationLogOperand {
  field: UserActivationLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserActivationLogExpression
}

input UserActivationLogOrderBy {
  field: UserActivationLogField
  direction: OrderByDirection = Ascending
}

type UserAgent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  AgentString: String!
  UaUserAgentOnUserLoginHistories(after: String, first: Int, before: String, last: Int, sort: [UserLoginHistoryOrderBy], filter: UserLoginHistoryExpression): UserLoginHistoryConnection!
}

"""A connection to a list of items."""
type UserAgentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAgentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserAgentEdge {
  """The item at the end of the edge"""
  node: UserAgent

  """A cursor for use in pagination"""
  cursor: String!
}

input UserAgentExpression {
  operator: Operator!
  operands: [UserAgentOperand]!
}

enum UserAgentField {
  id
  Id
  AgentString
}

input UserAgentOperand {
  field: UserAgentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserAgentExpression
}

input UserAgentOrderBy {
  field: UserAgentField
  direction: OrderByDirection = Ascending
}

type UserApplication implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppId: Int!
  User: User!
  UserId: Int!
  CreatedDateUtc: DateTime!
  CreatedUUser: User!
  CreatedUid: Int!
  ModifiedDateUtc: DateTime!
  ModifiedUUser: User!
  ModifiedUid: Int!
  SecurityRoleRole: Role
  SecurityRoleId: ID
  IsAdministrator: Boolean!
}

"""A connection to a list of items."""
type UserApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserApplicationEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserApplicationEdge {
  """The item at the end of the edge"""
  node: UserApplication

  """A cursor for use in pagination"""
  cursor: String!
}

input UserApplicationExpression {
  operator: Operator!
  operands: [UserApplicationOperand]!
}

enum UserApplicationField {
  id
  Id
  BeidInt
  AppId
  UserId
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  SecurityRoleId
  IsAdministrator
}

input UserApplicationOperand {
  field: UserApplicationField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserApplicationExpression
}

input UserApplicationOrderBy {
  field: UserApplicationField
  direction: OrderByDirection = Ascending
}

type UserCapacityView implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  UserUid: ID!
  UserBeid: ID!
  UserWorkableHours: Float
  UserIsActive: Boolean!
  TsdDate: DateTime!
}

"""A connection to a list of items."""
type UserCapacityViewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserCapacityViewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserCapacityViewEdge {
  """The item at the end of the edge"""
  node: UserCapacityView

  """A cursor for use in pagination"""
  cursor: String!
}

input UserCapacityViewExpression {
  operator: Operator!
  operands: [UserCapacityViewOperand]!
}

enum UserCapacityViewField {
  id
  UserUid
  UserBeid
  UserWorkableHours
  UserIsActive
  TsdDate
}

type UserCapacityViewMonth implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  UserUid: ID!
  UserBeid: ID!
  UserIsActive: Boolean!
  UserFullName: String
  UserReportsToUid: ID
  UserIsEmployee: Boolean
  UserResourcePoolId: Int
  UserDefaultRate: Decimal
  UserIsCapacityManaged: Boolean!
  PrimaryFunctionalRoleId: Int!
  PrimaryFunctionalRoleName: String!
  TYear: Int!
  TMonth: Int!
  YearMonth: Int!
  WorkableHours: Float
}

"""A connection to a list of items."""
type UserCapacityViewMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserCapacityViewMonthEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserCapacityViewMonthEdge {
  """The item at the end of the edge"""
  node: UserCapacityViewMonth

  """A cursor for use in pagination"""
  cursor: String!
}

input UserCapacityViewMonthExpression {
  operator: Operator!
  operands: [UserCapacityViewMonthOperand]!
}

enum UserCapacityViewMonthField {
  id
  UserUid
  UserBeid
  UserIsActive
  UserFullName
  UserReportsToUid
  UserIsEmployee
  UserResourcePoolId
  UserDefaultRate
  UserIsCapacityManaged
  PrimaryFunctionalRoleId
  PrimaryFunctionalRoleName
  TYear
  TMonth
  YearMonth
  WorkableHours
}

input UserCapacityViewMonthOperand {
  field: UserCapacityViewMonthField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserCapacityViewMonthExpression
}

input UserCapacityViewMonthOrderBy {
  field: UserCapacityViewMonthField
  direction: OrderByDirection = Ascending
}

input UserCapacityViewOperand {
  field: UserCapacityViewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserCapacityViewExpression
}

input UserCapacityViewOrderBy {
  field: UserCapacityViewField
  direction: OrderByDirection = Ascending
}

type UserCapacityViewWeek implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  UserUid: ID!
  UserBeid: ID!
  UserIsActive: Boolean!
  UserFullName: String
  UserReportsToUid: ID
  UserIsEmployee: Boolean
  UserResourcePoolId: Int
  UserDefaultRate: Decimal
  UserIsCapacityManaged: Boolean!
  PrimaryFunctionalRoleId: Int!
  PrimaryFunctionalRoleName: String!
  TYear: Int!
  TWeek: Int!
  YearWeek: Int!
  WorkableHours: Float
}

"""A connection to a list of items."""
type UserCapacityViewWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserCapacityViewWeekEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserCapacityViewWeekEdge {
  """The item at the end of the edge"""
  node: UserCapacityViewWeek

  """A cursor for use in pagination"""
  cursor: String!
}

input UserCapacityViewWeekExpression {
  operator: Operator!
  operands: [UserCapacityViewWeekOperand]!
}

enum UserCapacityViewWeekField {
  id
  UserUid
  UserBeid
  UserIsActive
  UserFullName
  UserReportsToUid
  UserIsEmployee
  UserResourcePoolId
  UserDefaultRate
  UserIsCapacityManaged
  PrimaryFunctionalRoleId
  PrimaryFunctionalRoleName
  TYear
  TWeek
  YearWeek
  WorkableHours
}

input UserCapacityViewWeekOperand {
  field: UserCapacityViewWeekField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserCapacityViewWeekExpression
}

input UserCapacityViewWeekOrderBy {
  field: UserCapacityViewWeekField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type UserDownload implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User!
  Uid: ID!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  Download: Download!
  DownloadId: Int!
  CreatedDateUtc: DateTime!
}

"""A connection to a list of items."""
type UserDownloadConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserDownloadEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserDownloadEdge {
  """The item at the end of the edge"""
  node: UserDownload

  """A cursor for use in pagination"""
  cursor: String!
}

input UserDownloadExpression {
  operator: Operator!
  operands: [UserDownloadOperand]!
}

enum UserDownloadField {
  id
  Id
  Uid
  BeidInt
  DownloadId
  CreatedDateUtc
}

input UserDownloadOperand {
  field: UserDownloadField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserDownloadExpression
}

input UserDownloadOrderBy {
  field: UserDownloadField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

input UserExpression {
  operator: Operator!
  operands: [UserOperand]!
}

enum UserField {
  id
  Guid
  BeId
  Id
  TypeId
  IsActive
  Name
  Password
  AuthProviderId
  AuthProviderUsername
  FName
  LName
  MiddleName
  Nickname
  Salutation
  DefaultAccountId
  Company
  Title
  Gender
  PrimaryEmail
  AlternateEmail
  AlertEmail
  TzId
  Zip
  JoinDate
  LastUpdate
  LoggedOn
  LastLogon
  LastLogoff
  PrimaryPhone
  PreferredPhone
  HomePhone
  WorkPhone
  Pager
  MobilePhone
  Fax
  OthrPhone
  HAddr
  HCity
  HState
  HZip
  HCntry
  WAddr
  WCity
  WState
  WZip
  WCntry
  BDay
  ImProvider
  ImHandle
  ProfileImageFileName
  RoleId
  PriFunctionalRoleId
  ResourcePoolId
  IsEmployee
  DefaultRate
  CostRate
  WorkableHours
  ShouldReportTime
  ReportsToUid
  ReportTimeAfterDate
  TextStatus
  InvalidLoginCount
  LockedOut
  LockedOutDate
  CalView
  PublicCal
  CalendarPassKey
  ShowSummaryOnStartup
  AllowStatusUpdateAlerts
  TabSession
  ExternalId
  AlternateId
  DefaultPriorityId
  FullName
  ModifiedUid
  ModifiedDateUtc
  EndDate
  PrimaryGroupId
  PasswordVersion
  PasswordHash
  ShowAccomplishments
  IsCapacityManaged
  AboutMe
  IsUserOrCustomer
  IsPhantom
}

type UserGroup implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  GrpGroup: Group!
  GrpId: Int!
  UidUser: User!
  Uid: ID!
  CreatedDate: DateTime!
  IsGroupNotified: Boolean!
  IsManager: Boolean!
}

"""A connection to a list of items."""
type UserGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGroupEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserGroupEdge {
  """The item at the end of the edge"""
  node: UserGroup

  """A cursor for use in pagination"""
  cursor: String!
}

input UserGroupExpression {
  operator: Operator!
  operands: [UserGroupOperand]!
}

enum UserGroupField {
  id
  Id
  GrpId
  Uid
  CreatedDate
  IsGroupNotified
  IsManager
}

input UserGroupOperand {
  field: UserGroupField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserGroupExpression
}

input UserGroupOrderBy {
  field: UserGroupField
  direction: OrderByDirection = Ascending
}

type UserGroupsLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeidInt: Int!
  GroupId: Int!
  Uid: ID!
  IsMember: Boolean!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ClientIpAddress: Buffer
}

"""A connection to a list of items."""
type UserGroupsLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserGroupsLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserGroupsLogEdge {
  """The item at the end of the edge"""
  node: UserGroupsLog

  """A cursor for use in pagination"""
  cursor: String!
}

input UserGroupsLogExpression {
  operator: Operator!
  operands: [UserGroupsLogOperand]!
}

enum UserGroupsLogField {
  id
  Id
  BeidInt
  GroupId
  Uid
  IsMember
  CreatedUid
  CreatedDateUtc
  ClientIpAddress
}

input UserGroupsLogOperand {
  field: UserGroupsLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserGroupsLogExpression
}

input UserGroupsLogOrderBy {
  field: UserGroupsLogField
  direction: OrderByDirection = Ascending
}

type UserIntegrationSetting implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Integration: Integration!
  IntegrationId: Int!
  UidUser: User!
  Uid: ID!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
  EncSettingsJson: String!
}

"""A connection to a list of items."""
type UserIntegrationSettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserIntegrationSettingEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserIntegrationSettingEdge {
  """The item at the end of the edge"""
  node: UserIntegrationSetting

  """A cursor for use in pagination"""
  cursor: String!
}

input UserIntegrationSettingExpression {
  operator: Operator!
  operands: [UserIntegrationSettingOperand]!
}

enum UserIntegrationSettingField {
  id
  Id
  Beid
  IntegrationId
  Uid
  CreatedDateUtc
  ModifiedDateUtc
  EncSettingsJson
}

input UserIntegrationSettingOperand {
  field: UserIntegrationSettingField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserIntegrationSettingExpression
}

input UserIntegrationSettingOrderBy {
  field: UserIntegrationSettingField
  direction: OrderByDirection = Ascending
}

type UserLoginHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  UidUser: User
  Uid: ID
  UserName: String
  Date: DateTime!
  App: String!
  ClientIp: String
  IsValid: Boolean
  UaUserAgent: UserAgent!
  Uaid: Int!
}

"""A connection to a list of items."""
type UserLoginHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserLoginHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserLoginHistoryEdge {
  """The item at the end of the edge"""
  node: UserLoginHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input UserLoginHistoryExpression {
  operator: Operator!
  operands: [UserLoginHistoryOperand]!
}

enum UserLoginHistoryField {
  id
  Id
  Uid
  UserName
  Date
  App
  ClientIp
  IsValid
  Uaid
}

input UserLoginHistoryOperand {
  field: UserLoginHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserLoginHistoryExpression
}

input UserLoginHistoryOrderBy {
  field: UserLoginHistoryField
  direction: OrderByDirection = Ascending
}

type Username implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Uid: ID!
  Beid: ID
  Username: String!
}

"""A connection to a list of items."""
type UsernameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsernameEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UsernameEdge {
  """The item at the end of the edge"""
  node: Username

  """A cursor for use in pagination"""
  cursor: String!
}

input UsernameExpression {
  operator: Operator!
  operands: [UsernameOperand]!
}

enum UsernameField {
  id
  Uid
  Beid
  Username
}

input UsernameOperand {
  field: UsernameField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UsernameExpression
}

input UsernameOrderBy {
  field: UsernameField
  direction: OrderByDirection = Ascending
}

input UserOperand {
  field: UserField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserExpression
}

input UserOrderBy {
  field: UserField
  direction: OrderByDirection = Ascending
}

type UserPhoneNumber implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  UidUser: User!
  Uid: ID!
  TypeId: Int!
  FormattedValue: String!
  NumericValue: String!
  CreatedDateUtc: DateTime!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUid: ID!
}

"""A connection to a list of items."""
type UserPhoneNumberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPhoneNumberEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserPhoneNumberEdge {
  """The item at the end of the edge"""
  node: UserPhoneNumber

  """A cursor for use in pagination"""
  cursor: String!
}

input UserPhoneNumberExpression {
  operator: Operator!
  operands: [UserPhoneNumberOperand]!
}

enum UserPhoneNumberField {
  id
  Id
  BeidInt
  Uid
  TypeId
  FormattedValue
  NumericValue
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
}

input UserPhoneNumberOperand {
  field: UserPhoneNumberField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserPhoneNumberExpression
}

input UserPhoneNumberOrderBy {
  field: UserPhoneNumberField
  direction: OrderByDirection = Ascending
}

type UserPin implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  User: User!
  UserId: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  PinHash: String!
  CreatedDateUtc: DateTime!
  LockoutCounter: Int!
  LockoutCounterDateUtc: DateTime
}

"""A connection to a list of items."""
type UserPinConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPinEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserPinEdge {
  """The item at the end of the edge"""
  node: UserPin

  """A cursor for use in pagination"""
  cursor: String!
}

type UserPinEntryFailure implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  User: User!
  UserId: Int!
  Attribute: Attribute!
  AttributeId: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  FailureDateUtc: DateTime!
  IpAddress: Buffer!
}

"""A connection to a list of items."""
type UserPinEntryFailureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPinEntryFailureEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserPinEntryFailureEdge {
  """The item at the end of the edge"""
  node: UserPinEntryFailure

  """A cursor for use in pagination"""
  cursor: String!
}

input UserPinEntryFailureExpression {
  operator: Operator!
  operands: [UserPinEntryFailureOperand]!
}

enum UserPinEntryFailureField {
  id
  Id
  UserId
  AttributeId
  BeidInt
  FailureDateUtc
  IpAddress
}

input UserPinEntryFailureOperand {
  field: UserPinEntryFailureField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserPinEntryFailureExpression
}

input UserPinEntryFailureOrderBy {
  field: UserPinEntryFailureField
  direction: OrderByDirection = Ascending
}

input UserPinExpression {
  operator: Operator!
  operands: [UserPinOperand]!
}

enum UserPinField {
  id
  UserId
  BeidInt
  PinHash
  CreatedDateUtc
  LockoutCounter
  LockoutCounterDateUtc
}

input UserPinOperand {
  field: UserPinField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserPinExpression
}

input UserPinOrderBy {
  field: UserPinField
  direction: OrderByDirection = Ascending
}

type UserRegistrationProfile implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Order: Float!
  IsActive: Boolean!
  AuthProvider: AuthProvider
  AuthProviderId: Int
  UsernameSuffix: String!
  TemplateUidUser: User
  TemplateUid: ID
  Desktop: Desktop
  DesktopId: ID
  UseSsoSettings: Boolean!
  SsoFilterAttributeName: String
  SsoFilterAttributeValue: String
}

"""A connection to a list of items."""
type UserRegistrationProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRegistrationProfileEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserRegistrationProfileEdge {
  """The item at the end of the edge"""
  node: UserRegistrationProfile

  """A cursor for use in pagination"""
  cursor: String!
}

input UserRegistrationProfileExpression {
  operator: Operator!
  operands: [UserRegistrationProfileOperand]!
}

enum UserRegistrationProfileField {
  id
  Id
  Beid
  Name
  Order
  IsActive
  AuthProviderId
  UsernameSuffix
  TemplateUid
  DesktopId
  UseSsoSettings
  SsoFilterAttributeName
  SsoFilterAttributeValue
}

input UserRegistrationProfileOperand {
  field: UserRegistrationProfileField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserRegistrationProfileExpression
}

input UserRegistrationProfileOrderBy {
  field: UserRegistrationProfileField
  direction: OrderByDirection = Ascending
}

type UserReport implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  ReportId: Int!
  UidUser: User!
  Uid: ID!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  ShowInNav: Boolean!
  Component: Component!
  ComponentId: Int!
}

"""A connection to a list of items."""
type UserReportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserReportEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserReportEdge {
  """The item at the end of the edge"""
  node: UserReport

  """A cursor for use in pagination"""
  cursor: String!
}

input UserReportExpression {
  operator: Operator!
  operands: [UserReportOperand]!
}

enum UserReportField {
  id
  Id
  ReportId
  Uid
  BeidInt
  ShowInNav
  ComponentId
}

input UserReportOperand {
  field: UserReportField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserReportExpression
}

input UserReportOrderBy {
  field: UserReportField
  direction: OrderByDirection = Ascending
}

type UsersClientAcctCode implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  CacClientAcctCode: ClientAcctCode!
  Cacid: Int!
  UidUser: User!
  Uid: ID!
  DateCreated: DateTime!
}

"""A connection to a list of items."""
type UsersClientAcctCodeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersClientAcctCodeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UsersClientAcctCodeEdge {
  """The item at the end of the edge"""
  node: UsersClientAcctCode

  """A cursor for use in pagination"""
  cursor: String!
}

input UsersClientAcctCodeExpression {
  operator: Operator!
  operands: [UsersClientAcctCodeOperand]!
}

enum UsersClientAcctCodeField {
  id
  Id
  Cacid
  Uid
  DateCreated
}

input UsersClientAcctCodeOperand {
  field: UsersClientAcctCodeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UsersClientAcctCodeExpression
}

input UsersClientAcctCodeOrderBy {
  field: UsersClientAcctCodeField
  direction: OrderByDirection = Ascending
}

type UsersLastActivity implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  BeidInt: Int!
  UserId: Int!
  LastActivityDateUtc: DateTime!
}

"""A connection to a list of items."""
type UsersLastActivityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersLastActivityEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UsersLastActivityEdge {
  """The item at the end of the edge"""
  node: UsersLastActivity

  """A cursor for use in pagination"""
  cursor: String!
}

input UsersLastActivityExpression {
  operator: Operator!
  operands: [UsersLastActivityOperand]!
}

enum UsersLastActivityField {
  id
  BeidInt
  UserId
  LastActivityDateUtc
}

input UsersLastActivityOperand {
  field: UsersLastActivityField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UsersLastActivityExpression
}

input UsersLastActivityOrderBy {
  field: UsersLastActivityField
  direction: OrderByDirection = Ascending
}

type UserStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  UserId: Int!
  BeidInt: Int!
  LastActivity: DateTime!
}

"""A connection to a list of items."""
type UserStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserStatusEdge {
  """The item at the end of the edge"""
  node: UserStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input UserStatusExpression {
  operator: Operator!
  operands: [UserStatusOperand]!
}

enum UserStatusField {
  id
  UserId
  BeidInt
  LastActivity
}

input UserStatusOperand {
  field: UserStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserStatusExpression
}

input UserStatusOrderBy {
  field: UserStatusField
  direction: OrderByDirection = Ascending
}

type UserType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeUserTypeOnUsers(after: String, first: Int, before: String, last: Int, sort: [UserOrderBy], filter: UserExpression): UserConnection!
}

"""A connection to a list of items."""
type UserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type UserTypeEdge {
  """The item at the end of the edge"""
  node: UserType

  """A cursor for use in pagination"""
  cursor: String!
}

input UserTypeExpression {
  operator: Operator!
  operands: [UserTypeOperand]!
}

enum UserTypeField {
  id
  Id
  Name
}

input UserTypeOperand {
  field: UserTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: UserTypeExpression
}

input UserTypeOrderBy {
  field: UserTypeField
  direction: OrderByDirection = Ascending
}

type ValidationType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  ValidationTypeOnAttributes(after: String, first: Int, before: String, last: Int, sort: [AttributeOrderBy], filter: AttributeExpression): AttributeConnection!
}

"""A connection to a list of items."""
type ValidationTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ValidationTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type ValidationTypeEdge {
  """The item at the end of the edge"""
  node: ValidationType

  """A cursor for use in pagination"""
  cursor: String!
}

input ValidationTypeExpression {
  operator: Operator!
  operands: [ValidationTypeOperand]!
}

enum ValidationTypeField {
  id
  Id
  Name
}

input ValidationTypeOperand {
  field: ValidationTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: ValidationTypeExpression
}

input ValidationTypeOrderBy {
  field: ValidationTypeField
  direction: OrderByDirection = Ascending
}

type Vendor implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  Beid: ID!
  Name: String!
  Description: String
  IsManufacturer: Boolean!
  IsSupplier: Boolean!
  IsContractProvider: Boolean!
  OrgAcctNumber: String
  ContactContactInformation: ContactInformation!
  ContactId: Int!
  PersonContactContactInformation: ContactInformation!
  PersonContactId: Int!
  ContactName: String
  ContactTitle: String
  ContactDepartment: String
  ContactEmail: String
  CreatedDate: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDate: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  IsActive: Boolean!
  AppId: Int!
  SupplierVendorOnAssets(after: String, first: Int, before: String, last: Int, sort: [AssetOrderBy], filter: AssetExpression): AssetConnection!
  ProviderVendorOnContracts(after: String, first: Int, before: String, last: Int, sort: [ContractOrderBy], filter: ContractExpression): ContractConnection!
  ManufacturerVendorOnProductModels(after: String, first: Int, before: String, last: Int, sort: [ProductModelOrderBy], filter: ProductModelExpression): ProductModelConnection!
}

"""A connection to a list of items."""
type VendorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VendorEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type VendorEdge {
  """The item at the end of the edge"""
  node: Vendor

  """A cursor for use in pagination"""
  cursor: String!
}

input VendorExpression {
  operator: Operator!
  operands: [VendorOperand]!
}

enum VendorField {
  id
  Id
  Beid
  Name
  Description
  IsManufacturer
  IsSupplier
  IsContractProvider
  OrgAcctNumber
  ContactId
  PersonContactId
  ContactName
  ContactTitle
  ContactDepartment
  ContactEmail
  CreatedDate
  CreatedUid
  ModifiedDate
  ModifiedUid
  IsActive
  AppId
}

input VendorOperand {
  field: VendorField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: VendorExpression
}

input VendorOrderBy {
  field: VendorField
  direction: OrderByDirection = Ascending
}

type VersionHistory implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  FileName: String!
  DateApplied: DateTime!
  Major: Int!
  Minor: Int!
  Build: Int!
  Revision: Int!
}

"""A connection to a list of items."""
type VersionHistoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VersionHistoryEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type VersionHistoryEdge {
  """The item at the end of the edge"""
  node: VersionHistory

  """A cursor for use in pagination"""
  cursor: String!
}

input VersionHistoryExpression {
  operator: Operator!
  operands: [VersionHistoryOperand]!
}

enum VersionHistoryField {
  id
  Id
  FileName
  DateApplied
  Major
  Minor
  Build
  Revision
}

input VersionHistoryOperand {
  field: VersionHistoryField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: VersionHistoryExpression
}

input VersionHistoryOrderBy {
  field: VersionHistoryField
  direction: OrderByDirection = Ascending
}

type Webhook implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BillableEntityBillableEntity: BillableEntity!
  BillableEntityId: Int!
  Application: Application!
  ApplicationId: Int!
  Name: String!
  Description: String
  PayloadUrl: String!
  Secret: String
  ContentType: String!
  SslVerificationEnabled: Boolean!
  AllComponentEventsSelected: Boolean!
  IsActive: Boolean!
  CreatedDate: DateTime!
  CreatedByUserUser: User!
  CreatedByUserId: Int!
  ModifiedDate: DateTime!
  ModifiedByUserUser: User!
  ModifiedByUserId: Int!
  WebhookOnWebhookComponents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentOrderBy], filter: WebhookComponentExpression): WebhookComponentConnection!
}

type WebhookCall implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BillableEntityBillableEntity: BillableEntity!
  BillableEntityId: Int!
  ResentWebhookCallWebhookCall: WebhookCall
  ResentWebhookCallId: Int
  WebhookComponentEvent: WebhookComponentEvent!
  WebhookComponentEventId: Int!
  OccurredOn: DateTime!
  PayloadUrl: String!
  Payload: String!
  ResponseCode: String!
  TimeoutOccurred: Boolean!
  Response: String!
  ResentWebhookCallWebhookCallOnWebhookCalls(after: String, first: Int, before: String, last: Int, sort: [WebhookCallOrderBy], filter: WebhookCallExpression): WebhookCallConnection
}

"""A connection to a list of items."""
type WebhookCallConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookCallEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookCallEdge {
  """The item at the end of the edge"""
  node: WebhookCall

  """A cursor for use in pagination"""
  cursor: String!
}

input WebhookCallExpression {
  operator: Operator!
  operands: [WebhookCallOperand]!
}

enum WebhookCallField {
  id
  Id
  BillableEntityId
  ResentWebhookCallId
  WebhookComponentEventId
  OccurredOn
  PayloadUrl
  Payload
  ResponseCode
  TimeoutOccurred
  Response
}

input WebhookCallOperand {
  field: WebhookCallField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookCallExpression
}

input WebhookCallOrderBy {
  field: WebhookCallField
  direction: OrderByDirection = Ascending
}

type WebhookComponent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BillableEntityBillableEntity: BillableEntity!
  BillableEntityId: Int!
  Webhook: Webhook!
  WebhookId: Int!
  Component: Component!
  ComponentId: Int!
  WebhookComponentOnWebhookComponentEvents(after: String, first: Int, before: String, last: Int, sort: [WebhookComponentEventOrderBy], filter: WebhookComponentEventExpression): WebhookComponentEventConnection!
}

"""A connection to a list of items."""
type WebhookComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookComponentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookComponentEdge {
  """The item at the end of the edge"""
  node: WebhookComponent

  """A cursor for use in pagination"""
  cursor: String!
}

type WebhookComponentEvent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BillableEntityBillableEntity: BillableEntity!
  BillableEntityId: Int!
  WebhookComponent: WebhookComponent!
  WebhookComponentId: Int!
  EventType: String!
  IsSelected: Boolean!
  WebhookComponentEventOnWebhookCalls(after: String, first: Int, before: String, last: Int, sort: [WebhookCallOrderBy], filter: WebhookCallExpression): WebhookCallConnection!
}

"""A connection to a list of items."""
type WebhookComponentEventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookComponentEventEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookComponentEventEdge {
  """The item at the end of the edge"""
  node: WebhookComponentEvent

  """A cursor for use in pagination"""
  cursor: String!
}

input WebhookComponentEventExpression {
  operator: Operator!
  operands: [WebhookComponentEventOperand]!
}

enum WebhookComponentEventField {
  id
  Id
  BillableEntityId
  WebhookComponentId
  EventType
  IsSelected
}

input WebhookComponentEventOperand {
  field: WebhookComponentEventField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookComponentEventExpression
}

input WebhookComponentEventOrderBy {
  field: WebhookComponentEventField
  direction: OrderByDirection = Ascending
}

input WebhookComponentExpression {
  operator: Operator!
  operands: [WebhookComponentOperand]!
}

enum WebhookComponentField {
  id
  Id
  BillableEntityId
  WebhookId
  ComponentId
}

input WebhookComponentOperand {
  field: WebhookComponentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookComponentExpression
}

input WebhookComponentOrderBy {
  field: WebhookComponentField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type WebhookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookEdge {
  """The item at the end of the edge"""
  node: Webhook

  """A cursor for use in pagination"""
  cursor: String!
}

input WebhookExpression {
  operator: Operator!
  operands: [WebhookOperand]!
}

enum WebhookField {
  id
  Id
  BillableEntityId
  ApplicationId
  Name
  Description
  PayloadUrl
  Secret
  ContentType
  SslVerificationEnabled
  AllComponentEventsSelected
  IsActive
  CreatedDate
  CreatedByUserId
  ModifiedDate
  ModifiedByUserId
}

input WebhookOperand {
  field: WebhookField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookExpression
}

input WebhookOrderBy {
  field: WebhookField
  direction: OrderByDirection = Ascending
}

type WebhookSubscriptionComponent implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  LuwscComponentId: Int!
}

"""A connection to a list of items."""
type WebhookSubscriptionComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookSubscriptionComponentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookSubscriptionComponentEdge {
  """The item at the end of the edge"""
  node: WebhookSubscriptionComponent

  """A cursor for use in pagination"""
  cursor: String!
}

input WebhookSubscriptionComponentExpression {
  operator: Operator!
  operands: [WebhookSubscriptionComponentOperand]!
}

enum WebhookSubscriptionComponentField {
  id
  LuwscComponentId
}

input WebhookSubscriptionComponentOperand {
  field: WebhookSubscriptionComponentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookSubscriptionComponentExpression
}

input WebhookSubscriptionComponentOrderBy {
  field: WebhookSubscriptionComponentField
  direction: OrderByDirection = Ascending
}

type WebhookSubscriptionEventType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String
}

"""A connection to a list of items."""
type WebhookSubscriptionEventTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookSubscriptionEventTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebhookSubscriptionEventTypeEdge {
  """The item at the end of the edge"""
  node: WebhookSubscriptionEventType

  """A cursor for use in pagination"""
  cursor: String!
}

input WebhookSubscriptionEventTypeExpression {
  operator: Operator!
  operands: [WebhookSubscriptionEventTypeOperand]!
}

enum WebhookSubscriptionEventTypeField {
  id
  Id
  Name
}

input WebhookSubscriptionEventTypeOperand {
  field: WebhookSubscriptionEventTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebhookSubscriptionEventTypeExpression
}

input WebhookSubscriptionEventTypeOrderBy {
  field: WebhookSubscriptionEventTypeField
  direction: OrderByDirection = Ascending
}

type WebService implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  Name: String!
  Description: String
  Url: String!
  IsActive: Boolean!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  WebServiceOnWebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection
  WebServiceOnWebServiceMethods(after: String, first: Int, before: String, last: Int, sort: [WebServiceMethodOrderBy], filter: WebServiceMethodExpression): WebServiceMethodConnection!
}

type WebServiceAccount implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  TypeWebServiceAccountType: WebServiceAccountType!
  TypeId: Int!
  Name: String!
  Description: String
  IsActive: Boolean!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  EncSettingsJson: String!
  AccountWebServiceAccountOnWebServiceMethods(after: String, first: Int, before: String, last: Int, sort: [WebServiceMethodOrderBy], filter: WebServiceMethodExpression): WebServiceMethodConnection!
}

"""A connection to a list of items."""
type WebServiceAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebServiceAccountEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebServiceAccountEdge {
  """The item at the end of the edge"""
  node: WebServiceAccount

  """A cursor for use in pagination"""
  cursor: String!
}

input WebServiceAccountExpression {
  operator: Operator!
  operands: [WebServiceAccountOperand]!
}

enum WebServiceAccountField {
  id
  Id
  BeidInt
  AppId
  TypeId
  Name
  Description
  IsActive
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  EncSettingsJson
}

input WebServiceAccountOperand {
  field: WebServiceAccountField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebServiceAccountExpression
}

input WebServiceAccountOrderBy {
  field: WebServiceAccountField
  direction: OrderByDirection = Ascending
}

type WebServiceAccountType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  TypeWebServiceAccountTypeOnWebServiceAccounts(after: String, first: Int, before: String, last: Int, sort: [WebServiceAccountOrderBy], filter: WebServiceAccountExpression): WebServiceAccountConnection!
}

"""A connection to a list of items."""
type WebServiceAccountTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebServiceAccountTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebServiceAccountTypeEdge {
  """The item at the end of the edge"""
  node: WebServiceAccountType

  """A cursor for use in pagination"""
  cursor: String!
}

input WebServiceAccountTypeExpression {
  operator: Operator!
  operands: [WebServiceAccountTypeOperand]!
}

enum WebServiceAccountTypeField {
  id
  Id
  Name
}

input WebServiceAccountTypeOperand {
  field: WebServiceAccountTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebServiceAccountTypeExpression
}

input WebServiceAccountTypeOrderBy {
  field: WebServiceAccountTypeField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type WebServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebServiceEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebServiceEdge {
  """The item at the end of the edge"""
  node: WebService

  """A cursor for use in pagination"""
  cursor: String!
}

input WebServiceExpression {
  operator: Operator!
  operands: [WebServiceOperand]!
}

enum WebServiceField {
  id
  Id
  BeidInt
  AppId
  Name
  Description
  Url
  IsActive
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
}

type WebServiceLog implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  BeBillableEntity: BillableEntity!
  BeidInt: Int!
  AppApplication: Application!
  AppId: Int!
  WebService: WebService
  WebServiceId: Int
  WebMethodWebServiceMethod: WebServiceMethod
  WebMethodId: Int
  ItemId: Int!
  ItemComponentComponent: Component!
  ItemComponentId: Int!
  CallId: ID!
  LogDateUtc: DateTime
  IsSuccessful: Boolean!
  RequestEndpoint: String
  StatusCode: Int
  StatusDescription: String
  LogText: String!
}

"""A connection to a list of items."""
type WebServiceLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebServiceLogEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebServiceLogEdge {
  """The item at the end of the edge"""
  node: WebServiceLog

  """A cursor for use in pagination"""
  cursor: String!
}

input WebServiceLogExpression {
  operator: Operator!
  operands: [WebServiceLogOperand]!
}

enum WebServiceLogField {
  id
  Id
  BeidInt
  AppId
  WebServiceId
  WebMethodId
  ItemId
  ItemComponentId
  CallId
  LogDateUtc
  IsSuccessful
  RequestEndpoint
  StatusCode
  StatusDescription
  LogText
}

input WebServiceLogOperand {
  field: WebServiceLogField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebServiceLogExpression
}

input WebServiceLogOrderBy {
  field: WebServiceLogField
  direction: OrderByDirection = Ascending
}

type WebServiceMethod implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  WebService: WebService!
  WebServiceId: Int!
  Name: String!
  Description: String
  Verb: String!
  Url: String!
  IsActive: Boolean!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  SettingsJson: String!
  AccountWebServiceAccount: WebServiceAccount!
  AccountId: Int!
  WebMethodWebServiceMethodOnWebServiceLogs(after: String, first: Int, before: String, last: Int, sort: [WebServiceLogOrderBy], filter: WebServiceLogExpression): WebServiceLogConnection
}

"""A connection to a list of items."""
type WebServiceMethodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebServiceMethodEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WebServiceMethodEdge {
  """The item at the end of the edge"""
  node: WebServiceMethod

  """A cursor for use in pagination"""
  cursor: String!
}

input WebServiceMethodExpression {
  operator: Operator!
  operands: [WebServiceMethodOperand]!
}

enum WebServiceMethodField {
  id
  Id
  WebServiceId
  Name
  Description
  Verb
  Url
  IsActive
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  SettingsJson
  AccountId
}

input WebServiceMethodOperand {
  field: WebServiceMethodField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebServiceMethodExpression
}

input WebServiceMethodOrderBy {
  field: WebServiceMethodField
  direction: OrderByDirection = Ascending
}

input WebServiceOperand {
  field: WebServiceField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WebServiceExpression
}

input WebServiceOrderBy {
  field: WebServiceField
  direction: OrderByDirection = Ascending
}

type WorkableHoursByWeek implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  BeId: ID!
  TmUid: ID!
  TimeYear: Int
  TimeMonth: Int
  TimeWeek: Int
  UserWorkableHours: Int
}

"""A connection to a list of items."""
type WorkableHoursByWeekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkableHoursByWeekEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkableHoursByWeekEdge {
  """The item at the end of the edge"""
  node: WorkableHoursByWeek

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkableHoursByWeekExpression {
  operator: Operator!
  operands: [WorkableHoursByWeekOperand]!
}

enum WorkableHoursByWeekField {
  id
  BeId
  TmUid
  TimeYear
  TimeMonth
  TimeWeek
  UserWorkableHours
}

input WorkableHoursByWeekOperand {
  field: WorkableHoursByWeekField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkableHoursByWeekExpression
}

input WorkableHoursByWeekOrderBy {
  field: WorkableHoursByWeekField
  direction: OrderByDirection = Ascending
}

type Workflow implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  CreatedByUid: ID!
  DateCreated: DateTime!
  Name: String!
  Description: String
  DateModified: DateTime!
  IsActive: Boolean!
  ReadyForReportsStepId: Int!
  WorkflowOnRequestsExts(after: String, first: Int, before: String, last: Int, sort: [RequestsExtOrderBy], filter: RequestsExtExpression): RequestsExtConnection
}

type WorkflowAssignmentsNew implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  ItemId: Int!
  ComponentId: Int!
  WorkflowWorkflowsNew: WorkflowsNew!
  WorkflowId: Int!
  ResourceId: Int!
  ResourceComponentId: Int!
  CreatedDateUtc: DateTime!
  StepId: ID
  StepName: String
  IsFallback: Boolean!
  IsForManagers: Boolean!
}

"""A connection to a list of items."""
type WorkflowAssignmentsNewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowAssignmentsNewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowAssignmentsNewEdge {
  """The item at the end of the edge"""
  node: WorkflowAssignmentsNew

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowAssignmentsNewExpression {
  operator: Operator!
  operands: [WorkflowAssignmentsNewOperand]!
}

enum WorkflowAssignmentsNewField {
  id
  Id
  Beid
  ItemId
  ComponentId
  WorkflowId
  ResourceId
  ResourceComponentId
  CreatedDateUtc
  StepId
  StepName
  IsFallback
  IsForManagers
}

input WorkflowAssignmentsNewOperand {
  field: WorkflowAssignmentsNewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowAssignmentsNewExpression
}

input WorkflowAssignmentsNewOrderBy {
  field: WorkflowAssignmentsNewField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type WorkflowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

type WorkflowDraft implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  WorkflowWorkflowsNew: WorkflowsNew!
  WorkflowId: Int!
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedDateUtc: DateTime!
  EditorVersion: ID!
  WorkflowName: String!
  WorkflowDescription: String
  WorkflowXml: Xml!
  StagesXml: Xml!
}

"""A connection to a list of items."""
type WorkflowDraftConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowDraftEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowDraftEdge {
  """The item at the end of the edge"""
  node: WorkflowDraft

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowDraftExpression {
  operator: Operator!
  operands: [WorkflowDraftOperand]!
}

enum WorkflowDraftField {
  id
  Id
  WorkflowId
  CreatedUid
  CreatedDateUtc
  ModifiedDateUtc
  EditorVersion
  WorkflowName
  WorkflowDescription
  WorkflowXml
  StagesXml
}

input WorkflowDraftOperand {
  field: WorkflowDraftField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowDraftExpression
}

input WorkflowDraftOrderBy {
  field: WorkflowDraftField
  direction: OrderByDirection = Ascending
}

"""An edge in a connection."""
type WorkflowEdge {
  """The item at the end of the edge"""
  node: Workflow

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowExpression {
  operator: Operator!
  operands: [WorkflowOperand]!
}

enum WorkflowField {
  id
  Id
  Beid
  CreatedByUid
  DateCreated
  Name
  Description
  DateModified
  IsActive
  ReadyForReportsStepId
}

type WorkflowHistoryNew implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  WorkflowWorkflowsNew: WorkflowsNew!
  WorkflowId: Int!
  StatusUidUser: User!
  StatusUid: ID!
  StatusDateUtc: DateTime!
  StepId: ID!
  StepName: String!
  StepDescription: String
  ResultName: String!
  Comments: String
  ResultId: String
  IsStepComplete: Boolean
}

"""A connection to a list of items."""
type WorkflowHistoryNewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowHistoryNewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowHistoryNewEdge {
  """The item at the end of the edge"""
  node: WorkflowHistoryNew

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowHistoryNewExpression {
  operator: Operator!
  operands: [WorkflowHistoryNewOperand]!
}

enum WorkflowHistoryNewField {
  id
  Id
  Beid
  WorkflowId
  StatusUid
  StatusDateUtc
  StepId
  StepName
  StepDescription
  ResultName
  Comments
  ResultId
  IsStepComplete
}

input WorkflowHistoryNewOperand {
  field: WorkflowHistoryNewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowHistoryNewExpression
}

input WorkflowHistoryNewOrderBy {
  field: WorkflowHistoryNewField
  direction: OrderByDirection = Ascending
}

input WorkflowOperand {
  field: WorkflowField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowExpression
}

input WorkflowOrderBy {
  field: WorkflowField
  direction: OrderByDirection = Ascending
}

type WorkflowsNew implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Name: String!
  Description: String
  OriginalWorkflowId: Int
  ItemId: Int
  ComponentId: Int
  TargetItemId: Int
  TargetComponentId: Int
  CreatedUidUser: User!
  CreatedUid: ID!
  CreatedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  ModifiedDateUtc: DateTime!
  CurrentStepNames: String
  IsActive: Boolean!
  IsComplete: Boolean!
  CompletedDateUtc: DateTime
  Xml: Xml
  WorkflowType: WorkflowType!
  WorkflowTypeId: Int!
  StatusWorkflowStatus: WorkflowStatus
  StatusId: Int
  AppApplication: Application
  AppId: Int
  RowVersion: Timestamp!
  NewWorkflowWorkflowsNewOnAutomationRules(after: String, first: Int, before: String, last: Int, sort: [AutomationRuleOrderBy], filter: AutomationRuleExpression): AutomationRuleConnection
  WorkflowWorkflowsNewOnServices(after: String, first: Int, before: String, last: Int, sort: [ServiceOrderBy], filter: ServiceExpression): ServiceConnection
  WorkflowWorkflowsNewOnWorkflowAssignmentsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowAssignmentsNewOrderBy], filter: WorkflowAssignmentsNewExpression): WorkflowAssignmentsNewConnection!
  WorkflowWorkflowsNewOnWorkflowDrafts(after: String, first: Int, before: String, last: Int, sort: [WorkflowDraftOrderBy], filter: WorkflowDraftExpression): WorkflowDraftConnection!
  WorkflowWorkflowsNewOnWorkflowHistoryNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowHistoryNewOrderBy], filter: WorkflowHistoryNewExpression): WorkflowHistoryNewConnection!
  WorkflowWorkflowsNewOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection
  WorkflowWorkflowsNewOnWorkflowStepsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepsNewOrderBy], filter: WorkflowStepsNewExpression): WorkflowStepsNewConnection!
}

"""A connection to a list of items."""
type WorkflowsNewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowsNewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowsNewEdge {
  """The item at the end of the edge"""
  node: WorkflowsNew

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowsNewExpression {
  operator: Operator!
  operands: [WorkflowsNewOperand]!
}

enum WorkflowsNewField {
  id
  Id
  Beid
  Name
  Description
  OriginalWorkflowId
  ItemId
  ComponentId
  TargetItemId
  TargetComponentId
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
  CurrentStepNames
  IsActive
  IsComplete
  CompletedDateUtc
  Xml
  WorkflowTypeId
  StatusId
  AppId
  RowVersion
}

input WorkflowsNewOperand {
  field: WorkflowsNewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowsNewExpression
}

input WorkflowsNewOrderBy {
  field: WorkflowsNewField
  direction: OrderByDirection = Ascending
}

type WorkflowStage implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  WorkflowWorkflowsNew: WorkflowsNew
  WorkflowId: Int
  Name: String
  Description: String
  TargetComponentComponent: Component!
  TargetComponentId: Int!
  Order: Int!
  CreatedDateUtc: DateTime!
  CreatedUidUser: User!
  CreatedUid: ID!
  ModifiedDateUtc: DateTime!
  ModifiedUidUser: User!
  ModifiedUid: ID!
  StatusWorkflowStageStatus: WorkflowStageStatus!
  StatusId: Int!
  AppApplication: Application
  AppId: Int
  OriginalStageId: Int
  StageWorkflowStageOnWorkflowStepsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepsNewOrderBy], filter: WorkflowStepsNewExpression): WorkflowStepsNewConnection
}

"""A connection to a list of items."""
type WorkflowStageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStageEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStageEdge {
  """The item at the end of the edge"""
  node: WorkflowStage

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStageExpression {
  operator: Operator!
  operands: [WorkflowStageOperand]!
}

enum WorkflowStageField {
  id
  Id
  Beid
  WorkflowId
  Name
  Description
  TargetComponentId
  Order
  CreatedDateUtc
  CreatedUid
  ModifiedDateUtc
  ModifiedUid
  StatusId
  AppId
  OriginalStageId
}

input WorkflowStageOperand {
  field: WorkflowStageField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStageExpression
}

input WorkflowStageOrderBy {
  field: WorkflowStageField
  direction: OrderByDirection = Ascending
}

type WorkflowStageStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Description: String!
  StatusWorkflowStageStatusOnWorkflowStages(after: String, first: Int, before: String, last: Int, sort: [WorkflowStageOrderBy], filter: WorkflowStageExpression): WorkflowStageConnection!
}

"""A connection to a list of items."""
type WorkflowStageStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStageStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStageStatusEdge {
  """The item at the end of the edge"""
  node: WorkflowStageStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStageStatusExpression {
  operator: Operator!
  operands: [WorkflowStageStatusOperand]!
}

enum WorkflowStageStatusField {
  id
  Id
  Name
  Description
}

input WorkflowStageStatusOperand {
  field: WorkflowStageStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStageStatusExpression
}

input WorkflowStageStatusOrderBy {
  field: WorkflowStageStatusField
  direction: OrderByDirection = Ascending
}

type WorkflowStatus implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  Description: String
  CreatedUidUser: User
  CreatedUid: ID
  CreatedDateUtc: DateTime
  ModifiedUidUser: User
  ModifiedUid: ID
  ModifiedDateUtc: DateTime
  StatusWorkflowStatusOnWorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection
}

"""A connection to a list of items."""
type WorkflowStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStatusEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStatusEdge {
  """The item at the end of the edge"""
  node: WorkflowStatus

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStatusExpression {
  operator: Operator!
  operands: [WorkflowStatusOperand]!
}

enum WorkflowStatusField {
  id
  Id
  Name
  Description
  CreatedUid
  CreatedDateUtc
  ModifiedUid
  ModifiedDateUtc
}

input WorkflowStatusOperand {
  field: WorkflowStatusField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStatusExpression
}

input WorkflowStatusOrderBy {
  field: WorkflowStatusField
  direction: OrderByDirection = Ascending
}

type WorkflowStep implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  WorkflowId: Int!
  TemplateStepId: Int!
  IsActive: Boolean!
  AllowApprove: Boolean!
  AllowReject: Boolean!
  AllowEdit: Boolean!
  AllowForward: Boolean!
  Order: Float
  AssignmentNames: String
  AssignmentUiDs: String
  AllowReturnToRequestor: Boolean!
  AllowReturnToPrevStep: Boolean!
  ScoreCardId: Int
  WorkflowStepOnRequestsExts(after: String, first: Int, before: String, last: Int, sort: [RequestsExtOrderBy], filter: RequestsExtExpression): RequestsExtConnection
  StepWorkflowStepOnWorkflowStepSections(after: String, first: Int, before: String, last: Int, sort: [WorkflowStepSectionOrderBy], filter: WorkflowStepSectionExpression): WorkflowStepSectionConnection!
}

type WorkflowStepAssignment implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  StepId: Int!
  Uid: ID
  DateCreated: DateTime!
  GroupId: Int
  IsOption: Boolean!
  Team: Team
  TeamId: Int
}

"""A connection to a list of items."""
type WorkflowStepAssignmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStepAssignmentEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStepAssignmentEdge {
  """The item at the end of the edge"""
  node: WorkflowStepAssignment

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStepAssignmentExpression {
  operator: Operator!
  operands: [WorkflowStepAssignmentOperand]!
}

enum WorkflowStepAssignmentField {
  id
  Id
  StepId
  Uid
  DateCreated
  GroupId
  IsOption
  TeamId
}

input WorkflowStepAssignmentOperand {
  field: WorkflowStepAssignmentField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStepAssignmentExpression
}

input WorkflowStepAssignmentOrderBy {
  field: WorkflowStepAssignmentField
  direction: OrderByDirection = Ascending
}

"""A connection to a list of items."""
type WorkflowStepConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStepEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStepEdge {
  """The item at the end of the edge"""
  node: WorkflowStep

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStepExpression {
  operator: Operator!
  operands: [WorkflowStepOperand]!
}

enum WorkflowStepField {
  id
  Id
  WorkflowId
  TemplateStepId
  IsActive
  AllowApprove
  AllowReject
  AllowEdit
  AllowForward
  Order
  AssignmentNames
  AssignmentUiDs
  AllowReturnToRequestor
  AllowReturnToPrevStep
  ScoreCardId
}

input WorkflowStepOperand {
  field: WorkflowStepField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStepExpression
}

input WorkflowStepOrderBy {
  field: WorkflowStepField
  direction: OrderByDirection = Ascending
}

type WorkflowStepSection implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  StepWorkflowStep: WorkflowStep!
  StepId: Int!
  PsProjectSection: ProjectSection!
  Psid: Int!
  IsRequired: Boolean!
  IsEditable: Boolean!
}

"""A connection to a list of items."""
type WorkflowStepSectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStepSectionEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStepSectionEdge {
  """The item at the end of the edge"""
  node: WorkflowStepSection

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStepSectionExpression {
  operator: Operator!
  operands: [WorkflowStepSectionOperand]!
}

enum WorkflowStepSectionField {
  id
  Id
  StepId
  Psid
  IsRequired
  IsEditable
}

input WorkflowStepSectionOperand {
  field: WorkflowStepSectionField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStepSectionExpression
}

input WorkflowStepSectionOrderBy {
  field: WorkflowStepSectionField
  direction: OrderByDirection = Ascending
}

type WorkflowStepsNew implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  WorkflowWorkflowsNew: WorkflowsNew!
  WorkflowId: Int!
  StepId: ID!
  StageWorkflowStage: WorkflowStage
  StageId: Int
  Name: String!
  Description: String
  Order: Int!
  StartDateUtc: DateTime
  TypeId: String
}

"""A connection to a list of items."""
type WorkflowStepsNewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowStepsNewEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowStepsNewEdge {
  """The item at the end of the edge"""
  node: WorkflowStepsNew

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowStepsNewExpression {
  operator: Operator!
  operands: [WorkflowStepsNewOperand]!
}

enum WorkflowStepsNewField {
  id
  Id
  WorkflowId
  StepId
  StageId
  Name
  Description
  Order
  StartDateUtc
  TypeId
}

input WorkflowStepsNewOperand {
  field: WorkflowStepsNewField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowStepsNewExpression
}

input WorkflowStepsNewOrderBy {
  field: WorkflowStepsNewField
  direction: OrderByDirection = Ascending
}

type WorkflowTemplateStep implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Beid: ID!
  Order: Float!
  Name: String!
  Description: String
  DateCreated: DateTime!
  IsActive: Boolean!
}

"""A connection to a list of items."""
type WorkflowTemplateStepConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowTemplateStepEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowTemplateStepEdge {
  """The item at the end of the edge"""
  node: WorkflowTemplateStep

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowTemplateStepExpression {
  operator: Operator!
  operands: [WorkflowTemplateStepOperand]!
}

enum WorkflowTemplateStepField {
  id
  Id
  Beid
  Order
  Name
  Description
  DateCreated
  IsActive
}

input WorkflowTemplateStepOperand {
  field: WorkflowTemplateStepField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowTemplateStepExpression
}

input WorkflowTemplateStepOrderBy {
  field: WorkflowTemplateStepField
  direction: OrderByDirection = Ascending
}

type WorkflowType implements Node {
  """Value used for Update and Delete mutations."""
  id: ID!
  Id: Int!
  Name: String!
  WorkflowTypeOnWorkflowsNews(after: String, first: Int, before: String, last: Int, sort: [WorkflowsNewOrderBy], filter: WorkflowsNewExpression): WorkflowsNewConnection!
}

"""A connection to a list of items."""
type WorkflowTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkflowTypeEdge]

  """
  The total count of objects in the connection regardless of pagination.
  """
  totalCount: Int
}

"""An edge in a connection."""
type WorkflowTypeEdge {
  """The item at the end of the edge"""
  node: WorkflowType

  """A cursor for use in pagination"""
  cursor: String!
}

input WorkflowTypeExpression {
  operator: Operator!
  operands: [WorkflowTypeOperand]!
}

enum WorkflowTypeField {
  id
  Id
  Name
}

input WorkflowTypeOperand {
  field: WorkflowTypeField
  dateTimeValue: DateTime
  decimalValue: Decimal
  idValue: ID
  integerValue: Int
  stringValue: String
  expression: WorkflowTypeExpression
}

input WorkflowTypeOrderBy {
  field: WorkflowTypeField
  direction: OrderByDirection = Ascending
}

scalar Xml
