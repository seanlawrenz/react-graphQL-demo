// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Main rendering 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Main />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <nav
            className="buttonCellTop"
          >
            <Link
              className="btn btn-link tdx-react-no-text-decoration"
              replace={false}
              to="/new"
            >
              <span
                aria-hidden="true"
                className="fa fa-plus fa-nopad"
              />
               New
              <span
                className="sr-only"
              >
                Create New
              </span>
            </Link>
          </nav>
          <h1
            style={
              Object {
                "margin": "0.5em",
              }
            }
          >
            Webhooks example
          </h1>
        </div>,
        <ReactRelayQueryRenderer
          environment={
            RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
                "executeWithEvents": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            }
          }
          query={[Function]}
          render={[Function]}
        />,
      ],
      "className": "gutter-bottom",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <nav
              className="buttonCellTop"
            >
              <Link
                className="btn btn-link tdx-react-no-text-decoration"
                replace={false}
                to="/new"
              >
                <span
                  aria-hidden="true"
                  className="fa fa-plus fa-nopad"
                />
                 New
                <span
                  className="sr-only"
                >
                  Create New
                </span>
              </Link>
            </nav>,
            <h1
              style={
                Object {
                  "margin": "0.5em",
                }
              }
            >
              Webhooks example
            </h1>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                className="btn btn-link tdx-react-no-text-decoration"
                replace={false}
                to="/new"
              >
                <span
                  aria-hidden="true"
                  className="fa fa-plus fa-nopad"
                />
                 New
                <span
                  className="sr-only"
                >
                  Create New
                </span>
              </Link>,
              "className": "buttonCellTop",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <span
                    aria-hidden="true"
                    className="fa fa-plus fa-nopad"
                  />,
                  " New",
                  <span
                    className="sr-only"
                  >
                    Create New
                  </span>,
                ],
                "className": "btn btn-link tdx-react-no-text-decoration",
                "replace": false,
                "to": "/new",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "aria-hidden": "true",
                    "className": "fa fa-plus fa-nopad",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "span",
                },
                " New",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Create New",
                    "className": "sr-only",
                  },
                  "ref": null,
                  "rendered": "Create New",
                  "type": "span",
                },
              ],
              "type": [Function],
            },
            "type": "nav",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Webhooks example",
              "style": Object {
                "margin": "0.5em",
              },
            },
            "ref": null,
            "rendered": "Webhooks example",
            "type": "h1",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "environment": RelayModernEnvironment {
            "__setNet": [Function],
            "_deferrableSelections": Set {},
            "_network": Object {
              "execute": [Function],
              "executeWithEvents": [Function],
            },
            "_publishQueue": RelayPublishQueue {
              "_appliedOptimisticUpdates": Set {},
              "_backup": Object {},
              "_handlerProvider": [Function],
              "_pendingBackupRebase": false,
              "_pendingData": Set {},
              "_pendingOptimisticUpdates": Set {},
              "_pendingUpdaters": Set {},
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
            },
            "_store": RelayMarkSweepStore {
              "_gcEnabled": true,
              "_hasScheduledGC": false,
              "_index": 0,
              "_recordSource": Object {},
              "_roots": Map {},
              "_subscriptions": Set {},
              "_updatedRecordIDs": Object {},
            },
            "configName": undefined,
            "unstable_internal": Object {
              "areEqualSelectors": [Function],
              "createFragmentSpecResolver": [Function],
              "createOperationSelector": [Function],
              "getDataIDsFromObject": [Function],
              "getFragment": [Function],
              "getRequest": [Function],
              "getSelector": [Function],
              "getSelectorList": [Function],
              "getSelectorsFromObject": [Function],
              "getVariablesFromObject": [Function],
            },
          },
          "query": [Function],
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <nav
              className="buttonCellTop"
            >
              <Link
                className="btn btn-link tdx-react-no-text-decoration"
                replace={false}
                to="/new"
              >
                <span
                  aria-hidden="true"
                  className="fa fa-plus fa-nopad"
                />
                 New
                <span
                  className="sr-only"
                >
                  Create New
                </span>
              </Link>
            </nav>
            <h1
              style={
                Object {
                  "margin": "0.5em",
                }
              }
            >
              Webhooks example
            </h1>
          </div>,
          <ReactRelayQueryRenderer
            environment={
              RelayModernEnvironment {
                "__setNet": [Function],
                "_deferrableSelections": Set {},
                "_network": Object {
                  "execute": [Function],
                  "executeWithEvents": [Function],
                },
                "_publishQueue": RelayPublishQueue {
                  "_appliedOptimisticUpdates": Set {},
                  "_backup": Object {},
                  "_handlerProvider": [Function],
                  "_pendingBackupRebase": false,
                  "_pendingData": Set {},
                  "_pendingOptimisticUpdates": Set {},
                  "_pendingUpdaters": Set {},
                  "_store": RelayMarkSweepStore {
                    "_gcEnabled": true,
                    "_hasScheduledGC": false,
                    "_index": 0,
                    "_recordSource": Object {},
                    "_roots": Map {},
                    "_subscriptions": Set {},
                    "_updatedRecordIDs": Object {},
                  },
                },
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
                "configName": undefined,
                "unstable_internal": Object {
                  "areEqualSelectors": [Function],
                  "createFragmentSpecResolver": [Function],
                  "createOperationSelector": [Function],
                  "getDataIDsFromObject": [Function],
                  "getFragment": [Function],
                  "getRequest": [Function],
                  "getSelector": [Function],
                  "getSelectorList": [Function],
                  "getSelectorsFromObject": [Function],
                  "getVariablesFromObject": [Function],
                },
              }
            }
            query={[Function]}
            render={[Function]}
          />,
        ],
        "className": "gutter-bottom",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <nav
                className="buttonCellTop"
              >
                <Link
                  className="btn btn-link tdx-react-no-text-decoration"
                  replace={false}
                  to="/new"
                >
                  <span
                    aria-hidden="true"
                    className="fa fa-plus fa-nopad"
                  />
                   New
                  <span
                    className="sr-only"
                  >
                    Create New
                  </span>
                </Link>
              </nav>,
              <h1
                style={
                  Object {
                    "margin": "0.5em",
                  }
                }
              >
                Webhooks example
              </h1>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  className="btn btn-link tdx-react-no-text-decoration"
                  replace={false}
                  to="/new"
                >
                  <span
                    aria-hidden="true"
                    className="fa fa-plus fa-nopad"
                  />
                   New
                  <span
                    className="sr-only"
                  >
                    Create New
                  </span>
                </Link>,
                "className": "buttonCellTop",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <span
                      aria-hidden="true"
                      className="fa fa-plus fa-nopad"
                    />,
                    " New",
                    <span
                      className="sr-only"
                    >
                      Create New
                    </span>,
                  ],
                  "className": "btn btn-link tdx-react-no-text-decoration",
                  "replace": false,
                  "to": "/new",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "aria-hidden": "true",
                      "className": "fa fa-plus fa-nopad",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "span",
                  },
                  " New",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Create New",
                      "className": "sr-only",
                    },
                    "ref": null,
                    "rendered": "Create New",
                    "type": "span",
                  },
                ],
                "type": [Function],
              },
              "type": "nav",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Webhooks example",
                "style": Object {
                  "margin": "0.5em",
                },
              },
              "ref": null,
              "rendered": "Webhooks example",
              "type": "h1",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "environment": RelayModernEnvironment {
              "__setNet": [Function],
              "_deferrableSelections": Set {},
              "_network": Object {
                "execute": [Function],
                "executeWithEvents": [Function],
              },
              "_publishQueue": RelayPublishQueue {
                "_appliedOptimisticUpdates": Set {},
                "_backup": Object {},
                "_handlerProvider": [Function],
                "_pendingBackupRebase": false,
                "_pendingData": Set {},
                "_pendingOptimisticUpdates": Set {},
                "_pendingUpdaters": Set {},
                "_store": RelayMarkSweepStore {
                  "_gcEnabled": true,
                  "_hasScheduledGC": false,
                  "_index": 0,
                  "_recordSource": Object {},
                  "_roots": Map {},
                  "_subscriptions": Set {},
                  "_updatedRecordIDs": Object {},
                },
              },
              "_store": RelayMarkSweepStore {
                "_gcEnabled": true,
                "_hasScheduledGC": false,
                "_index": 0,
                "_recordSource": Object {},
                "_roots": Map {},
                "_subscriptions": Set {},
                "_updatedRecordIDs": Object {},
              },
              "configName": undefined,
              "unstable_internal": Object {
                "areEqualSelectors": [Function],
                "createFragmentSpecResolver": [Function],
                "createOperationSelector": [Function],
                "getDataIDsFromObject": [Function],
                "getFragment": [Function],
                "getRequest": [Function],
                "getSelector": [Function],
                "getSelectorList": [Function],
                "getSelectorsFromObject": [Function],
                "getVariablesFromObject": [Function],
              },
            },
            "query": [Function],
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
